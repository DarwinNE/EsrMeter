gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; *****************************************************************************
                      00002 ;               esr.asm
                      00003 ;       A simple ESR measuring system exploiting lock-in techniques
                      00004 ;       Davide Bucci, 2021
                      00005 ;       Version 1.1
                      00006 ; *****************************************************************************
                      00007 
                      00008 ; License:
                      00009 ; --------
                      00010 
                      00011 ;    Copyright (C) 2021-2022 Davide Bucci  davbucciPleaseNoSpamHerE@tiscali.it
                      00012 
                      00013 ;    This program is free software; you can redistribute it and/or modify
                      00014 ;    it under the terms of the GNU General Public License as published by
                      00015 ;    the Free Software Foundation; either version 3 of the License, or
                      00016 ;    (at your option) any later version.
                      00017 
                      00018 ;    This program is distributed in the hope that it will be useful,
                      00019 ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                      00020 ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      00021 ;    GNU General Public License for more details.
                      00022 
                      00023 ;    You should have received a copy of the GNU General Public License
                      00024 ;    along with this program; if not, write to the Free Software
                      00025 ;    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
                      00026 
                      00027         ERRORLEVEL -302         ; disable the annoying warning
                      00028                                 ; "Register in operand not in bank 0.
                      00029                                 ; Ensure bank bits are correct."
                      00030 
                      00031 #include <p16F883.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F883 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00009         NOLIST
                      00010 
                      00011 ;==========================================================================
                      00012 ;  This header file defines configurations, registers, and other useful
                      00013 ;  bits of information for the PIC16F883 microcontroller.  These names
                      00014 ;  are taken to match the data sheets as closely as possible.
                      00015 ;
                      00016 ;  Note that the processor must be selected before this file is included.
                      00017 ;  The processor may be selected the following ways:
                      00018 ;
                      00019 ;       1. Command line switch:
                      00020 ;               C:\MPASM MYFILE.ASM /PIC16F883
                      00021 ;       2. LIST directive in the source file
                      00022 ;               LIST   P=PIC16F883
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00023 ;       3. Processor Type entry in the MPASM full-screen interface
                      00024 ;       4. Setting the processor in the MPLAB Project Dialog
                      00025 ;==========================================================================
                      00026 
                      00027 ;==========================================================================
                      00028 ;
                      00029 ;       Verify Processor
                      00030 ;
                      00031 ;==========================================================================
                      00032         IFNDEF __16F883
                      00033            MESSG "Processor-header file mismatch.  Verify selected processor."
                      00034         ENDIF
                      00035 
                      00036 
                      00037 
                      00038 ;==========================================================================
                      00039 ;
                      00040 ;       Register Definitions
                      00041 ;
                      00042 ;==========================================================================
                      00043 
  00000000            00044 W                EQU  H'0000'
  00000001            00045 F                EQU  H'0001'
                      00046 
                      00047 ;----- Register Files -----------------------------------------------------
                      00048 
                      00049 ;-----Bank0------------------
  00000000            00050 INDF             EQU  H'0000'
  00000001            00051 TMR0             EQU  H'0001'
  00000002            00052 PCL              EQU  H'0002'
  00000003            00053 STATUS           EQU  H'0003'
  00000004            00054 FSR              EQU  H'0004'
  00000005            00055 PORTA            EQU  H'0005'
  00000006            00056 PORTB            EQU  H'0006'
  00000007            00057 PORTC            EQU  H'0007'
  00000009            00058 PORTE            EQU  H'0009'
  0000000A            00059 PCLATH           EQU  H'000A'
  0000000B            00060 INTCON           EQU  H'000B'
  0000000C            00061 PIR1             EQU  H'000C'
  0000000D            00062 PIR2             EQU  H'000D'
  0000000E            00063 TMR1             EQU  H'000E'
  0000000E            00064 TMR1L            EQU  H'000E'
  0000000F            00065 TMR1H            EQU  H'000F'
  00000010            00066 T1CON            EQU  H'0010'
  00000011            00067 TMR2             EQU  H'0011'
  00000012            00068 T2CON            EQU  H'0012'
  00000013            00069 SSPBUF           EQU  H'0013'
  00000014            00070 SSPCON           EQU  H'0014'
  00000015            00071 CCPR1            EQU  H'0015'
  00000015            00072 CCPR1L           EQU  H'0015'
  00000016            00073 CCPR1H           EQU  H'0016'
  00000017            00074 CCP1CON          EQU  H'0017'
  00000018            00075 RCSTA            EQU  H'0018'
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000019            00076 TXREG            EQU  H'0019'
  0000001A            00077 RCREG            EQU  H'001A'
  0000001B            00078 CCPR2            EQU  H'001B'
  0000001B            00079 CCPR2L           EQU  H'001B'
  0000001C            00080 CCPR2H           EQU  H'001C'
  0000001D            00081 CCP2CON          EQU  H'001D'
  0000001E            00082 ADRESH           EQU  H'001E'
  0000001F            00083 ADCON0           EQU  H'001F'
                      00084 
                      00085 ;-----Bank1------------------
  00000081            00086 OPTION_REG       EQU  H'0081'
  00000085            00087 TRISA            EQU  H'0085'
  00000086            00088 TRISB            EQU  H'0086'
  00000087            00089 TRISC            EQU  H'0087'
  00000089            00090 TRISE            EQU  H'0089'
  0000008C            00091 PIE1             EQU  H'008C'
  0000008D            00092 PIE2             EQU  H'008D'
  0000008E            00093 PCON             EQU  H'008E'
  0000008F            00094 OSCCON           EQU  H'008F'
  00000090            00095 OSCTUNE          EQU  H'0090'
  00000091            00096 SSPCON2          EQU  H'0091'
  00000092            00097 PR2              EQU  H'0092'
  00000093            00098 MSK              EQU  H'0093'
  00000093            00099 SSPADD           EQU  H'0093'
  00000093            00100 SSPMSK           EQU  H'0093'
  00000094            00101 SSPSTAT          EQU  H'0094'
  00000095            00102 WPUB             EQU  H'0095'
  00000096            00103 IOCB             EQU  H'0096'
  00000097            00104 VRCON            EQU  H'0097'
  00000098            00105 TXSTA            EQU  H'0098'
  00000099            00106 SPBRG            EQU  H'0099'
  0000009A            00107 SPBRGH           EQU  H'009A'
  0000009B            00108 PWM1CON          EQU  H'009B'
  0000009C            00109 ECCPAS           EQU  H'009C'
  0000009D            00110 PSTRCON          EQU  H'009D'
  0000009E            00111 ADRESL           EQU  H'009E'
  0000009F            00112 ADCON1           EQU  H'009F'
                      00113 
                      00114 ;-----Bank2------------------
  00000105            00115 WDTCON           EQU  H'0105'
  00000107            00116 CM1CON0          EQU  H'0107'
  00000108            00117 CM2CON0          EQU  H'0108'
  00000109            00118 CM2CON1          EQU  H'0109'
  0000010C            00119 EEDAT            EQU  H'010C'
  0000010C            00120 EEDATA           EQU  H'010C'
  0000010D            00121 EEADR            EQU  H'010D'
  0000010E            00122 EEDATH           EQU  H'010E'
  0000010F            00123 EEADRH           EQU  H'010F'
                      00124 
                      00125 ;-----Bank3------------------
  00000185            00126 SRCON            EQU  H'0185'
  00000187            00127 BAUDCTL          EQU  H'0187'
  00000188            00128 ANSEL            EQU  H'0188'
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000189            00129 ANSELH           EQU  H'0189'
  0000018C            00130 EECON1           EQU  H'018C'
  0000018D            00131 EECON2           EQU  H'018D'
                      00132 
                      00133 ;----- STATUS Bits -----------------------------------------------------
  00000000            00134 C                EQU  H'0000'
  00000001            00135 DC               EQU  H'0001'
  00000002            00136 Z                EQU  H'0002'
  00000003            00137 NOT_PD           EQU  H'0003'
  00000004            00138 NOT_TO           EQU  H'0004'
  00000007            00139 IRP              EQU  H'0007'
                      00140 
  00000005            00141 RP0              EQU  H'0005'
  00000006            00142 RP1              EQU  H'0006'
                      00143 
                      00144 
                      00145 ;----- PORTA Bits -----------------------------------------------------
  00000000            00146 RA0              EQU  H'0000'
  00000001            00147 RA1              EQU  H'0001'
  00000002            00148 RA2              EQU  H'0002'
  00000003            00149 RA3              EQU  H'0003'
  00000004            00150 RA4              EQU  H'0004'
  00000005            00151 RA5              EQU  H'0005'
  00000006            00152 RA6              EQU  H'0006'
  00000007            00153 RA7              EQU  H'0007'
                      00154 
                      00155 
                      00156 ;----- PORTB Bits -----------------------------------------------------
  00000000            00157 RB0              EQU  H'0000'
  00000001            00158 RB1              EQU  H'0001'
  00000002            00159 RB2              EQU  H'0002'
  00000003            00160 RB3              EQU  H'0003'
  00000004            00161 RB4              EQU  H'0004'
  00000005            00162 RB5              EQU  H'0005'
  00000006            00163 RB6              EQU  H'0006'
  00000007            00164 RB7              EQU  H'0007'
                      00165 
                      00166 
                      00167 ;----- PORTC Bits -----------------------------------------------------
  00000000            00168 RC0              EQU  H'0000'
  00000001            00169 RC1              EQU  H'0001'
  00000002            00170 RC2              EQU  H'0002'
  00000003            00171 RC3              EQU  H'0003'
  00000004            00172 RC4              EQU  H'0004'
  00000005            00173 RC5              EQU  H'0005'
  00000006            00174 RC6              EQU  H'0006'
  00000007            00175 RC7              EQU  H'0007'
                      00176 
                      00177 
                      00178 ;----- PORTE Bits -----------------------------------------------------
  00000003            00179 RE3              EQU  H'0003'
                      00180 
                      00181 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00182 ;----- INTCON Bits -----------------------------------------------------
  00000000            00183 RBIF             EQU  H'0000'
  00000001            00184 INTF             EQU  H'0001'
  00000002            00185 T0IF             EQU  H'0002'
  00000003            00186 RBIE             EQU  H'0003'
  00000004            00187 INTE             EQU  H'0004'
  00000005            00188 T0IE             EQU  H'0005'
  00000006            00189 PEIE             EQU  H'0006'
  00000007            00190 GIE              EQU  H'0007'
                      00191 
  00000002            00192 TMR0IF           EQU  H'0002'
  00000005            00193 TMR0IE           EQU  H'0005'
                      00194 
                      00195 
                      00196 ;----- PIR1 Bits -----------------------------------------------------
  00000000            00197 TMR1IF           EQU  H'0000'
  00000001            00198 TMR2IF           EQU  H'0001'
  00000002            00199 CCP1IF           EQU  H'0002'
  00000003            00200 SSPIF            EQU  H'0003'
  00000004            00201 TXIF             EQU  H'0004'
  00000005            00202 RCIF             EQU  H'0005'
  00000006            00203 ADIF             EQU  H'0006'
                      00204 
                      00205 
                      00206 ;----- PIR2 Bits -----------------------------------------------------
  00000000            00207 CCP2IF           EQU  H'0000'
  00000002            00208 ULPWUIF          EQU  H'0002'
  00000003            00209 BCLIF            EQU  H'0003'
  00000004            00210 EEIF             EQU  H'0004'
  00000005            00211 C1IF             EQU  H'0005'
  00000006            00212 C2IF             EQU  H'0006'
  00000007            00213 OSFIF            EQU  H'0007'
                      00214 
                      00215 
                      00216 ;----- T1CON Bits -----------------------------------------------------
  00000000            00217 TMR1ON           EQU  H'0000'
  00000001            00218 TMR1CS           EQU  H'0001'
  00000002            00219 NOT_T1SYNC       EQU  H'0002'
  00000003            00220 T1OSCEN          EQU  H'0003'
  00000006            00221 TMR1GE           EQU  H'0006'
  00000007            00222 T1GINV           EQU  H'0007'
                      00223 
  00000002            00224 T1INSYNC         EQU  H'0002'
  00000004            00225 T1CKPS0          EQU  H'0004'
  00000005            00226 T1CKPS1          EQU  H'0005'
  00000007            00227 T1GIV            EQU  H'0007'
                      00228 
  00000002            00229 T1SYNC           EQU  H'0002'
                      00230 
                      00231 
                      00232 ;----- T2CON Bits -----------------------------------------------------
  00000002            00233 TMR2ON           EQU  H'0002'
                      00234 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000000            00235 T2CKPS0          EQU  H'0000'
  00000001            00236 T2CKPS1          EQU  H'0001'
  00000003            00237 TOUTPS0          EQU  H'0003'
  00000004            00238 TOUTPS1          EQU  H'0004'
  00000005            00239 TOUTPS2          EQU  H'0005'
  00000006            00240 TOUTPS3          EQU  H'0006'
                      00241 
                      00242 
                      00243 ;----- SSPCON Bits -----------------------------------------------------
  00000004            00244 CKP              EQU  H'0004'
  00000005            00245 SSPEN            EQU  H'0005'
  00000006            00246 SSPOV            EQU  H'0006'
  00000007            00247 WCOL             EQU  H'0007'
                      00248 
  00000000            00249 SSPM0            EQU  H'0000'
  00000001            00250 SSPM1            EQU  H'0001'
  00000002            00251 SSPM2            EQU  H'0002'
  00000003            00252 SSPM3            EQU  H'0003'
                      00253 
                      00254 
                      00255 ;----- CCP1CON Bits -----------------------------------------------------
  00000000            00256 CCP1M0           EQU  H'0000'
  00000001            00257 CCP1M1           EQU  H'0001'
  00000002            00258 CCP1M2           EQU  H'0002'
  00000003            00259 CCP1M3           EQU  H'0003'
  00000004            00260 DC1B0            EQU  H'0004'
  00000005            00261 DC1B1            EQU  H'0005'
  00000006            00262 P1M0             EQU  H'0006'
  00000007            00263 P1M1             EQU  H'0007'
                      00264 
  00000004            00265 CCP1Y            EQU  H'0004'
  00000005            00266 CCP1X            EQU  H'0005'
                      00267 
                      00268 
                      00269 ;----- RCSTA Bits -----------------------------------------------------
  00000000            00270 RX9D             EQU  H'0000'
  00000001            00271 OERR             EQU  H'0001'
  00000002            00272 FERR             EQU  H'0002'
  00000003            00273 ADDEN            EQU  H'0003'
  00000004            00274 CREN             EQU  H'0004'
  00000005            00275 SREN             EQU  H'0005'
  00000006            00276 RX9              EQU  H'0006'
  00000007            00277 SPEN             EQU  H'0007'
                      00278 
  00000000            00279 RCD8             EQU  H'0000'
  00000006            00280 RC9              EQU  H'0006'
                      00281 
  00000006            00282 NOT_RC8          EQU  H'0006'
                      00283 
  00000006            00284 RC8_9            EQU  H'0006'
                      00285 
                      00286 
                      00287 ;----- CCP2CON Bits -----------------------------------------------------
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            00288 DC2B0            EQU  H'0004'
  00000005            00289 DC2B1            EQU  H'0005'
                      00290 
  00000000            00291 CCP2M0           EQU  H'0000'
  00000001            00292 CCP2M1           EQU  H'0001'
  00000002            00293 CCP2M2           EQU  H'0002'
  00000003            00294 CCP2M3           EQU  H'0003'
  00000004            00295 CCP2Y            EQU  H'0004'
  00000005            00296 CCP2X            EQU  H'0005'
                      00297 
                      00298 
                      00299 ;----- ADCON0 Bits -----------------------------------------------------
  00000000            00300 ADON             EQU  H'0000'
  00000001            00301 GO_NOT_DONE      EQU  H'0001'
                      00302 
  00000001            00303 GO               EQU  H'0001'
  00000002            00304 CHS0             EQU  H'0002'
  00000003            00305 CHS1             EQU  H'0003'
  00000004            00306 CHS2             EQU  H'0004'
  00000005            00307 CHS3             EQU  H'0005'
  00000006            00308 ADCS0            EQU  H'0006'
  00000007            00309 ADCS1            EQU  H'0007'
                      00310 
  00000001            00311 NOT_DONE         EQU  H'0001'
                      00312 
  00000001            00313 GO_DONE          EQU  H'0001'
                      00314 
                      00315 
                      00316 ;----- OPTION_REG Bits -----------------------------------------------------
  00000003            00317 PSA              EQU  H'0003'
  00000004            00318 T0SE             EQU  H'0004'
  00000005            00319 T0CS             EQU  H'0005'
  00000006            00320 INTEDG           EQU  H'0006'
  00000007            00321 NOT_RBPU         EQU  H'0007'
                      00322 
  00000000            00323 PS0              EQU  H'0000'
  00000001            00324 PS1              EQU  H'0001'
  00000002            00325 PS2              EQU  H'0002'
                      00326 
                      00327 
                      00328 ;----- TRISA Bits -----------------------------------------------------
  00000000            00329 TRISA0           EQU  H'0000'
  00000001            00330 TRISA1           EQU  H'0001'
  00000002            00331 TRISA2           EQU  H'0002'
  00000003            00332 TRISA3           EQU  H'0003'
  00000004            00333 TRISA4           EQU  H'0004'
  00000005            00334 TRISA5           EQU  H'0005'
  00000006            00335 TRISA6           EQU  H'0006'
  00000007            00336 TRISA7           EQU  H'0007'
                      00337 
                      00338 
                      00339 ;----- TRISB Bits -----------------------------------------------------
  00000000            00340 TRISB0           EQU  H'0000'
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            00341 TRISB1           EQU  H'0001'
  00000002            00342 TRISB2           EQU  H'0002'
  00000003            00343 TRISB3           EQU  H'0003'
  00000004            00344 TRISB4           EQU  H'0004'
  00000005            00345 TRISB5           EQU  H'0005'
  00000006            00346 TRISB6           EQU  H'0006'
  00000007            00347 TRISB7           EQU  H'0007'
                      00348 
                      00349 
                      00350 ;----- TRISC Bits -----------------------------------------------------
  00000000            00351 TRISC0           EQU  H'0000'
  00000001            00352 TRISC1           EQU  H'0001'
  00000002            00353 TRISC2           EQU  H'0002'
  00000003            00354 TRISC3           EQU  H'0003'
  00000004            00355 TRISC4           EQU  H'0004'
  00000005            00356 TRISC5           EQU  H'0005'
  00000006            00357 TRISC6           EQU  H'0006'
  00000007            00358 TRISC7           EQU  H'0007'
                      00359 
                      00360 
                      00361 ;----- TRISE Bits -----------------------------------------------------
  00000003            00362 TRISE3           EQU  H'0003'
                      00363 
                      00364 
                      00365 ;----- PIE1 Bits -----------------------------------------------------
  00000000            00366 TMR1IE           EQU  H'0000'
  00000001            00367 TMR2IE           EQU  H'0001'
  00000002            00368 CCP1IE           EQU  H'0002'
  00000003            00369 SSPIE            EQU  H'0003'
  00000004            00370 TXIE             EQU  H'0004'
  00000005            00371 RCIE             EQU  H'0005'
  00000006            00372 ADIE             EQU  H'0006'
                      00373 
                      00374 
                      00375 ;----- PIE2 Bits -----------------------------------------------------
  00000000            00376 CCP2IE           EQU  H'0000'
  00000002            00377 ULPWUIE          EQU  H'0002'
  00000003            00378 BCLIE            EQU  H'0003'
  00000004            00379 EEIE             EQU  H'0004'
  00000005            00380 C1IE             EQU  H'0005'
  00000006            00381 C2IE             EQU  H'0006'
  00000007            00382 OSFIE            EQU  H'0007'
                      00383 
                      00384 
                      00385 ;----- PCON Bits -----------------------------------------------------
  00000000            00386 NOT_BOR          EQU  H'0000'
  00000001            00387 NOT_POR          EQU  H'0001'
  00000004            00388 SBOREN           EQU  H'0004'
  00000005            00389 ULPWUE           EQU  H'0005'
                      00390 
  00000000            00391 NOT_BO           EQU  H'0000'
                      00392 
                      00393 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00394 ;----- OSCCON Bits -----------------------------------------------------
  00000000            00395 SCS              EQU  H'0000'
  00000001            00396 LTS              EQU  H'0001'
  00000002            00397 HTS              EQU  H'0002'
  00000003            00398 OSTS             EQU  H'0003'
                      00399 
  00000004            00400 IRCF0            EQU  H'0004'
  00000005            00401 IRCF1            EQU  H'0005'
  00000006            00402 IRCF2            EQU  H'0006'
                      00403 
                      00404 
                      00405 ;----- OSCTUNE Bits -----------------------------------------------------
  00000000            00406 TUN0             EQU  H'0000'
  00000001            00407 TUN1             EQU  H'0001'
  00000002            00408 TUN2             EQU  H'0002'
  00000003            00409 TUN3             EQU  H'0003'
  00000004            00410 TUN4             EQU  H'0004'
                      00411 
                      00412 
                      00413 ;----- SSPCON2 Bits -----------------------------------------------------
  00000000            00414 SEN              EQU  H'0000'
  00000001            00415 RSEN             EQU  H'0001'
  00000002            00416 PEN              EQU  H'0002'
  00000003            00417 RCEN             EQU  H'0003'
  00000004            00418 ACKEN            EQU  H'0004'
  00000005            00419 ACKDT            EQU  H'0005'
  00000006            00420 ACKSTAT          EQU  H'0006'
  00000007            00421 GCEN             EQU  H'0007'
                      00422 
                      00423 
                      00424 ;----- MSK Bits -----------------------------------------------------
  00000000            00425 MSK0             EQU  H'0000'
  00000001            00426 MSK1             EQU  H'0001'
  00000002            00427 MSK2             EQU  H'0002'
  00000003            00428 MSK3             EQU  H'0003'
  00000004            00429 MSK4             EQU  H'0004'
  00000005            00430 MSK5             EQU  H'0005'
  00000006            00431 MSK6             EQU  H'0006'
  00000007            00432 MSK7             EQU  H'0007'
                      00433 
                      00434 
                      00435 ;----- SSPMSK Bits -----------------------------------------------------
  00000000            00436 MSK0             EQU  H'0000'
  00000001            00437 MSK1             EQU  H'0001'
  00000002            00438 MSK2             EQU  H'0002'
  00000003            00439 MSK3             EQU  H'0003'
  00000004            00440 MSK4             EQU  H'0004'
  00000005            00441 MSK5             EQU  H'0005'
  00000006            00442 MSK6             EQU  H'0006'
  00000007            00443 MSK7             EQU  H'0007'
                      00444 
                      00445 
                      00446 ;----- SSPSTAT Bits -----------------------------------------------------
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000000            00447 BF               EQU  H'0000'
  00000001            00448 UA               EQU  H'0001'
  00000002            00449 R_NOT_W          EQU  H'0002'
  00000003            00450 S                EQU  H'0003'
  00000004            00451 P                EQU  H'0004'
  00000005            00452 D_NOT_A          EQU  H'0005'
  00000006            00453 CKE              EQU  H'0006'
  00000007            00454 SMP              EQU  H'0007'
                      00455 
  00000002            00456 R                EQU  H'0002'
  00000005            00457 D                EQU  H'0005'
                      00458 
  00000002            00459 I2C_READ         EQU  H'0002'
  00000003            00460 I2C_START        EQU  H'0003'
  00000004            00461 I2C_STOP         EQU  H'0004'
  00000005            00462 I2C_DATA         EQU  H'0005'
                      00463 
  00000002            00464 NOT_W            EQU  H'0002'
  00000005            00465 NOT_A            EQU  H'0005'
                      00466 
  00000002            00467 NOT_WRITE        EQU  H'0002'
  00000005            00468 NOT_ADDRESS      EQU  H'0005'
                      00469 
  00000002            00470 R_W              EQU  H'0002'
  00000005            00471 D_A              EQU  H'0005'
                      00472 
  00000002            00473 READ_WRITE       EQU  H'0002'
  00000005            00474 DATA_ADDRESS     EQU  H'0005'
                      00475 
                      00476 
                      00477 ;----- WPUB Bits -----------------------------------------------------
  00000000            00478 WPUB0            EQU  H'0000'
  00000001            00479 WPUB1            EQU  H'0001'
  00000002            00480 WPUB2            EQU  H'0002'
  00000003            00481 WPUB3            EQU  H'0003'
  00000004            00482 WPUB4            EQU  H'0004'
  00000005            00483 WPUB5            EQU  H'0005'
  00000006            00484 WPUB6            EQU  H'0006'
  00000007            00485 WPUB7            EQU  H'0007'
                      00486 
                      00487 
                      00488 ;----- IOCB Bits -----------------------------------------------------
  00000000            00489 IOCB0            EQU  H'0000'
  00000001            00490 IOCB1            EQU  H'0001'
  00000002            00491 IOCB2            EQU  H'0002'
  00000003            00492 IOCB3            EQU  H'0003'
  00000004            00493 IOCB4            EQU  H'0004'
  00000005            00494 IOCB5            EQU  H'0005'
  00000006            00495 IOCB6            EQU  H'0006'
  00000007            00496 IOCB7            EQU  H'0007'
                      00497 
                      00498 
                      00499 ;----- VRCON Bits -----------------------------------------------------
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            00500 VRSS             EQU  H'0004'
  00000005            00501 VRR              EQU  H'0005'
  00000006            00502 VROE             EQU  H'0006'
  00000007            00503 VREN             EQU  H'0007'
                      00504 
  00000000            00505 VR0              EQU  H'0000'
  00000001            00506 VR1              EQU  H'0001'
  00000002            00507 VR2              EQU  H'0002'
  00000003            00508 VR3              EQU  H'0003'
                      00509 
                      00510 
                      00511 ;----- TXSTA Bits -----------------------------------------------------
  00000000            00512 TX9D             EQU  H'0000'
  00000001            00513 TRMT             EQU  H'0001'
  00000002            00514 BRGH             EQU  H'0002'
  00000003            00515 SENDB            EQU  H'0003'
  00000004            00516 SYNC             EQU  H'0004'
  00000005            00517 TXEN             EQU  H'0005'
  00000006            00518 TX9              EQU  H'0006'
  00000007            00519 CSRC             EQU  H'0007'
                      00520 
  00000000            00521 TXD8             EQU  H'0000'
  00000006            00522 NOT_TX8          EQU  H'0006'
                      00523 
  00000006            00524 TX8_9            EQU  H'0006'
                      00525 
                      00526 
                      00527 ;----- SPBRG Bits -----------------------------------------------------
  00000000            00528 BRG0             EQU  H'0000'
  00000001            00529 BRG1             EQU  H'0001'
  00000002            00530 BRG2             EQU  H'0002'
  00000003            00531 BRG3             EQU  H'0003'
  00000004            00532 BRG4             EQU  H'0004'
  00000005            00533 BRG5             EQU  H'0005'
  00000006            00534 BRG6             EQU  H'0006'
  00000007            00535 BRG7             EQU  H'0007'
                      00536 
                      00537 
                      00538 ;----- SPBRGH Bits -----------------------------------------------------
  00000000            00539 BRG8             EQU  H'0000'
  00000001            00540 BRG9             EQU  H'0001'
  00000002            00541 BRG10            EQU  H'0002'
  00000003            00542 BRG11            EQU  H'0003'
  00000004            00543 BRG12            EQU  H'0004'
  00000005            00544 BRG13            EQU  H'0005'
  00000006            00545 BRG14            EQU  H'0006'
  00000007            00546 BRG15            EQU  H'0007'
                      00547 
                      00548 
                      00549 ;----- PWM1CON Bits -----------------------------------------------------
  00000007            00550 PRSEN            EQU  H'0007'
                      00551 
  00000000            00552 PDC0             EQU  H'0000'
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            00553 PDC1             EQU  H'0001'
  00000002            00554 PDC2             EQU  H'0002'
  00000003            00555 PDC3             EQU  H'0003'
  00000004            00556 PDC4             EQU  H'0004'
  00000005            00557 PDC5             EQU  H'0005'
  00000006            00558 PDC6             EQU  H'0006'
                      00559 
                      00560 
                      00561 ;----- ECCPAS Bits -----------------------------------------------------
  00000007            00562 ECCPASE          EQU  H'0007'
                      00563 
  00000000            00564 PSSBD0           EQU  H'0000'
  00000001            00565 PSSBD1           EQU  H'0001'
  00000002            00566 PSSAC0           EQU  H'0002'
  00000003            00567 PSSAC1           EQU  H'0003'
  00000004            00568 ECCPAS0          EQU  H'0004'
  00000005            00569 ECCPAS1          EQU  H'0005'
  00000006            00570 ECCPAS2          EQU  H'0006'
                      00571 
                      00572 
                      00573 ;----- PSTRCON Bits -----------------------------------------------------
  00000000            00574 STRA             EQU  H'0000'
  00000001            00575 STRB             EQU  H'0001'
  00000002            00576 STRC             EQU  H'0002'
  00000003            00577 STRD             EQU  H'0003'
  00000004            00578 STRSYNC          EQU  H'0004'
                      00579 
                      00580 
                      00581 ;----- ADCON1 Bits -----------------------------------------------------
  00000004            00582 VCFG0            EQU  H'0004'
  00000005            00583 VCFG1            EQU  H'0005'
  00000007            00584 ADFM             EQU  H'0007'
                      00585 
                      00586 
                      00587 ;----- WDTCON Bits -----------------------------------------------------
  00000000            00588 SWDTEN           EQU  H'0000'
                      00589 
  00000001            00590 WDTPS0           EQU  H'0001'
  00000002            00591 WDTPS1           EQU  H'0002'
  00000003            00592 WDTPS2           EQU  H'0003'
  00000004            00593 WDTPS3           EQU  H'0004'
                      00594 
                      00595 
                      00596 ;----- CM1CON0 Bits -----------------------------------------------------
  00000002            00597 C1R              EQU  H'0002'
  00000004            00598 C1POL            EQU  H'0004'
  00000005            00599 C1OE             EQU  H'0005'
  00000006            00600 C1OUT            EQU  H'0006'
  00000007            00601 C1ON             EQU  H'0007'
                      00602 
  00000000            00603 C1CH0            EQU  H'0000'
  00000001            00604 C1CH1            EQU  H'0001'
                      00605 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00606 
                      00607 ;----- CM2CON0 Bits -----------------------------------------------------
  00000002            00608 C2R              EQU  H'0002'
  00000004            00609 C2POL            EQU  H'0004'
  00000005            00610 C2OE             EQU  H'0005'
  00000006            00611 C2OUT            EQU  H'0006'
  00000007            00612 C2ON             EQU  H'0007'
                      00613 
  00000000            00614 C2CH0            EQU  H'0000'
  00000001            00615 C2CH1            EQU  H'0001'
                      00616 
                      00617 
                      00618 ;----- CM2CON1 Bits -----------------------------------------------------
  00000000            00619 C2SYNC           EQU  H'0000'
  00000001            00620 T1GSS            EQU  H'0001'
  00000004            00621 C2RSEL           EQU  H'0004'
  00000005            00622 C1RSEL           EQU  H'0005'
  00000006            00623 MC2OUT           EQU  H'0006'
  00000007            00624 MC1OUT           EQU  H'0007'
                      00625 
                      00626 
                      00627 ;----- SRCON Bits -----------------------------------------------------
  00000000            00628 FVREN            EQU  H'0000'
  00000002            00629 PULSR            EQU  H'0002'
  00000003            00630 PULSS            EQU  H'0003'
  00000004            00631 C2REN            EQU  H'0004'
  00000005            00632 C1SEN            EQU  H'0005'
  00000006            00633 SR0              EQU  H'0006'
  00000007            00634 SR1              EQU  H'0007'
                      00635 
                      00636 
                      00637 ;----- BAUDCTL Bits -----------------------------------------------------
  00000000            00638 ABDEN            EQU  H'0000'
  00000001            00639 WUE              EQU  H'0001'
  00000003            00640 BRG16            EQU  H'0003'
  00000004            00641 SCKP             EQU  H'0004'
  00000006            00642 RCIDL            EQU  H'0006'
  00000007            00643 ABDOVF           EQU  H'0007'
                      00644 
                      00645 
                      00646 ;----- ANSEL Bits -----------------------------------------------------
  00000000            00647 ANS0             EQU  H'0000'
  00000001            00648 ANS1             EQU  H'0001'
  00000002            00649 ANS2             EQU  H'0002'
  00000003            00650 ANS3             EQU  H'0003'
  00000004            00651 ANS4             EQU  H'0004'
                      00652 
                      00653 
                      00654 ;----- ANSELH Bits -----------------------------------------------------
  00000000            00655 ANS8             EQU  H'0000'
  00000001            00656 ANS9             EQU  H'0001'
  00000002            00657 ANS10            EQU  H'0002'
  00000003            00658 ANS11            EQU  H'0003'
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            00659 ANS12            EQU  H'0004'
  00000005            00660 ANS13            EQU  H'0005'
                      00661 
                      00662 
                      00663 ;----- EECON1 Bits -----------------------------------------------------
  00000000            00664 RD               EQU  H'0000'
  00000001            00665 WR               EQU  H'0001'
  00000002            00666 WREN             EQU  H'0002'
  00000003            00667 WRERR            EQU  H'0003'
  00000007            00668 EEPGD            EQU  H'0007'
                      00669 
                      00670 
                      00671 
                      00672 
                      00673 ;==========================================================================
                      00674 ;
                      00675 ;       RAM Definitions
                      00676 ;
                      00677 ;==========================================================================
  000001FF            00678        __MAXRAM  H'01FF'
                      00679        __BADRAM  H'0008'
                      00680        __BADRAM  H'0088'
                      00681        __BADRAM  H'0110'-H'011F'
                      00682        __BADRAM  H'018E'-H'018F'
                      00683        __BADRAM  H'0190'-H'01EF'
                      00684 
                      00685 ;==========================================================================
                      00686 ;
                      00687 ;       Configuration Bits
                      00688 ;
                      00689 ;   NAME            Address
                      00690 ;   CONFIG1           2007h
                      00691 ;   CONFIG2           2008h
                      00692 ;
                      00693 ;==========================================================================
                      00694 
                      00695 ; The following is an assignment of address values for all of the
                      00696 ; configuration registers for the purpose of table reads
  00002007            00697 _CONFIG1         EQU  H'2007'
  00002008            00698 _CONFIG2         EQU  H'2008'
                      00699 
                      00700 ;----- CONFIG1 Options --------------------------------------------------
  00003FF8            00701 _FOSC_LP             EQU  H'3FF8'    ; LP oscillator: Low-power crystal on RA6/OSC2/CLKOUT and RA7/OSC1/
                            CLKIN
  00003FF8            00702 _LP_OSC              EQU  H'3FF8'    ; LP oscillator: Low-power crystal on RA6/OSC2/CLKOUT and RA7/OSC1/
                            CLKIN
  00003FF9            00703 _FOSC_XT             EQU  H'3FF9'    ; XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/
                            CLKIN
  00003FF9            00704 _XT_OSC              EQU  H'3FF9'    ; XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/
                            CLKIN
  00003FFA            00705 _FOSC_HS             EQU  H'3FFA'    ; HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT an
                            d RA7/OSC1/CLKIN
  00003FFA            00706 _HS_OSC              EQU  H'3FFA'    ; HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT an
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            d RA7/OSC1/CLKIN
  00003FFB            00707 _FOSC_EC             EQU  H'3FFB'    ; EC: I/O function on RA6/OSC2/CLKOUT pin, CLKIN on RA7/OSC1/CLKIN
  00003FFB            00708 _EC_OSC              EQU  H'3FFB'    ; EC: I/O function on RA6/OSC2/CLKOUT pin, CLKIN on RA7/OSC1/CLKIN
  00003FFC            00709 _FOSC_INTRC_NOCLKOUT EQU  H'3FFC'    ; INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O fun
                            ction on RA7/OSC1/CLKIN
  00003FFC            00710 _INTRC_OSC_NOCLKOUT  EQU  H'3FFC'    ; INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O fun
                            ction on RA7/OSC1/CLKIN
  00003FFC            00711 _INTOSCIO            EQU  H'3FFC'    ; INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O fun
                            ction on RA7/OSC1/CLKIN
  00003FFD            00712 _FOSC_INTRC_CLKOUT   EQU  H'3FFD'    ; INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
                            nction on RA7/OSC1/CLKIN
  00003FFD            00713 _INTRC_OSC_CLKOUT    EQU  H'3FFD'    ; INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
                            nction on RA7/OSC1/CLKIN
  00003FFD            00714 _INTOSC              EQU  H'3FFD'    ; INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
                            nction on RA7/OSC1/CLKIN
  00003FFE            00715 _FOSC_EXTRC_NOCLKOUT EQU  H'3FFE'    ; RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/O
                            SC1/CLKIN
  00003FFE            00716 _EXTRC_OSC_NOCLKOUT  EQU  H'3FFE'    ; RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/O
                            SC1/CLKIN
  00003FFE            00717 _EXTRCIO             EQU  H'3FFE'    ; RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/O
                            SC1/CLKIN
  00003FFF            00718 _FOSC_EXTRC_CLKOUT   EQU  H'3FFF'    ; RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
                            OSC1/CLKIN
  00003FFF            00719 _EXTRC_OSC_CLKOUT    EQU  H'3FFF'    ; RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
                            OSC1/CLKIN
  00003FFF            00720 _EXTRC               EQU  H'3FFF'    ; RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
                            OSC1/CLKIN
                      00721 
  00003FF7            00722 _WDTE_OFF            EQU  H'3FF7'    ; WDT disabled and can be enabled by SWDTEN bit of the WDTCON regis
                            ter
  00003FF7            00723 _WDT_OFF             EQU  H'3FF7'    ; WDT disabled and can be enabled by SWDTEN bit of the WDTCON regis
                            ter
  00003FFF            00724 _WDTE_ON             EQU  H'3FFF'    ; WDT enabled
  00003FFF            00725 _WDT_ON              EQU  H'3FFF'    ; WDT enabled
                      00726 
  00003FEF            00727 _PWRTE_ON            EQU  H'3FEF'    ; PWRT enabled
  00003FFF            00728 _PWRTE_OFF           EQU  H'3FFF'    ; PWRT disabled
                      00729 
  00003FDF            00730 _MCLRE_OFF           EQU  H'3FDF'    ; RE3/MCLR pin function is digital input, MCLR internally tied to V
                            DD
  00003FFF            00731 _MCLRE_ON            EQU  H'3FFF'    ; RE3/MCLR pin function is MCLR
                      00732 
  00003FBF            00733 _CP_ON               EQU  H'3FBF'    ; Program memory code protection is enabled
  00003FFF            00734 _CP_OFF              EQU  H'3FFF'    ; Program memory code protection is disabled
                      00735 
  00003F7F            00736 _CPD_ON              EQU  H'3F7F'    ; Data memory code protection is enabled
  00003FFF            00737 _CPD_OFF             EQU  H'3FFF'    ; Data memory code protection is disabled
                      00738 
  00003CFF            00739 _BOREN_OFF           EQU  H'3CFF'    ; BOR disabled
  00003CFF            00740 _BOR_OFF             EQU  H'3CFF'    ; BOR disabled
  00003DFF            00741 _BOREN_SBODEN        EQU  H'3DFF'    ; BOR controlled by SBOREN bit of the PCON register
  00003DFF            00742 _BOR_SBODEN          EQU  H'3DFF'    ; BOR controlled by SBOREN bit of the PCON register
  00003EFF            00743 _BOREN_NSLEEP        EQU  H'3EFF'    ; BOR enabled during operation and disabled in Sleep
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00003EFF            00744 _BOR_NSLEEP          EQU  H'3EFF'    ; BOR enabled during operation and disabled in Sleep
  00003FFF            00745 _BOREN_ON            EQU  H'3FFF'    ; BOR enabled
  00003FFF            00746 _BOR_ON              EQU  H'3FFF'    ; BOR enabled
                      00747 
  00003BFF            00748 _IESO_OFF            EQU  H'3BFF'    ; Internal/External Switchover mode is disabled
  00003FFF            00749 _IESO_ON             EQU  H'3FFF'    ; Internal/External Switchover mode is enabled
                      00750 
  000037FF            00751 _FCMEN_OFF           EQU  H'37FF'    ; Fail-Safe Clock Monitor is disabled
  00003FFF            00752 _FCMEN_ON            EQU  H'3FFF'    ; Fail-Safe Clock Monitor is enabled
                      00753 
  00002FFF            00754 _LVP_OFF             EQU  H'2FFF'    ; RB3 pin has digital I/O, HV on MCLR must be used for programming
  00003FFF            00755 _LVP_ON              EQU  H'3FFF'    ; RB3/PGM pin has PGM function, low voltage programming enabled
                      00756 
  00001FFF            00757 _DEBUG_ON            EQU  H'1FFF'    ; In_Circuit Debugger enabled, RB6/ICSPCLK and RB7/ICSPDAT are dedi
                            cated to the debugger
  00003FFF            00758 _DEBUG_OFF           EQU  H'3FFF'    ; In-Circuit Debugger disabled, RB6/ICSPCLK and RB7/ICSPDAT are gen
                            eral purpose I/O pins
                      00759 
                      00760 ;----- CONFIG2 Options --------------------------------------------------
  00003EFF            00761 _BOR4V_BOR21V        EQU  H'3EFF'    ; Brown-out Reset set to 2.1V
  00003EFF            00762 _BOR21V              EQU  H'3EFF'    ; Brown-out Reset set to 2.1V
  00003FFF            00763 _BOR4V_BOR40V        EQU  H'3FFF'    ; Brown-out Reset set to 4.0V
  00003FFF            00764 _BOR40V              EQU  H'3FFF'    ; Brown-out Reset set to 4.0V
                      00765 
  000039FF            00766 _WRT_HALF            EQU  H'39FF'    ; 0000h to 07FFh write protected, 0800h to 0FFFh may be modified by
                             EECON control
  00003BFF            00767 _WRT_1FOURTH         EQU  H'3BFF'    ; 0000h to 03FFh write protected, 0400h to 0FFFh may be modified by
                             EECON control
  00003DFF            00768 _WRT_256             EQU  H'3DFF'    ; 0000h to 00FFh write protected, 0100h to 0FFFh may be modified by
                             EECON control
  00003FFF            00769 _WRT_OFF             EQU  H'3FFF'    ; Write protection off
                      00770 
                      00771 ;----- DEVID Equates --------------------------------------------------
  00002006            00772 _DEVID1          EQU  H'2006'
                      00773 
                      00774 ;----- IDLOC Equates --------------------------------------------------
  00002000            00775 _IDLOC0          EQU  H'2000'
  00002001            00776 _IDLOC1          EQU  H'2001'
  00002002            00777 _IDLOC2          EQU  H'2002'
  00002003            00778 _IDLOC3          EQU  H'2003'
                      00779 
                      00780         LIST
2007   33E4           00032    __config (_INTRC_OSC_NOCLKOUT & _WDT_OFF & _PWRTE_ON & _BOREN_ON & _MCLRE_ON & _CP_OFF & _IESO_OFF & 
                            _FCMEN_OFF & _DEBUG_OFF)
                      00033 
                      00034 ; Constants
  00000023            00035 OSC_LOTHRESHOLD equ     .35     ; Error if the ampl. A_VH is lower than this.
  000000F0            00036 OSC_HITHRESHOLD equ     .240    ; Error if the ampl. A_VH is higher than this.
  00000002            00037 CURR_THRESHOLD  equ     .2      ; Threshold for high byte of A-B (current)
                      00038 
                      00039 ; Control lines of the display device
                      00040 ; Control port used for LCD display
                      00041 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000006            00042 DATALCD         equ     PORTB
  00000086            00043 TRISLCD         equ     TRISB
                      00044 
  00000002            00045 E               equ     2
  00000000            00046 RS              equ     0
  00000001            00047 RW              equ     1
                      00048 
  00000007            00049 DATA4           equ     7
  00000006            00050 DATA5           equ     6
  00000005            00051 DATA6           equ     5
  00000004            00052 DATA7           equ     4
                      00053 
  00000007            00054 PORTFSYNC       equ     PORTC
  00000087            00055 TRISFSYNC       equ     TRISC
  00000004            00056 FSYNC           equ     RC4
  00000007            00057 VSYNC           equ     RC7
                      00058 
                      00059 ; These registers must be in the same page of the DATALCD register
  00000020            00060 TMP             equ     0x20        ; Dummy for LCD nibble mode
  00000021            00061 CNT             equ     0x21        ; Counter
  00000022            00062 SDR             equ     0x22        ; Short Delay Register
  00000023            00063 LDR             equ     0x23        ; Long Delay Register
  00000024            00064 TMP1            equ     0x24        ; Dummy for reversing bit order
  00000025            00065 UNIT            equ     0x25        ; Multiplier for measuring unit for caps.
  00000026            00066 ESRM            equ     0x26        ; Flag: measure ESR or not.
  00000000            00067 MEASUREESR      equ     0x00        ; Constants for ESRM
  00000001            00068 NOESR           equ     0x01
  00000027            00069 WRITEF          equ     0x27        ; Write the frequency when calling SetFreq
  00000001            00070 ACTIVE          equ     0x01
  00000000            00071 NOACTIVE        equ     0x00
                      00072 
  00000000            00073 MEAS_OK         equ     0x00
  00000001            00074 ERR_OSCLO       equ     0x01
  00000002            00075 ERR_OSCHI       equ     0x02
  00000003            00076 ERR_LOWCURR     equ     0x03
                      00077 
  00000028            00078 CURW            equ     0x28        ; Used in the automatic measurement of C.
  00000029            00079 OLDW            equ     0x29        ; Same as before.
  0000002A            00080 TMP_1           equ     0x2A
  0000002B            00081 HND             equ     0x2B
  0000002C            00082 DEC             equ     0x2C
  0000002D            00083 UNT             equ     0x2D
                      00084 
                      00085 ; Used to send 16 bit data via SPI, combined with the w register.
  0000002E            00086 SENDL           equ     0x2E
  0000002F            00087 SHOWNC          equ     0x2F            ; Different from zero if a C is shown
                      00088 
                      00089 ; Used for the div_32_16 operator: the two operands, the result and the
                      00090 ; remainder
  00000030            00091 divid0          equ     0x30            ; Most significant byte
  00000031            00092 divid1          equ     0x31
  00000032            00093 divid2          equ     0x32
  00000033            00094 divid3          equ     0x33            ; Least significant byte
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000034            00095 divisH          equ     0x34
  00000035            00096 divisL          equ     0x35
  00000036            00097 remdrH          equ     0x36
  00000037            00098 remdrL          equ     0x37
  00000038            00099 ESRW            equ     0x38
  00000039            00100 LOOPCOUNT       equ     0x39
  0000003A            00101 ALTESRLL        equ     0x3A            ; Alternate measurement of ESR
  0000003B            00102 ALTESRLH        equ     0x3B            ; used to understand if the DUT
  0000003C            00103 ALTESRHL        equ     0x3C            ; is a resistance.
  0000003D            00104 ALTESRHH        equ     0x3D
                      00105 
  0000003E            00106 SOUNDOFF        equ     0x3E            ; =0 sound on =1 sound off
                      00107 
                      00108 ; aHH:aHL:aLH:aLL*bH:bL -> a6:a5:aHH:aHL:aLH:aLL
                      00109 
  00000040            00110 aLL             equ     0x40
  00000041            00111 aLH             equ     0x41
  00000042            00112 aHL             equ     0x42
  00000043            00113 aHH             equ     0x43
  00000044            00114 a5              equ     0x44
  00000045            00115 a6              equ     0x45
                      00116 
  00000046            00117 bL              equ     0x46
  00000047            00118 bH              equ     0x47
                      00119 
  00000048            00120 c1              equ     0x48
  00000049            00121 c2              equ     0x49
  0000004A            00122 c3              equ     0x4A
  0000004B            00123 c4              equ     0x4B
                      00124 
  0000004C            00125 bitcnt          equ     0x4C
                      00126 
  0000004D            00127 USR             equ     0x4D
  0000004E            00128 MENUSTATE       equ     0x4E
                      00129 
                      00130 
  00000050            00131 bcd             equ     0x50
                      00132 ; memory used up to bcd+4 included
  00000055            00133 cnt             equ     0x55
  00000056            00134 ii              equ     0x56
  00000057            00135 bin             equ     0x57
                      00136 ; memory used up to bin+3 included
                      00137 
                      00138 ; Error constants for the CalcCap routine
  00000001            00139 FREQLO          equ     0x01
  00000002            00140 FREQHI          equ     0x02
  00000000            00141 CAP_OK          equ     0x00
                      00142 
  0000005B            00143 CAPHH           equ     0x5B    ; The current value of the capacity.
  0000005C            00144 CAPHL           equ     0x5C
  0000005D            00145 CAPLH           equ     0x5D
  0000005E            00146 CAPLL           equ     0x5E
                      00147 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000005F            00148 FLAG            equ     0x5F
                      00149 
  00000000            00150 indf            equ     0
  00000004            00151 fsr             equ     4
                      00152 
  00000060            00153 NOZ             equ     0x60
                      00154 
                      00155 
  00000065            00156 DIVH            equ     0x65
  0000006F            00157 DIVL            equ     0x6F
                      00158 
  00000066            00159 REGBLL          equ     0x66
  00000067            00160 REGBLH          equ     0x67
  00000068            00161 REGBHL          equ     0x68
  00000069            00162 REGBHH          equ     0x69
  0000006A            00163 REGCLL          equ     0x6A
  0000006B            00164 REGCLH          equ     0x6B
  0000006C            00165 REGCHL          equ     0x6C
  0000006D            00166 REGCHH          equ     0x6D
  0000006E            00167 MCOUNT          equ     0x6E
                      00168 
                      00169 ; Configuration for the measurement control
  00000007            00170 CTRLP           equ     PORTC
  00000087            00171 TRISCTRL        equ     TRISC
  00000002            00172 PWMPIN          equ     RC2
                      00173 
                      00174 ; The value of the ESR is calculated as
                      00175 ; 10*(V_B-V_C)/(V_A-V_B)
  00000006            00176 CTRLA           equ     RC6
  00000000            00177 CTRLB           equ     RC0
  00000001            00178 CTRLC           equ     RC1
                      00179 
  00000070            00180 A_VH            equ     0x70
  00000071            00181 A_VL            equ     0x71
                      00182 
  00000072            00183 B_VH            equ     0x72
  00000073            00184 B_VL            equ     0x73
                      00185 
  00000074            00186 C_VH            equ     0x74
  00000075            00187 C_VL            equ     0x75
                      00188 
                      00189 ; The result of each ADC conversion (temporary)
  00000076            00190 STOREH          equ     0x76
  00000077            00191 STOREL          equ     0x77
                      00192 
                      00193 ; The two 14-bit words that define the frequency on the AD9833
  00000078            00194 MSBH            equ     0x78
  00000079            00195 MSBL            equ     0x79
  0000007A            00196 LSBH            equ     0x7A
  0000007B            00197 LSBL            equ     0x7B
                      00198 
                      00199 ; The index in the frequency table
  0000007C            00200 FREQ            equ     0x7C
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000B            00201 FMAX            equ     .11     ; FREQ can range from 0 to FMAX (both included)
                      00202 
                      00203 ; The index in the DC value
  0000007D            00204 DCVAL           equ     0x7D
                      00205 
                      00206 ; User interface (CHVAL!=0 means that the knob has moved)
  0000007E            00207 BSENSE          equ     0x7E
  0000007F            00208 CHVAL           equ     0x7F
                      00209 
                      00210 ; *****************************************************************************
                      00211 ;               MACROS
                      00212 ; *****************************************************************************
                      00213                 ; Read a value from the ADC and store it in STH and STL.
                      00214 READV           MACRO       CTRL, STH,STL
                      00215                 call        sync
                      00216                 bcf         CTRLP, CTRLA
                      00217                 bcf         CTRLP, CTRLB
                      00218                 bcf         CTRLP, CTRLC
                      00219                 bsf         CTRLP,CTRL
                      00220                 call        syncread
                      00221                 movfw       STOREH
                      00222                 movwf       STH
                      00223                 movfw       STOREL
                      00224                 movwf       STL
                      00225                 ENDM
                      00226 
                      00227 WRITE2DIGITS    MACRO       BB
                      00228                 swapf       BB,w
                      00229                 call        Write4
                      00230                 movfw       BB
                      00231                 call        Write4
                      00232                 ENDM
                      00233 
                      00234                 ; Write a message on the LCD display
                      00235                 ; This version is known not to work properly if the message
                      00236                 ; crosses a page.
                      00237                 ; This macro should not be called from an address >= 0x800
                      00238 WRITELN         MACRO       msg
                      00239                 local       loop_ch
                      00240                 local       end_mes
                      00241                 clrf        CNT
0000                  00242 loop_ch
                      00243                 movlw       HIGH msg
                      00244                 movwf       PCLATH
                      00245                 movlw       LOW msg
                      00246                 addwf       CNT,w
                      00247                 movlw       HIGH msg
                      00248                 call        checkc
                      00249                 call        msg
                      00250                 xorlw       0x00
                      00251                 btfsc       STATUS,Z        ; Test if the character is a zero
                      00252                 goto        end_mes
                      00253                 call        senddata
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00254                 incf        CNT, f
                      00255                 goto        loop_ch
0000                  00256 end_mes
                      00257                 ENDM
                      00258 
                      00259                 ; DEST = DEST + SOURCE
                      00260                 ; Apply the bank select macro to SOURCEL and SOURCEH
                      00261 ADD16BIT        MACRO       DESTH, DESTL, SOURCEH, SOURCEL
                      00262                 BANKSEL     SOURCEL
                      00263                 movfw       SOURCEL
                      00264                 addwf       DESTL,f
                      00265                 BANKSEL     SOURCEH
                      00266                 movfw       SOURCEH
                      00267                 btfsc       STATUS,C
                      00268                 incfsz      SOURCEH,w
                      00269                 addwf       DESTH,f
                      00270                 ENDM
                      00271 
                      00272                 ; DEST = DEST - SOURCE
                      00273 SUB16BIT        MACRO       DESTH, DESTL, SOURCEH, SOURCEL
                      00274                 movfw       SOURCEL
                      00275                 subwf       DESTL,f
                      00276                 movfw       SOURCEH
                      00277                 btfss       STATUS,C
                      00278                 incfsz      SOURCEH,w      ; Adjust borrow if C=1
                      00279                 subwf       DESTH,f
                      00280                 ENDM
                      00281 
                      00282                 ; DEST = DEST - SOURCE
                      00283 SUB32BIT        MACRO       DESTHH, DESTHL, DESTLH, DESTLL, SOURCEHH, SOURCEHL, SOURCELH, SOURCELL
                      00284                 movfw       SOURCELL
                      00285                 subwf       DESTLL,f
                      00286                 movfw       SOURCELH
                      00287                 btfss       STATUS,C
                      00288                 incfsz      SOURCELH,w      ; Adjust borrow if C=1
                      00289                 subwf       DESTLH,f
                      00290                 movfw       SOURCEHL
                      00291                 btfss       STATUS,C
                      00292                 incfsz      SOURCEHL,w      ; Adjust borrow if C=1
                      00293                 subwf       DESTHL,f
                      00294                 movfw       SOURCEHH
                      00295                 btfss       STATUS,C
                      00296                 incfsz      SOURCEHH,w      ; Adjust borrow if C=1
                      00297                 subwf       DESTHH,f
                      00298                 ENDM
                      00299 
                      00300 ; Invert a two's complement number
                      00301 ; source http://www.piclist.com/techref/microchip/math/neg/32bit.htm
                      00302 INV32BIT        MACRO   VHH, VHL, VLH, VLL
                      00303                 comf    VLL,f           ;Complement all bytes
                      00304                 comf    VLH,f
                      00305                 comf    VHL,f
                      00306                 comf    VHH,f
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00307                 incf    VLL,f           ;Inc. low byte always
                      00308                 skpnz                   ;Skip if no carry to higher bytes
                      00309                 incf    VLH,f           ;Carry to next byte
                      00310                 skpnz
                      00311                 incf    VHL,f
                      00312                 skpnz
                      00313                 incf    VHH,f
                      00314                 ENDM
                      00315 
                      00316 ; DEST = DEST + SOURCE
                      00317 ; DEST3 is the LSB
                      00318 ADD32BIT        MACRO       DEST0, DEST1, DEST2, DEST3, SOURCE0, SOURCE1, SOURCE2, SOURCE3
                      00319                 movfw       SOURCE3
                      00320                 addwf       DEST3,f
                      00321                 movfw       SOURCE2
                      00322                 btfsc       STATUS,C
                      00323                 incfsz      SOURCE2,w
                      00324                 addwf       DEST2,f
                      00325                 movfw       SOURCE1
                      00326                 btfsc       STATUS,C
                      00327                 incfsz      SOURCE1,w
                      00328                 addwf       DEST1,f
                      00329                 movfw       SOURCE0
                      00330                 btfsc       STATUS,C
                      00331                 incfsz      SOURCE0,w
                      00332                 addwf       DEST0,f
                      00333                 ENDM
                      00334 
                      00335                 ; Divide by two
                      00336                 ; DEST /=2
                      00337                 ; DEST3 is the MSB
                      00338 DIV2O32BIT      MACRO       DESTHH, DESTHL, DESTLH, DESTLL
                      00339                 bcf         STATUS,C
                      00340                 rrf         DESTHH,f
                      00341                 rrf         DESTHL,f
                      00342                 rrf         DESTLH,f
                      00343                 rrf         DESTLL,f
                      00344                 ENDM
                      00345 
                      00346                 ; DEST = SOURCE
                      00347 MOV16FF         MACRO       DESTH, DESTL, SOURCEH, SOURCEL
                      00348                 movfw       SOURCEH
                      00349                 movwf       DESTH
                      00350                 movfw       SOURCEL
                      00351                 movwf       DESTL
                      00352                 ENDM
                      00353 
                      00354                 ; Program the correct frequency and configure the AD9833
                      00355 PROGFREQ        MACRO       LSB, MSB, message, DIVHA, DIVLA, UNI
                      00356                 local       exit
                      00357                 movlw       (LSB & 0xFF00)>>8
                      00358                 movwf       LSBH
                      00359                 movlw       (LSB & 0x00FF)
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00360                 movwf       LSBL
                      00361                 movlw       (MSB & 0xFF00)>>8
                      00362                 movwf       MSBH
                      00363                 movlw       (MSB & 0x00FF)
                      00364                 movwf       MSBL
                      00365                 movlw       DIVHA
                      00366                 movwf       DIVH
                      00367                 movlw       DIVLA
                      00368                 movwf       DIVL
                      00369                 lcall       ConfigureAD9833
                      00370                 movlw       UNI
                      00371                 movwf       UNIT
                      00372                 movfw       WRITEF      ; Check if to write frequency
                      00373                 skpnz
                      00374                 goto        exit
                      00375                 WRITELN     message
0000                  00376 exit
                      00377                 ENDM
                      00378 
                      00379 ; *****************************************************************************
                      00380 ;               Constants for capacitance calculation
                      00381 ; *****************************************************************************
                      00382 
  0000083C            00383 DIVC0  = .2108                  ; 20 Hz, Results in mF
  00001EE2            00384 DIVC1  = .7906                  ; 75 Hz
  0000525B            00385 DIVC2  = .21083                 ; 200 Hz
  00000035            00386 DIVC3  = .53                    ; 500 Hz, Results in µF (2% of error here)
  00000069            00387 DIVC4  = .105                   ; 1 kHz, 1% of error here
  000000D3            00388 DIVC5  = .211                   ; 2 kHz
  0000020F            00389 DIVC6  = .527                   ; 5 kHz
  0000041E            00390 DIVC7  = .1054                  ; 10 kHz
  0000083C            00391 DIVC8  = .2108                  ; 20 kHz
  000016A6            00392 DIVC9  = .5271  * .110 / .100   ; 50 kHz        I would much prefer avoiding
  000039A5            00393 DIVC10 = .10541 * .140 / .100   ; 100 kHz       calibration coefficients here,
  0000943D            00394 DIVC11 = .21083 * .18  / .10    ; 200 kHz       but I couldn't...
                      00395 
  00000014            00396 FREQUENCY = .20
  000000D6            00397 VALUE = .10736*FREQUENCY/.1000
  00004000            00398 MSB0 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000040D6            00399 LSB0 = (VALUE & 0x3FFF) | 0x4000
  00000008            00400 DIVH0 = (DIVC0 & 0xFF00) >> .8
  0000003C            00401 DIVL0 = DIVC0 & 0x00FF
  0000006D            00402 UNIT0 = 'm'
                      00403 
  0000004B            00404 FREQUENCY = .75
  00000325            00405 VALUE = .10736*FREQUENCY/.1000
  00004000            00406 MSB1 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  00004325            00407 LSB1 = (VALUE & 0x3FFF) | 0x4000
  0000001E            00408 DIVH1 = (DIVC1 & 0xFF00) >> .8
  000000E2            00409 DIVL1 = DIVC1 & 0x00FF
  0000006D            00410 UNIT1 = 'm'
                      00411 
  000000C8            00412 FREQUENCY = .200
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000863            00413 VALUE = .10736*FREQUENCY/.1000
  00004000            00414 MSB2 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  00004863            00415 LSB2 = (VALUE & 0x3FFF) | 0x4000
  00000052            00416 DIVH2 = (DIVC2 & 0xFF00) >> .8
  0000005B            00417 DIVL2 = DIVC2 & 0x00FF
  000000E4            00418 UNIT2 = 0xE4                                    ; IT SHOULD BE 'm' HERE!!!
                      00419                                                 ; but I checked and it does
  000001F4            00420 FREQUENCY = .500                                ; not work (4.7µF)
  000014F8            00421 VALUE = .10736*FREQUENCY/.1000
  00004000            00422 MSB3 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000054F8            00423 LSB3 = (VALUE & 0x3FFF) | 0x4000
  00000000            00424 DIVH3 = (DIVC3 & 0xFF00) >> .8
  00000035            00425 DIVL3 = DIVC3 & 0x00FF
  000000E4            00426 UNIT3 = 0xE4            ; µ
                      00427 
  000003E8            00428 FREQUENCY = .1000
  000029F0            00429 VALUE = .10736*FREQUENCY/.1000
  00004000            00430 MSB4 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000069F0            00431 LSB4 = (VALUE & 0x3FFF) | 0x4000
  00000000            00432 DIVH4 = (DIVC4 & 0xFF00) >> .8
  00000069            00433 DIVL4 = DIVC4 & 0x00FF
  000000E4            00434 UNIT4 = 0xE4            ; µ
                      00435 
  000007D0            00436 FREQUENCY = .2000
  000053E0            00437 VALUE = .10736*FREQUENCY/.1000
  00004001            00438 MSB5 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000053E0            00439 LSB5 = (VALUE & 0x3FFF) | 0x4000
  00000000            00440 DIVH5 = (DIVC5 & 0xFF00) >> .8
  000000D3            00441 DIVL5 = DIVC5 & 0x00FF
  000000E4            00442 UNIT5 = 0xE4            ; µ
                      00443 
  00001388            00444 FREQUENCY = .5000
  0000D1B0            00445 VALUE = .10736*FREQUENCY/.1000
  00004003            00446 MSB6 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000051B0            00447 LSB6 = (VALUE & 0x3FFF) | 0x4000
  00000002            00448 DIVH6 = (DIVC6 & 0xFF00) >> .8
  0000000F            00449 DIVL6 = DIVC6 & 0x00FF
  000000E4            00450 UNIT6 = 0xE4            ; µ
                      00451 
  00002710            00452 FREQUENCY = .10000
  0001A360            00453 VALUE = .10736*FREQUENCY/.1000
  00004006            00454 MSB7 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  00006360            00455 LSB7 = (VALUE & 0x3FFF) | 0x4000
  00000004            00456 DIVH7 = (DIVC7 & 0xFF00) >> .8
  0000001E            00457 DIVL7 = DIVC7 & 0x00FF
  000000E4            00458 UNIT7 = 0xE4            ; µ
                      00459 
  00004E20            00460 FREQUENCY = .20000
  000346C0            00461 VALUE = .10736*FREQUENCY/.1000
  0000400D            00462 MSB8 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000046C0            00463 LSB8 = (VALUE & 0x3FFF) | 0x4000
  00000008            00464 DIVH8 = (DIVC8 & 0xFF00) >> .8
  0000003C            00465 DIVL8 = DIVC8 & 0x00FF
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000E4            00466 UNIT8 = 0xE4            ; µ
                      00467 
                      00468 
  0000C350            00469 FREQUENCY = .50000
  000830E0            00470 VALUE = .10736*FREQUENCY/.1000
  00004020            00471 MSB9 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000070E0            00472 LSB9 = (VALUE & 0x3FFF) | 0x4000
  00000016            00473 DIVH9 = (DIVC9 & 0xFF00) >> .8
  000000A6            00474 DIVL9 = DIVC9 & 0x00FF
  000000E4            00475 UNIT9 = 0xE4            ; µ
                      00476 
  000186A0            00477 FREQUENCY = .100000
  001061C0            00478 VALUE = .10736*FREQUENCY/.1000
  00004041            00479 MSB10 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  000061C0            00480 LSB10 = (VALUE & 0x3FFF) | 0x4000
  00000039            00481 DIVH10 = (DIVC10 & 0xFF00) >> .8
  000000A5            00482 DIVL10 = DIVC10 & 0x00FF
  000000E4            00483 UNIT10 = 0xE4           ; µ
                      00484 
                      00485 
  00030D40            00486 FREQUENCY = .200000
  0020C380            00487 VALUE = .10736*FREQUENCY/.1000
  00004083            00488 MSB11 = ((VALUE & 0xFFFC000) >> .14) | 0x4000
  00004380            00489 LSB11 = (VALUE & 0x3FFF) | 0x4000
  00000094            00490 DIVH11 = (DIVC11 & 0xFF00) >> .8
  0000003D            00491 DIVL11 = DIVC11 & 0x00FF
  000000E4            00492 UNIT11 = 0xE4           ; µ
                      00493 
                      00494 
                      00495 ; *****************************************************************************
                      00496 ;               Interrupt vectors
                      00497 ; *****************************************************************************
0000                  00498                 org         0000
0000   2A46           00499                 goto        prg
0001   0000           00500                 nop
0002   0000           00501                 nop
0003   0000           00502                 nop
0004                  00503                 org         0004
0004   2A46           00504                 goto        prg
                      00505 ; *****************************************************************************
                      00506 ;               Text tables (page 0)
                      00507 ; *****************************************************************************
0005   0782           00508 text_welcome    addwf   PCL,f
0006   3457 3465 346C 00509                 DT      "Welcome ESR  1.0",0
       3463 346F 346D 
       3465 3420 3445 
       3453 3452 3420 
       3420 3431 342E 
       3430 3400      
0017   0782           00510 text_davide     addwf   PCL,f
0018   3444 342E 3420 00511                 DT      "D. Bucci 2022",0
       3442 3475 3463 
       3463 3469 3420 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3432 3430 3432 
       3432 3400      
0026   0782           00512 text_short      addwf   PCL,f
0027   3444 3443 3420 00513                 DT      "DC short...",0
       3473 3468 346F 
       3472 3474 342E 
       342E 342E 3400 
0033   0782           00514 text_hiosc      addwf   PCL,f
0034   344F 3473 3463 00515                 DT      "Osc. high.",0
       342E 3420 3468 
       3469 3467 3468 
       342E 3400      
003F   0782           00516 text_reshi      addwf   PCL,f
0040   3452 3465 3473 00517                 DT      "Res. high.",0
       342E 3420 3468 
       3469 3467 3468 
       342E 3400      
004B   0782           00518 text_esr        addwf   PCL,f
004C   3445 3453 3452 00519                 DT      "ESR = ",0
       3420 343D 3420 
       3400           
0053   0782           00520 freq0           addwf   PCL,f
0054   3466 3420 343D 00521                 DT      "f = 20 Hz",0
       3420 3432 3430 
       3420 3448 347A 
       3400           
005E   0782           00522 freq1           addwf   PCL,f
005F   3466 3420 343D 00523                 DT      "f = 75 Hz",0
       3420 3437 3435 
       3420 3448 347A 
       3400           
0069   0782           00524 freq2           addwf   PCL,f
006A   3466 3420 343D 00525                 DT      "f = 200 Hz",0
       3420 3432 3430 
       3430 3420 3448 
       347A 3400      
0075   0782           00526 freq3           addwf   PCL,f
0076   3466 3420 343D 00527                 DT      "f = 500 Hz",0
       3420 3435 3430 
       3430 3420 3448 
       347A 3400      
0081   0782           00528 freq4           addwf   PCL,f
0082   3466 3420 343D 00529                 DT      "f = 1 kHz",0
       3420 3431 3420 
       346B 3448 347A 
       3400           
008C   0782           00530 freq5           addwf   PCL,f
008D   3466 3420 343D 00531                 DT      "f = 2 kHz",0
       3420 3432 3420 
       346B 3448 347A 
       3400           
0097   0782           00532 freq6           addwf   PCL,f
0098   3466 3420 343D 00533                 DT      "f = 5 kHz",0
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3420 3435 3420 
       346B 3448 347A 
       3400           
00A2   0782           00534 freq7           addwf   PCL,f
00A3   3466 3420 343D 00535                 DT      "f = 10 kHz",0
       3420 3431 3430 
       3420 346B 3448 
       347A 3400      
00AE   0782           00536 freq8           addwf   PCL,f
00AF   3466 3420 343D 00537                 DT      "f = 20 kHz",0
       3420 3432 3430 
       3420 346B 3448 
       347A 3400      
00BA   0782           00538 freq9           addwf   PCL,f
00BB   3466 3420 343D 00539                 DT      "f = 50 kHz",0
       3420 3435 3430 
       3420 346B 3448 
       347A 3400      
00C6   0782           00540 freq10          addwf   PCL,f
00C7   3466 3420 343D 00541                 DT      "f = 100 kHz",0
       3420 3431 3430 
       3430 3420 346B 
       3448 347A 3400 
00D3   0782           00542 freq11          addwf   PCL,f
00D4   3466 3420 343D 00543                 DT      "f = 200 kHz",0
       3420 3432 3430 
       3430 3420 346B 
       3448 347A 3400 
00E0   0782           00544 automatic       addwf   PCL,f
00E1   3441 3475 3474 00545                 DT      "Automatic C, ESR",0
       346F 346D 3461 
       3474 3469 3463 
       3420 3443 342C 
       3420 3445 3453 
       3452 3400      
                      00546 
00F2   0782           00547 manual          addwf   PCL,f
00F3   3445 3453 3452 00548                 DT      "ESR vs freq.",0
       3420 3476 3473 
       3420 3466 3472 
       3465 3471 342E 
       3400           
                      00549 
                      00550 ; *****************************************************************************
0100                  00551                 org     0x100    ; This fills more or less one page
                      00552 
0100   0782           00553 tsetdc          addwf   PCL,f
0101   3453 3465 3474 00554                 DT      "Set DC",0
       3420 3444 3443 
       3400           
0108   0782           00555 text_cap        addwf   PCL,f
0109   3443 3420 343D 00556                 DT      "C = ",0
       3420 3400      
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010E   0782           00557 text_battery    addwf   PCL,f
010F   3442 3461 3474 00558                 DT      "Battery",0
       3474 3465 3472 
       3479 3400      
0117   0782           00559 testmode        addwf   PCL,f
0118   3444 3469 3461 00560                 DT      "Diagnostic",0
       3467 346E 346F 
       3473 3474 3469 
       3463 3400      
                      00561 
  00000006            00562 DCVALUE_NO_DC   equ     .6
                      00563 
                      00564                 ; Values of the PWM for a 5V power supply
0123   0782           00565 dclist          addwf   PCL,f
0124   3400           00566                 retlw   .0      ; not used
0125   3408           00567                 retlw   .8      ; -2V
0126   3412           00568                 retlw   .18     ; -1.5V
0127   341D           00569                 retlw   .29     ; -1V
0128   3427           00570                 retlw   .39     ; -0.5V
0129   342B           00571                 retlw   .43     ; -0.3V
012A   3432           00572                 retlw   .50     ; 0V
012B   3439           00573                 retlw   .57     ; 0.3V
012C   343C           00574                 retlw   .60     ; 0.5V
012D   3447           00575                 retlw   .71     ; 1V
012E   3452           00576                 retlw   .82     ; 1.5V
012F   345D           00577                 retlw   .93     ; 2V
                      00578 
0130   0782           00579 dcmenu          addwf   PCL,f
0131   3443 3468 346F 00580                 DT      "Choose DC bias",0
       346F 3473 3465 
       3420 3444 3443 
       3420 3462 3469 
       3461 3473 3400 
                      00581 
0140   0782           00582 dcval1          addwf   PCL,f
0141   3444 3443 3420 00583                 DT      "DC = -2 V",0
       343D 3420 342D 
       3432 3420 3456 
       3400           
                      00584 
014B   0782           00585 dcval2          addwf   PCL,f
014C   3444 3443 3420 00586                 DT      "DC = -1.5 V",0
       343D 3420 342D 
       3431 342E 3435 
       3420 3456 3400 
                      00587 
0158   0782           00588 dcval3          addwf   PCL,f
0159   3444 3443 3420 00589                 DT      "DC = -1 V",0
       343D 3420 342D 
       3431 3420 3456 
       3400           
                      00590 
0163   0782           00591 dcval4          addwf   PCL,f
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0164   3444 3443 3420 00592                 DT      "DC = -0.5 V",0
       343D 3420 342D 
       3430 342E 3435 
       3420 3456 3400 
                      00593 
0170   0782           00594 dcval5          addwf   PCL,f
0171   3444 3443 3420 00595                 DT      "DC = -0.3 V",0
       343D 3420 342D 
       3430 342E 3433 
       3420 3456 3400 
                      00596 
017D   0782           00597 dcval6          addwf   PCL,f
017E   3444 3443 3420 00598                 DT      "DC = 0 V (off)",0
       343D 3420 3430 
       3420 3456 3420 
       3428 346F 3466 
       3466 3429 3400 
                      00599 
018D   0782           00600 dcval7          addwf   PCL,f
018E   3444 3443 3420 00601                 DT      "DC = 0.3 V",0
       343D 3420 3430 
       342E 3433 3420 
       3456 3400      
                      00602 
0199   0782           00603 dcval8          addwf   PCL,f
019A   3444 3443 3420 00604                 DT      "DC = 0.5 V",0
       343D 3420 3430 
       342E 3435 3420 
       3456 3400      
                      00605 
01A5   0782           00606 dcval9          addwf   PCL,f
01A6   3444 3443 3420 00607                 DT      "DC = 1 V",0
       343D 3420 3431 
       3420 3456 3400 
                      00608 
01AF   0782           00609 dcval10          addwf   PCL,f
01B0   3444 3443 3420 00610                 DT      "DC = 1.5 V",0
       343D 3420 3431 
       342E 3435 3420 
       3456 3400      
                      00611 
01BB   0782           00612 dcval11         addwf   PCL,f
01BC   3444 3443 3420 00613                 DT      "DC = 2 V",0
       343D 3420 3432 
       3420 3456 3400 
                      00614 
01C5   0782           00615 nosignal        addwf   PCL,f
01C6   342D 342D 3400 00616                 DT      "--",0
                      00617 
01C9   0782           00618 measuring       addwf   PCL,f
01CA   344D 3465 3461 00619                 DT      "Measuring!",0
       3473 3475 3472 
       3469 346E 3467 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3421 3400      
                      00620 
01D5   0782           00621 resist          addwf   PCL,f
01D6   3452 3465 3473 00622                 DT      "Resistance",0
       3469 3473 3474 
       3461 346E 3463 
       3465 3400      
                      00623 
01E1   0782           00624 changebatt      addwf   PCL,f
01E2   3443 3468 3461 00625                 DT      "Change battery",0
       346E 3467 3465 
       3420 3462 3461 
       3474 3474 3465 
       3472 3479 3400 
                      00626 
01F1   0782           00627 soundactive     addwf   PCL,f
01F2   3453 346F 3475 00628                 DT      "Sound active",0
       346E 3464 3420 
       3461 3463 3474 
       3469 3476 3465 
       3400           
                      00629 
                      00630 ; *****************************************************************************
0200                  00631                 org     0x200    ; This fills more or less the second page
                      00632 
0200   0782           00633 yes             addwf   PCL,f
0201   3459 3445 3453 00634                 DT      "YES",0
       3400           
                      00635 
0205   0782           00636 no              addwf   PCL,f
0206   344E 344F 3420 00637                 DT      "NO ",0     ; The space erases the "S" of "YES".
       3400           
                      00638 
                      00639 ; We put here all the code containing tables, so to check that the page limits
                      00640 ; are not not crossed.
                      00641 
                      00642 ; Select the appropriate DC value and show the corresponding text.
020A   1BFD           00643 SelectDC        btfsc       DCVAL,7         ; Check if DCVAL is negative
020B   2C8E           00644                 goto        sdc1            ; If yes, put DCVAL=1
020C   300B           00645                 movlw       .11
020D   027D           00646                 subwf       DCVAL,w         ; Check if DCVAL is greater than 11
020E   1803           00647                 btfsc       STATUS,C
020F   2D26           00648                 goto        sdc11           ; If yes, put DCVAL=11
                      00649 ; We are sure DCVAL is in the correct range. Jump to the corresponding routine.
0210   3002           00650                 movlw       HIGH DCTable
0211   008A           00651                 movwf       PCLATH
0212   087D           00652                 movfw       DCVAL
0213   0782           00653 DCTable         addwf       PCL,f
0214   2C8E           00654                 goto        sdc1            ; If DCVAL=0, put DCVAL=1
0215   2C8E           00655                 goto        sdc1
0216   2C9F           00656                 goto        sdc2
0217   2CAE           00657                 goto        sdc3
0218   2CBD           00658                 goto        sdc4
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0219   2CCC           00659                 goto        sdc5
021A   2CDB           00660                 goto        sdc6
021B   2CEA           00661                 goto        sdc7
021C   2CF9           00662                 goto        sdc8
021D   2D08           00663                 goto        sdc9
021E   2D17           00664                 goto        sdc10
021F   2D26           00665                 goto        sdc11
                      00666                 
                      00667                 ; Check if page boundary is crossed.
                      00668                 ; Source: http://www.piclist.com/techref/microchip/tables.htm
                      00669                 IF ((HIGH ($)) != (HIGH (DCTable)))
                      00670                     ERROR "DCTable crosses page boundary!"
                      00671                 ENDIF
                      00672 
                      00673 ; Select the appropriate frequency value and show the corresponding text.
0220   1BFC           00674 SetFreq         btfsc       FREQ,7          ; Check if FREQ is negative
0221   01FC           00675                 clrf        FREQ            ; If yes, put FREQ=0
0222   300B           00676                 movlw       .11
0223   027C           00677                 subwf       FREQ,w          ; Check if FREQ is greater than 11
0224   1803           00678                 btfsc       STATUS,C
0225   2EAD           00679                 goto        sfreq11         ; If yes, put FREQ=11
                      00680 ; We are sure DCVAL is in the correct range. Jump to the corresponding routine.
0226   3002           00681                 movlw       HIGH FTable
0227   008A           00682                 movwf       PCLATH
0228   087C           00683                 movfw       FREQ
0229   0782           00684 FTable          addwf       PCL,f
022A   2D37           00685                 goto        sfreq0
022B   2D59           00686                 goto        sfreq1
022C   2D7B           00687                 goto        sfreq2
022D   2D9D           00688                 goto        sfreq3
022E   2DBF           00689                 goto        sfreq4
022F   2DE1           00690                 goto        sfreq5
0230   2E03           00691                 goto        sfreq6
0231   2E25           00692                 goto        sfreq7
0232   2E47           00693                 goto        sfreq8
0233   2E69           00694                 goto        sfreq9
0234   2E8B           00695                 goto        sfreq10
0235   2EAD           00696                 goto        sfreq11
                      00697 
                      00698                 ; Check if page boundary is crossed.
                      00699                 ; Source: http://www.piclist.com/techref/microchip/tables.htm
                      00700                 IF ((HIGH ($)) != (HIGH (FTable)))
                      00701                     ERROR "FTable crosses page boundary!"
                      00702                 ENDIF
                      00703 
                      00704 ; Determine which menu has to be shown.
0236   1BCE           00705 SelectMenu      btfsc       MENUSTATE,7     ; Check if MENUSTATE is >0
0237   2BD4           00706                 goto        smenu1          ; If yes, put MENUSTATE=1
0238   3005           00707                 movlw       .5
0239   024E           00708                 subwf       MENUSTATE,w     ; Check if MENUSTATE is >5
023A   1803           00709                 btfsc       STATUS,C
023B   2C12           00710                 goto        smenu5          ; If yes, put MENUSTATE=5
                      00711 ; We are sure MENUSTATE within range. Jump to the corresponding routine.
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

023C   3002           00712                 movlw       HIGH MENUTable
023D   008A           00713                 movwf       PCLATH
023E   084E           00714                 movfw       MENUSTATE
023F   0782           00715 MENUTable       addwf       PCL,f
0240   2BD4           00716                 goto        smenu1
0241   2BD4           00717                 goto        smenu1
0242   2BE5           00718                 goto        smenu2
0243   2BF4           00719                 goto        smenu3
0244   2C03           00720                 goto        smenu4
0245   2C12           00721                 goto        smenu5
                      00722 
                      00723                 ; Check if page boundary is crossed.
                      00724                 ; Source: http://www.piclist.com/techref/microchip/tables.htm
                      00725                 IF ((HIGH ($)) != (HIGH (MENUTable)))
                      00726                     ERROR "MENUTable crosses page boundary!"
                      00727                 ENDIF
                      00728 
                      00729 ; *****************************************************************************
                      00730 ;               Main Program
                      00731 ; *****************************************************************************
0246                  00732 prg
0246   158A 20C7      00733                 lcall       InitAll
0248   118A 231E      00734                 lcall       SetPWM
024A   3001           00735                 movlw       0x1
024B   00CE           00736                 movwf       MENUSTATE
024C   158A 2947      00737                 lgoto       SelectState
                      00738 
                      00739 ; Used in WRITELN, check if the address should be corrected for a page increase.
024E                  00740 checkc
024E   1803           00741                 btfsc       STATUS,C
024F   3E01           00742                 addlw       1
0250   008A           00743                 movwf       PCLATH
0251   0821           00744                 movf        CNT,w
0252   0008           00745                 return
                      00746 
                      00747 ; Used in WRITELN, send a character
                      00748 
                      00749 ; Show the program name and a copyright line.
0253   118A 2A55      00750 Greetings       lgoto       $+1
                      00751                 WRITELN     text_welcome    ; Greetings and program version.
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0255   01A1               M                 clrf        CNT
0256                      M loop_ch
0256   3000               M                 movlw       HIGH text_welcome
0257   008A               M                 movwf       PCLATH
0258   3005               M                 movlw       LOW text_welcome
0259   0721               M                 addwf       CNT,w
025A   3000               M                 movlw       HIGH text_welcome
025B   224E               M                 call        checkc
025C   2005               M                 call        text_welcome
025D   3A00               M                 xorlw       0x00
025E   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

025F   2A63               M                 goto        end_mes
0260   273F               M                 call        senddata
0261   0AA1               M                 incf        CNT, f
0262   2A56               M                 goto        loop_ch
0263                      M end_mes
0263   2762           00752                 call        display2line    ; Move to the second line
                      00753                 WRITELN     text_davide     ; Copyright
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0264   01A1               M                 clrf        CNT
0265                      M loop_ch
0265   3000               M                 movlw       HIGH text_davide
0266   008A               M                 movwf       PCLATH
0267   3017               M                 movlw       LOW text_davide
0268   0721               M                 addwf       CNT,w
0269   3000               M                 movlw       HIGH text_davide
026A   224E               M                 call        checkc
026B   2017               M                 call        text_davide
026C   3A00               M                 xorlw       0x00
026D   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
026E   2A72               M                 goto        end_mes
026F   273F               M                 call        senddata
0270   0AA1               M                 incf        CNT, f
0271   2A65               M                 goto        loop_ch
0272                      M end_mes
0272   0008           00754                 return
                      00755 
                      00756 ; Write that the measured component is a resistance.
0273                  00757 WriteResistive  WRITELN     resist
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0273   01A1               M                 clrf        CNT
0274                      M loop_ch
0274   3001               M                 movlw       HIGH resist
0275   008A               M                 movwf       PCLATH
0276   30D5               M                 movlw       LOW resist
0277   0721               M                 addwf       CNT,w
0278   3001               M                 movlw       HIGH resist
0279   224E               M                 call        checkc
027A   21D5               M                 call        resist
027B   3A00               M                 xorlw       0x00
027C   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
027D   2A81               M                 goto        end_mes
027E   273F               M                 call        senddata
027F   0AA1               M                 incf        CNT, f
0280   2A74               M                 goto        loop_ch
0281                      M end_mes
0281   0008           00758                 return
                      00759 
                      00760 ; Write that the battery voltage is too low.
0282   2750           00761 LowBattery      call        displaychome
                      00762                 WRITELN     changebatt
  0000                    M                 local       loop_ch
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local       end_mes
0283   01A1               M                 clrf        CNT
0284                      M loop_ch
0284   3001               M                 movlw       HIGH changebatt
0285   008A               M                 movwf       PCLATH
0286   30E1               M                 movlw       LOW changebatt
0287   0721               M                 addwf       CNT,w
0288   3001               M                 movlw       HIGH changebatt
0289   224E               M                 call        checkc
028A   21E1               M                 call        changebatt
028B   3A00               M                 xorlw       0x00
028C   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
028D   2A91               M                 goto        end_mes
028E   273F               M                 call        senddata
028F   0AA1               M                 incf        CNT, f
0290   2A84               M                 goto        loop_ch
0291                      M end_mes
0291   158A 296B      00763                 lgoto       MeasBattery
                      00764 
                      00765 ; Write the value of the ESR contained in aHH, aHL, aLH and aLL.
0293                  00766 WriteESR
                      00767                 MOV16FF     bin+0, bin+1, aHH, aHL
0293   0843               M                 movfw       aHH
0294   00D7               M                 movwf       bin+0
0295   0842               M                 movfw       aHL
0296   00D8               M                 movwf       bin+1
                      00768                 MOV16FF     bin+2, bin+3, aLH, aLL
0297   0841               M                 movfw       aLH
0298   00D9               M                 movwf       bin+2
0299   0840               M                 movfw       aLL
029A   00DA               M                 movwf       bin+3
                      00769                 ; Use divid0 and divid1 as a temporary storage (beep length)
                      00770                 MOV16FF     divid0, divid1, aHH, aHL
029B   0843               M                 movfw       aHH
029C   00B0               M                 movwf       divid0
029D   0842               M                 movfw       aHL
029E   00B1               M                 movwf       divid1
                      00771                 ; Write the second line (ESR result)
029F   118A 2762      00772                 lcall       display2line
                      00773                 WRITELN     text_esr
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
02A1   01A1               M                 clrf        CNT
02A2                      M loop_ch
02A2   3000               M                 movlw       HIGH text_esr
02A3   008A               M                 movwf       PCLATH
02A4   304B               M                 movlw       LOW text_esr
02A5   0721               M                 addwf       CNT,w
02A6   3000               M                 movlw       HIGH text_esr
02A7   224E               M                 call        checkc
02A8   204B               M                 call        text_esr
02A9   3A00               M                 xorlw       0x00
02AA   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02AB   2AAF               M                 goto        end_mes
02AC   273F               M                 call        senddata
02AD   0AA1               M                 incf        CNT, f
02AE   2AA2               M                 goto        loop_ch
02AF                      M end_mes
02AF   26ED           00774                 call        WriteNumber24
02B0   273E           00775                 call        sendspace
02B1   30F4           00776                 movlw       0xF4
02B2   273F           00777                 call        sendchar    ; Write the ohm symbol
02B3   2753           00778                 call        sendlinespaces
02B4   3004           00779                 movlw       0x4         ; Multiply x16 the value to calculate
02B5   00A1           00780                 movwf       CNT         ; the beep duration
02B6                  00781 mult
02B6   1003           00782                 bcf         STATUS,C
02B7   0DB1           00783                 rlf         divid1,f
02B8   0DB0           00784                 rlf         divid0,f
02B9   1803           00785                 btfsc       STATUS,C
02BA   2AC3           00786                 goto        over
02BB   0BA1           00787                 decfsz      CNT,f
02BC   2AB6           00788                 goto        mult
02BD   0830           00789                 movfw       divid0
02BE   1903           00790                 btfsc       STATUS,Z
02BF   3001           00791                 movlw       0x1
02C0   158A 22E9      00792                 lcall       Beep        ; Emit a beep
02C2   0008           00793                 return
                      00794 
02C3   30FF           00795 over            movlw       0xFF
02C4   158A 22E9      00796                 lcall       Beep
02C6   0008           00797                 return
                      00798 
02C7                  00799 ReadA           READV       CTRLA, A_VH, A_VL
02C7   2384               M                 call        sync
02C8   1307               M                 bcf         CTRLP, CTRLA
02C9   1007               M                 bcf         CTRLP, CTRLB
02CA   1087               M                 bcf         CTRLP, CTRLC
02CB   1707               M                 bsf         CTRLP,CTRLA
02CC   2391               M                 call        syncread
02CD   0876               M                 movfw       STOREH
02CE   00F0               M                 movwf       A_VH
02CF   0877               M                 movfw       STOREL
02D0   00F1               M                 movwf       A_VL
02D1   0008           00800                 return
02D2                  00801 ReadB           READV       CTRLB, B_VH, B_VL
02D2   2384               M                 call        sync
02D3   1307               M                 bcf         CTRLP, CTRLA
02D4   1007               M                 bcf         CTRLP, CTRLB
02D5   1087               M                 bcf         CTRLP, CTRLC
02D6   1407               M                 bsf         CTRLP,CTRLB
02D7   2391               M                 call        syncread
02D8   0876               M                 movfw       STOREH
02D9   00F2               M                 movwf       B_VH
02DA   0877               M                 movfw       STOREL
02DB   00F3               M                 movwf       B_VL
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02DC   0008           00802                 return
02DD                  00803 ReadC           READV       CTRLC, C_VH, C_VL
02DD   2384               M                 call        sync
02DE   1307               M                 bcf         CTRLP, CTRLA
02DF   1007               M                 bcf         CTRLP, CTRLB
02E0   1087               M                 bcf         CTRLP, CTRLC
02E1   1487               M                 bsf         CTRLP,CTRLC
02E2   2391               M                 call        syncread
02E3   0876               M                 movfw       STOREH
02E4   00F4               M                 movwf       C_VH
02E5   0877               M                 movfw       STOREL
02E6   00F5               M                 movwf       C_VL
02E7   0008           00804                 return
                      00805 
                      00806 ; Read all the three values A, B and C and store the results appropriately.
                      00807 ; Calculate (A-B) and leave the result in divisH:divisL
02E8   22C7           00808 ReadAllADC      call        ReadA
02E9   0870           00809 checkamplitudes movfw       A_VH        ; Check if oscillator amplitude is OK.
02EA   3C23           00810                 sublw       OSC_LOTHRESHOLD
02EB   1803           00811                 btfsc       STATUS,C
02EC   3401           00812                 retlw       ERR_OSCLO
02ED   0870           00813                 movfw       A_VH
02EE   3CF0           00814                 sublw       OSC_HITHRESHOLD
02EF   1C03           00815                 btfss       STATUS,C
02F0   3402           00816                 retlw       ERR_OSCHI
02F1   22D2           00817                 call        ReadB
                      00818                 ; Calculate (A-B) and leave the result in divisH:divisL
                      00819                 ; Transfer B in the high 16 bits of divid
                      00820                 MOV16FF     divid0, divid1, B_VH, B_VL
02F2   0872               M                 movfw       B_VH
02F3   00B0               M                 movwf       divid0
02F4   0873               M                 movfw       B_VL
02F5   00B1               M                 movwf       divid1
02F6   01B2           00821                 clrf        divid2      ; Put 0 to divid2, divid3
02F7   01B3           00822                 clrf        divid3
                      00823                 SUB16BIT    divid0, divid1, C_VH, C_VL  ; divid -= C
02F8   0875               M                 movfw       C_VL
02F9   02B1               M                 subwf       divid1,f
02FA   0874               M                 movfw       C_VH
02FB   1C03               M                 btfss       STATUS,C
02FC   0F74               M                 incfsz      C_VH,w      ; Adjust borrow if C=1
02FD   02B0               M                 subwf       divid0,f
                      00824                 MOV16FF     divisH, divisL, A_VH, A_VL  ; Transfer A in divis
02FE   0870               M                 movfw       A_VH
02FF   00B4               M                 movwf       divisH
0300   0871               M                 movfw       A_VL
0301   00B5               M                 movwf       divisL
                      00825                 SUB16BIT    divisH, divisL, B_VH, B_VL  ; divis -= B
0302   0873               M                 movfw       B_VL
0303   02B5               M                 subwf       divisL,f
0304   0872               M                 movfw       B_VH
0305   1C03               M                 btfss       STATUS,C
0306   0F72               M                 incfsz      B_VH,w      ; Adjust borrow if C=1
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0307   02B4               M                 subwf       divisH,f
                      00826 
0308   1C03           00827                 btfss       STATUS,C        ; In some cases (A-B) is <0!!!
0309   3403           00828                 retlw       ERR_LOWCURR
030A   0834           00829 checkcurrent    movfw       divisH          ; Check if test current is OK.
030B   3C02           00830                 sublw       CURR_THRESHOLD  ; (A-B) should be greater than a
030C   1803           00831                 btfsc       STATUS,C        ; certain threshold for the ESR
030D   3403           00832                 retlw       ERR_LOWCURR     ; to be meaningful
030E   22DD           00833                 call        ReadC
030F   3400           00834                 retlw       MEAS_OK
                      00835 
                      00836 ; Write the +/- DC symbol (if applicable)
0310   087D           00837 WriteDC         movfw       DCVAL               ; Check the DC value
0311   3C06           00838                 sublw       DCVALUE_NO_DC
0312   1803           00839                 btfsc       STATUS,C
0313   2B19           00840                 goto        dcneg
0314   302B           00841                 movlw       '+'                 ; Write '+DC' if appropriate
0315   273F           00842                 call        senddata
0316   3000           00843                 movlw       0x00                ; Special character ("DC")
0317   273F           00844                 call        senddata
0318   0008           00845                 return
0319   302D           00846 dcneg           movlw       '-'                 ; Write '-DC' if appropriate
031A   273F           00847                 call        senddata
031B   3000           00848                 movlw       0x00                ; Special character ("DC")
031C   273F           00849                 call        senddata
031D   0008           00850                 return
                      00851 
                      00852 ; Set the WMM so to obtain the wanted DC value.
031E   2753           00853 SetPWM          call        sendlinespaces
031F   087D           00854                 movfw       DCVAL
0320   3A06           00855                 xorlw       DCVALUE_NO_DC       ; Value that corresponds to DC
0321   1903           00856                 btfsc       STATUS,Z
0322   2B38           00857                 goto        SetNoDC
0323   1683 1303      00858                 BANKSEL     TRISCTRL
0325   1107           00859                 bcf         TRISCTRL, PWMPIN    ; Port PWM as output
0326   300F           00860                 movlw       0x0F
0327   1283 1303      00861                 BANKSEL     CCP1CON
0329   0097           00862                 movwf       CCP1CON
032A   3064           00863                 movlw       .100                ; Values in  %
032B   1683 1303      00864                 BANKSEL     PR2
032D   0092           00865                 movwf       PR2
032E   087D           00866                 movfw       DCVAL
032F   118A 2123      00867                 lcall       dclist
0331   1283 1303      00868                 BANKSEL     CCPR1L
0333   0095           00869                 movwf       CCPR1L
0334   1283 1303      00870                 BANKSEL     T2CON
0336   1512           00871                 bsf         T2CON, TMR2ON
0337   2F62           00872                 goto        display2line
                      00873 
                      00874 ; Deactivate the DC output.
0338   1683 1303      00875 SetNoDC         BANKSEL     TRISCTRL
033A   1507           00876                 bsf         TRISCTRL, PWMPIN    ; Port PWM as input
033B   0008           00877                 return                          ; That makes sort that DC=0
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00878 
                      00879 ; Show an error if the oscillator level is too low.
033C   274D           00880 err_lowosc      call        displayclear
033D   087D           00881                 movfw       DCVAL               ; If a DC bias is present,
033E   3A06           00882                 xorlw       DCVALUE_NO_DC       ; then 99% of the times we have
033F   1903           00883                 btfsc       STATUS,Z            ; a short circuit.
0340   2B51           00884                 goto        nosig
                      00885                 WRITELN     text_short
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0341   01A1               M                 clrf        CNT
0342                      M loop_ch
0342   3000               M                 movlw       HIGH text_short
0343   008A               M                 movwf       PCLATH
0344   3026               M                 movlw       LOW text_short
0345   0721               M                 addwf       CNT,w
0346   3000               M                 movlw       HIGH text_short
0347   224E               M                 call        checkc
0348   2026               M                 call        text_short
0349   3A00               M                 xorlw       0x00
034A   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
034B   2B4F               M                 goto        end_mes
034C   273F               M                 call        senddata
034D   0AA1               M                 incf        CNT, f
034E   2B42               M                 goto        loop_ch
034F                      M end_mes
034F   2766           00886                 call        activedelay
0350   0008           00887                 return
                      00888 
                      00889 ; If the measurement is not possible, show "--".
0351                  00890 err_lowcurr
0351   2762           00891 nosig           call        display2line
                      00892                 WRITELN     nosignal
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0352   01A1               M                 clrf        CNT
0353                      M loop_ch
0353   3001               M                 movlw       HIGH nosignal
0354   008A               M                 movwf       PCLATH
0355   30C5               M                 movlw       LOW nosignal
0356   0721               M                 addwf       CNT,w
0357   3001               M                 movlw       HIGH nosignal
0358   224E               M                 call        checkc
0359   21C5               M                 call        nosignal
035A   3A00               M                 xorlw       0x00
035B   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
035C   2B60               M                 goto        end_mes
035D   273F               M                 call        senddata
035E   0AA1               M                 incf        CNT, f
035F   2B53               M                 goto        loop_ch
0360                      M end_mes
0360   2766           00893                 call        activedelay
0361   0008           00894                 return
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00895 
                      00896 ; If the amplitude of the oscillator is too large, write an error.
0362   2762           00897 err_hiosc       call        display2line
                      00898                 WRITELN     text_hiosc
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0363   01A1               M                 clrf        CNT
0364                      M loop_ch
0364   3000               M                 movlw       HIGH text_hiosc
0365   008A               M                 movwf       PCLATH
0366   3033               M                 movlw       LOW text_hiosc
0367   0721               M                 addwf       CNT,w
0368   3000               M                 movlw       HIGH text_hiosc
0369   224E               M                 call        checkc
036A   2033               M                 call        text_hiosc
036B   3A00               M                 xorlw       0x00
036C   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
036D   2B71               M                 goto        end_mes
036E   273F               M                 call        senddata
036F   0AA1               M                 incf        CNT, f
0370   2B64               M                 goto        loop_ch
0371                      M end_mes
0371   2766           00899                 call        activedelay
0372   0008           00900                 return
                      00901 
                      00902 ; Write that the resistance is too large.
0373   2762           00903 err_reshi       call        display2line
                      00904                 WRITELN     text_reshi
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0374   01A1               M                 clrf        CNT
0375                      M loop_ch
0375   3000               M                 movlw       HIGH text_reshi
0376   008A               M                 movwf       PCLATH
0377   303F               M                 movlw       LOW text_reshi
0378   0721               M                 addwf       CNT,w
0379   3000               M                 movlw       HIGH text_reshi
037A   224E               M                 call        checkc
037B   203F               M                 call        text_reshi
037C   3A00               M                 xorlw       0x00
037D   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
037E   2B82               M                 goto        end_mes
037F   273F               M                 call        senddata
0380   0AA1               M                 incf        CNT, f
0381   2B75               M                 goto        loop_ch
0382                      M end_mes
0382   2766           00905                 call        activedelay
0383   0008           00906                 return
                      00907 
                      00908 ; Introduce a delay and synchronise the code to the oscillator. This ensures
                      00909 ; that the sampling operation is done at the same moment of the signal, thus
                      00910 ; improving the stability of the result at low frequency. Then perform a read
                      00911 ; of the ADC. A total of 64 reads is done and the result is the sum of all of
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00912 ; those. Each read is 10 bits, so that the result fills up 16 bits.
0384   1283 1303      00913 sync            BANKSEL     CTRLP
0386   1B87           00914                 btfsc       CTRLP,VSYNC ; Synchronise with the oscillator, then
0387   2B86           00915                 goto        $-1         ; read the adc
0388   1B87           00916                 btfsc       CTRLP,VSYNC
0389   2B88           00917                 goto        $-1
038A   1B87           00918                 btfsc       CTRLP,VSYNC
038B   2B8A           00919                 goto        $-1
038C   1F87           00920                 btfss       CTRLP,VSYNC
038D   2B8C           00921                 goto        $-1
038E   1F87           00922                 btfss       CTRLP,VSYNC
038F   2B8E           00923                 goto        $-1
0390   0008           00924                 return
                      00925 
0391   2766           00926 syncread        call        activedelay
0392   2384           00927                 call        sync
0393   141F           00928 readadc         bsf         ADCON0,ADON ; Activate the ADC.
0394   01F6           00929                 clrf        STOREH
0395   01F7           00930                 clrf        STOREL
0396   3040           00931                 movlw       0x40
0397   00A1           00932                 movwf       CNT
0398   149F           00933 @llo            bsf         ADCON0,GO
0399   189F           00934                 btfsc       ADCON0,GO
039A   2B99           00935                 goto        $-1         ; Wait until conversion is complete
                      00936                 ADD16BIT    STOREH, STOREL, ADRESH, ADRESL
039B   1683 1303          M                 BANKSEL     ADRESL
039D   081E               M                 movfw       ADRESL
039E   07F7               M                 addwf       STOREL,f
039F   1283 1303          M                 BANKSEL     ADRESH
03A1   081E               M                 movfw       ADRESH
03A2   1803               M                 btfsc       STATUS,C
03A3   0F1E               M                 incfsz      ADRESH,w
03A4   07F6               M                 addwf       STOREH,f
03A5   0BA1           00937                 decfsz      CNT,f
03A6   2B98           00938                 goto @llo
03A7   0008           00939                 return
                      00940 
                      00941 ; Write the value of the capacitance on the screen.
03A8                  00942 WriteCap        WRITELN     text_cap
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
03A8   01A1               M                 clrf        CNT
03A9                      M loop_ch
03A9   3001               M                 movlw       HIGH text_cap
03AA   008A               M                 movwf       PCLATH
03AB   3008               M                 movlw       LOW text_cap
03AC   0721               M                 addwf       CNT,w
03AD   3001               M                 movlw       HIGH text_cap
03AE   224E               M                 call        checkc
03AF   2108               M                 call        text_cap
03B0   3A00               M                 xorlw       0x00
03B1   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
03B2   2BB6               M                 goto        end_mes
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03B3   273F               M                 call        senddata
03B4   0AA1               M                 incf        CNT, f
03B5   2BA9               M                 goto        loop_ch
03B6                      M end_mes
                      00943                 MOV16FF     bin+0, bin+1,CAPHH, CAPHL
03B6   085B               M                 movfw       CAPHH
03B7   00D7               M                 movwf       bin+0
03B8   085C               M                 movfw       CAPHL
03B9   00D8               M                 movwf       bin+1
                      00944                 MOV16FF     bin+2, bin+3,CAPLH, CAPLL
03BA   085D               M                 movfw       CAPLH
03BB   00D9               M                 movwf       bin+2
03BC   085E               M                 movfw       CAPLL
03BD   00DA               M                 movwf       bin+3
03BE   26ED           00945                 call        WriteNumber24
03BF   273E           00946                 call        sendspace
03C0   0825           00947                 movfw       UNIT
03C1   273F           00948                 call        sendchar    ; Write the farad symbol
03C2   3046           00949                 movlw       'F'
03C3   273F           00950                 call        sendchar    ; Write the farad symbol
                      00951                 ; Erase some characters that may be
                      00952                 ; still present if successive reads
                      00953                 ; are performed.
03C4   2753           00954                 call        sendlinespaces
03C5   0008           00955                 return
                      00956 
                      00957 ; *****************************************************************************
                      00958 ; Main menu loop
                      00959 ; *****************************************************************************
                      00960 
03C6   118A 274D      00961 Menu            lcall       displayclear
03C8   118A 275A      00962 ChooseMenu      lcall       clear1stline    ; Move to the second line
03CA   2236           00963                 call        SelectMenu
03CB   2766           00964                 call        activedelay
03CC   1B85           00965                 btfsc       PORTA,RA7
03CD   2BD2           00966                 goto        ExitMenu              ; Exit from this loop
03CE   087F           00967                 movfw       CHVAL           ; Update the DC value if needed
03CF   07CE           00968                 addwf       MENUSTATE,f
03D0   01FF           00969                 clrf        CHVAL
03D1   2BC8           00970                 goto        ChooseMenu
                      00971 
                      00972 ; This is needed as lgoto is a macro
03D2   158A 2947      00973 ExitMenu        lgoto       SelectState
                      00974 
                      00975 
03D4   3001           00976 smenu1          movlw       0x1             ; We need to be sure that negative
03D5   00CE           00977                 movwf       MENUSTATE       ; values are transformed into 1
                      00978                 WRITELN     automatic
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
03D6   01A1               M                 clrf        CNT
03D7                      M loop_ch
03D7   3000               M                 movlw       HIGH automatic
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03D8   008A               M                 movwf       PCLATH
03D9   30E0               M                 movlw       LOW automatic
03DA   0721               M                 addwf       CNT,w
03DB   3000               M                 movlw       HIGH automatic
03DC   224E               M                 call        checkc
03DD   20E0               M                 call        automatic
03DE   3A00               M                 xorlw       0x00
03DF   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
03E0   2BE4               M                 goto        end_mes
03E1   273F               M                 call        senddata
03E2   0AA1               M                 incf        CNT, f
03E3   2BD7               M                 goto        loop_ch
03E4                      M end_mes
03E4   0008           00979                 return
                      00980 
03E5                  00981 smenu2          WRITELN     manual
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
03E5   01A1               M                 clrf        CNT
03E6                      M loop_ch
03E6   3000               M                 movlw       HIGH manual
03E7   008A               M                 movwf       PCLATH
03E8   30F2               M                 movlw       LOW manual
03E9   0721               M                 addwf       CNT,w
03EA   3000               M                 movlw       HIGH manual
03EB   224E               M                 call        checkc
03EC   20F2               M                 call        manual
03ED   3A00               M                 xorlw       0x00
03EE   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
03EF   2BF3               M                 goto        end_mes
03F0   273F               M                 call        senddata
03F1   0AA1               M                 incf        CNT, f
03F2   2BE6               M                 goto        loop_ch
03F3                      M end_mes
03F3   0008           00982                 return
                      00983 
03F4                  00984 smenu3          WRITELN     tsetdc
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
03F4   01A1               M                 clrf        CNT
03F5                      M loop_ch
03F5   3001               M                 movlw       HIGH tsetdc
03F6   008A               M                 movwf       PCLATH
03F7   3000               M                 movlw       LOW tsetdc
03F8   0721               M                 addwf       CNT,w
03F9   3001               M                 movlw       HIGH tsetdc
03FA   224E               M                 call        checkc
03FB   2100               M                 call        tsetdc
03FC   3A00               M                 xorlw       0x00
03FD   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
03FE   2C02               M                 goto        end_mes
03FF   273F               M                 call        senddata
0400   0AA1               M                 incf        CNT, f
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0401   2BF5               M                 goto        loop_ch
0402                      M end_mes
0402   0008           00985                 return
                      00986 
0403                  00987 smenu4          WRITELN     soundactive
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0403   01A1               M                 clrf        CNT
0404                      M loop_ch
0404   3001               M                 movlw       HIGH soundactive
0405   008A               M                 movwf       PCLATH
0406   30F1               M                 movlw       LOW soundactive
0407   0721               M                 addwf       CNT,w
0408   3001               M                 movlw       HIGH soundactive
0409   224E               M                 call        checkc
040A   21F1               M                 call        soundactive
040B   3A00               M                 xorlw       0x00
040C   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
040D   2C11               M                 goto        end_mes
040E   273F               M                 call        senddata
040F   0AA1               M                 incf        CNT, f
0410   2C04               M                 goto        loop_ch
0411                      M end_mes
0411   0008           00988                 return
                      00989 
0412   3005           00990 smenu5          movlw       .5
0413   00CE           00991                 movwf       MENUSTATE
                      00992                 WRITELN     testmode
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0414   01A1               M                 clrf        CNT
0415                      M loop_ch
0415   3001               M                 movlw       HIGH testmode
0416   008A               M                 movwf       PCLATH
0417   3017               M                 movlw       LOW testmode
0418   0721               M                 addwf       CNT,w
0419   3001               M                 movlw       HIGH testmode
041A   224E               M                 call        checkc
041B   2117               M                 call        testmode
041C   3A00               M                 xorlw       0x00
041D   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
041E   2C22               M                 goto        end_mes
041F   273F               M                 call        senddata
0420   0AA1               M                 incf        CNT, f
0421   2C15               M                 goto        loop_ch
0422                      M end_mes
0422   0008           00993                 return
                      00994 
                      00995 ; *****************************************************************************
                      00996 
                      00997 ; Write the text associated to the measurement of the battery.
0423   118A 2C25      00998 WriteBattery    lgoto       $+1
                      00999                 WRITELN     text_battery
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0425   01A1               M                 clrf        CNT
0426                      M loop_ch
0426   3001               M                 movlw       HIGH text_battery
0427   008A               M                 movwf       PCLATH
0428   300E               M                 movlw       LOW text_battery
0429   0721               M                 addwf       CNT,w
042A   3001               M                 movlw       HIGH text_battery
042B   224E               M                 call        checkc
042C   210E               M                 call        text_battery
042D   3A00               M                 xorlw       0x00
042E   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
042F   2C33               M                 goto        end_mes
0430   273F               M                 call        senddata
0431   0AA1               M                 incf        CNT, f
0432   2C26               M                 goto        loop_ch
0433                      M end_mes
0433   0008           01000                 return
                      01001 
                      01002 ; In this loop one can chose if the sound is active or not.
0434   118A 274D      01003 ChooseSound     lcall       displayclear
                      01004                 WRITELN     soundactive
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0436   01A1               M                 clrf        CNT
0437                      M loop_ch
0437   3001               M                 movlw       HIGH soundactive
0438   008A               M                 movwf       PCLATH
0439   30F1               M                 movlw       LOW soundactive
043A   0721               M                 addwf       CNT,w
043B   3001               M                 movlw       HIGH soundactive
043C   224E               M                 call        checkc
043D   21F1               M                 call        soundactive
043E   3A00               M                 xorlw       0x00
043F   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0440   2C44               M                 goto        end_mes
0441   273F               M                 call        senddata
0442   0AA1               M                 incf        CNT, f
0443   2C37               M                 goto        loop_ch
0444                      M end_mes
0444   2762           01005 ChooseSoundLoop call        display2line    ; Move to the second line
0445   087F           01006                 movfw       CHVAL           ; Update SOUNDOFF if needed
0446   07BE           01007                 addwf       SOUNDOFF,f
0447   01FF           01008                 clrf        CHVAL
0448   3001           01009                 movlw       .1
0449   1BBE           01010                 btfsc       SOUNDOFF,7      ; Check if SOUNDOFF<0
044A   00BE           01011                 movwf       SOUNDOFF
044B   3002           01012                 movlw       .2
044C   023E           01013                 subwf       SOUNDOFF,w      ; Check if SOUNDOFF is >1
044D   1803           01014                 btfsc       STATUS,C
044E   01BE           01015                 clrf        SOUNDOFF
044F   083E           01016                 movfw       SOUNDOFF
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0450   1D03           01017                 btfss       STATUS,Z
0451   2C64           01018                 goto        writeno
                      01019                 WRITELN     yes
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0452   01A1               M                 clrf        CNT
0453                      M loop_ch
0453   3002               M                 movlw       HIGH yes
0454   008A               M                 movwf       PCLATH
0455   3000               M                 movlw       LOW yes
0456   0721               M                 addwf       CNT,w
0457   3002               M                 movlw       HIGH yes
0458   224E               M                 call        checkc
0459   2200               M                 call        yes
045A   3A00               M                 xorlw       0x00
045B   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
045C   2C60               M                 goto        end_mes
045D   273F               M                 call        senddata
045E   0AA1               M                 incf        CNT, f
045F   2C53               M                 goto        loop_ch
0460                      M end_mes
0460   2766           01020 contSoundLoop   call        activedelay
0461   1F85           01021                 btfss       PORTA,RA7
0462   2BC6           01022                 goto        Menu            ; Exit from this loop
0463   2C44           01023                 goto        ChooseSoundLoop
                      01024 
0464                  01025 writeno         WRITELN     no
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0464   01A1               M                 clrf        CNT
0465                      M loop_ch
0465   3002               M                 movlw       HIGH no
0466   008A               M                 movwf       PCLATH
0467   3005               M                 movlw       LOW no
0468   0721               M                 addwf       CNT,w
0469   3002               M                 movlw       HIGH no
046A   224E               M                 call        checkc
046B   2205               M                 call        no
046C   3A00               M                 xorlw       0x00
046D   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
046E   2C72               M                 goto        end_mes
046F   273F               M                 call        senddata
0470   0AA1               M                 incf        CNT, f
0471   2C65               M                 goto        loop_ch
0472                      M end_mes
0472   2C60           01026                 goto        contSoundLoop
                      01027 
                      01028 ; In this loop one can choose the DC value to be set.
0473   118A 274D      01029 ChooseDc        lcall       displayclear
                      01030                 WRITELN     dcmenu
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0475   01A1               M                 clrf        CNT
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0476                      M loop_ch
0476   3001               M                 movlw       HIGH dcmenu
0477   008A               M                 movwf       PCLATH
0478   3030               M                 movlw       LOW dcmenu
0479   0721               M                 addwf       CNT,w
047A   3001               M                 movlw       HIGH dcmenu
047B   224E               M                 call        checkc
047C   2130               M                 call        dcmenu
047D   3A00               M                 xorlw       0x00
047E   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
047F   2C83               M                 goto        end_mes
0480   273F               M                 call        senddata
0481   0AA1               M                 incf        CNT, f
0482   2C76               M                 goto        loop_ch
0483                      M end_mes
0483   118A 2762      01031 ChooseDcLoop    lcall       display2line    ; Move to the second line
0485   087F           01032                 movfw       CHVAL           ; Update the DC value if needed
0486   07FD           01033                 addwf       DCVAL,f
0487   01FF           01034                 clrf        CHVAL
0488   118A 220A      01035                 lcall       SelectDC        ; Show the DC value
048A   2766           01036                 call        activedelay
048B   1F85           01037                 btfss       PORTA,RA7
048C   2BC6           01038                 goto        Menu            ; Exit from this loop
048D   2C83           01039                 goto        ChooseDcLoop
                      01040 
048E   3001           01041 sdc1            movlw       0x1             ; We need to be sure that negative
048F   00FD           01042                 movwf       DCVAL           ; values are transformed into 1
                      01043                 WRITELN     dcval1
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0490   01A1               M                 clrf        CNT
0491                      M loop_ch
0491   3001               M                 movlw       HIGH dcval1
0492   008A               M                 movwf       PCLATH
0493   3040               M                 movlw       LOW dcval1
0494   0721               M                 addwf       CNT,w
0495   3001               M                 movlw       HIGH dcval1
0496   224E               M                 call        checkc
0497   2140               M                 call        dcval1
0498   3A00               M                 xorlw       0x00
0499   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
049A   2C9E               M                 goto        end_mes
049B   273F               M                 call        senddata
049C   0AA1               M                 incf        CNT, f
049D   2C91               M                 goto        loop_ch
049E                      M end_mes
049E   2B1E           01044                 goto        SetPWM
                      01045 
049F                  01046 sdc2                                        ; No need to set values for DCVAL
                      01047                 WRITELN     dcval2
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
049F   01A1               M                 clrf        CNT
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04A0                      M loop_ch
04A0   3001               M                 movlw       HIGH dcval2
04A1   008A               M                 movwf       PCLATH
04A2   304B               M                 movlw       LOW dcval2
04A3   0721               M                 addwf       CNT,w
04A4   3001               M                 movlw       HIGH dcval2
04A5   224E               M                 call        checkc
04A6   214B               M                 call        dcval2
04A7   3A00               M                 xorlw       0x00
04A8   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
04A9   2CAD               M                 goto        end_mes
04AA   273F               M                 call        senddata
04AB   0AA1               M                 incf        CNT, f
04AC   2CA0               M                 goto        loop_ch
04AD                      M end_mes
04AD   2B1E           01048                 goto        SetPWM
                      01049 
04AE                  01050 sdc3
                      01051                 WRITELN     dcval3
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
04AE   01A1               M                 clrf        CNT
04AF                      M loop_ch
04AF   3001               M                 movlw       HIGH dcval3
04B0   008A               M                 movwf       PCLATH
04B1   3058               M                 movlw       LOW dcval3
04B2   0721               M                 addwf       CNT,w
04B3   3001               M                 movlw       HIGH dcval3
04B4   224E               M                 call        checkc
04B5   2158               M                 call        dcval3
04B6   3A00               M                 xorlw       0x00
04B7   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
04B8   2CBC               M                 goto        end_mes
04B9   273F               M                 call        senddata
04BA   0AA1               M                 incf        CNT, f
04BB   2CAF               M                 goto        loop_ch
04BC                      M end_mes
04BC   2B1E           01052                 goto        SetPWM
                      01053 
04BD                  01054 sdc4
                      01055                 WRITELN     dcval4
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
04BD   01A1               M                 clrf        CNT
04BE                      M loop_ch
04BE   3001               M                 movlw       HIGH dcval4
04BF   008A               M                 movwf       PCLATH
04C0   3063               M                 movlw       LOW dcval4
04C1   0721               M                 addwf       CNT,w
04C2   3001               M                 movlw       HIGH dcval4
04C3   224E               M                 call        checkc
04C4   2163               M                 call        dcval4
04C5   3A00               M                 xorlw       0x00
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04C6   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
04C7   2CCB               M                 goto        end_mes
04C8   273F               M                 call        senddata
04C9   0AA1               M                 incf        CNT, f
04CA   2CBE               M                 goto        loop_ch
04CB                      M end_mes
04CB   2B1E           01056                 goto        SetPWM
                      01057 
04CC                  01058 sdc5
                      01059                 WRITELN     dcval5
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
04CC   01A1               M                 clrf        CNT
04CD                      M loop_ch
04CD   3001               M                 movlw       HIGH dcval5
04CE   008A               M                 movwf       PCLATH
04CF   3070               M                 movlw       LOW dcval5
04D0   0721               M                 addwf       CNT,w
04D1   3001               M                 movlw       HIGH dcval5
04D2   224E               M                 call        checkc
04D3   2170               M                 call        dcval5
04D4   3A00               M                 xorlw       0x00
04D5   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
04D6   2CDA               M                 goto        end_mes
04D7   273F               M                 call        senddata
04D8   0AA1               M                 incf        CNT, f
04D9   2CCD               M                 goto        loop_ch
04DA                      M end_mes
04DA   2B1E           01060                 goto        SetPWM
                      01061 
04DB                  01062 sdc6
                      01063                 WRITELN     dcval6
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
04DB   01A1               M                 clrf        CNT
04DC                      M loop_ch
04DC   3001               M                 movlw       HIGH dcval6
04DD   008A               M                 movwf       PCLATH
04DE   307D               M                 movlw       LOW dcval6
04DF   0721               M                 addwf       CNT,w
04E0   3001               M                 movlw       HIGH dcval6
04E1   224E               M                 call        checkc
04E2   217D               M                 call        dcval6
04E3   3A00               M                 xorlw       0x00
04E4   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
04E5   2CE9               M                 goto        end_mes
04E6   273F               M                 call        senddata
04E7   0AA1               M                 incf        CNT, f
04E8   2CDC               M                 goto        loop_ch
04E9                      M end_mes
04E9   2B1E           01064                 goto        SetPWM
                      01065 
04EA                  01066 sdc7
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01067                 WRITELN     dcval7
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
04EA   01A1               M                 clrf        CNT
04EB                      M loop_ch
04EB   3001               M                 movlw       HIGH dcval7
04EC   008A               M                 movwf       PCLATH
04ED   308D               M                 movlw       LOW dcval7
04EE   0721               M                 addwf       CNT,w
04EF   3001               M                 movlw       HIGH dcval7
04F0   224E               M                 call        checkc
04F1   218D               M                 call        dcval7
04F2   3A00               M                 xorlw       0x00
04F3   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
04F4   2CF8               M                 goto        end_mes
04F5   273F               M                 call        senddata
04F6   0AA1               M                 incf        CNT, f
04F7   2CEB               M                 goto        loop_ch
04F8                      M end_mes
04F8   2B1E           01068                 goto        SetPWM
                      01069 
04F9                  01070 sdc8
                      01071                 WRITELN     dcval8
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
04F9   01A1               M                 clrf        CNT
04FA                      M loop_ch
04FA   3001               M                 movlw       HIGH dcval8
04FB   008A               M                 movwf       PCLATH
04FC   3099               M                 movlw       LOW dcval8
04FD   0721               M                 addwf       CNT,w
04FE   3001               M                 movlw       HIGH dcval8
04FF   224E               M                 call        checkc
0500   2199               M                 call        dcval8
0501   3A00               M                 xorlw       0x00
0502   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0503   2D07               M                 goto        end_mes
0504   273F               M                 call        senddata
0505   0AA1               M                 incf        CNT, f
0506   2CFA               M                 goto        loop_ch
0507                      M end_mes
0507   2B1E           01072                 goto        SetPWM
                      01073 
0508                  01074 sdc9
                      01075                 WRITELN     dcval9
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0508   01A1               M                 clrf        CNT
0509                      M loop_ch
0509   3001               M                 movlw       HIGH dcval9
050A   008A               M                 movwf       PCLATH
050B   30A5               M                 movlw       LOW dcval9
050C   0721               M                 addwf       CNT,w
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

050D   3001               M                 movlw       HIGH dcval9
050E   224E               M                 call        checkc
050F   21A5               M                 call        dcval9
0510   3A00               M                 xorlw       0x00
0511   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0512   2D16               M                 goto        end_mes
0513   273F               M                 call        senddata
0514   0AA1               M                 incf        CNT, f
0515   2D09               M                 goto        loop_ch
0516                      M end_mes
0516   2B1E           01076                 goto        SetPWM
                      01077 
0517                  01078 sdc10
                      01079                 WRITELN     dcval10
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0517   01A1               M                 clrf        CNT
0518                      M loop_ch
0518   3001               M                 movlw       HIGH dcval10
0519   008A               M                 movwf       PCLATH
051A   30AF               M                 movlw       LOW dcval10
051B   0721               M                 addwf       CNT,w
051C   3001               M                 movlw       HIGH dcval10
051D   224E               M                 call        checkc
051E   21AF               M                 call        dcval10
051F   3A00               M                 xorlw       0x00
0520   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0521   2D25               M                 goto        end_mes
0522   273F               M                 call        senddata
0523   0AA1               M                 incf        CNT, f
0524   2D18               M                 goto        loop_ch
0525                      M end_mes
0525   2B1E           01080                 goto        SetPWM
                      01081 
0526   300B           01082 sdc11           movlw       .11             ; We need to be sure that >11 ->11
0527   00FD           01083                 movwf       DCVAL
                      01084                 WRITELN     dcval11
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0528   01A1               M                 clrf        CNT
0529                      M loop_ch
0529   3001               M                 movlw       HIGH dcval11
052A   008A               M                 movwf       PCLATH
052B   30BB               M                 movlw       LOW dcval11
052C   0721               M                 addwf       CNT,w
052D   3001               M                 movlw       HIGH dcval11
052E   224E               M                 call        checkc
052F   21BB               M                 call        dcval11
0530   3A00               M                 xorlw       0x00
0531   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0532   2D36               M                 goto        end_mes
0533   273F               M                 call        senddata
0534   0AA1               M                 incf        CNT, f
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0535   2D29               M                 goto        loop_ch
0536                      M end_mes
0536   2B1E           01085                 goto        SetPWM
                      01086 
                      01087 
0537                  01088 sfreq0
                      01089                 PROGFREQ    LSB0,MSB0,freq0,DIVH0,DIVL0,UNIT0
  0000                    M                 local       exit
0537   3040               M                 movlw       (LSB0 & 0xFF00)>>8
0538   00FA               M                 movwf       LSBH
0539   30D6               M                 movlw       (LSB0 & 0x00FF)
053A   00FB               M                 movwf       LSBL
053B   3040               M                 movlw       (MSB0 & 0xFF00)>>8
053C   00F8               M                 movwf       MSBH
053D   3000               M                 movlw       (MSB0 & 0x00FF)
053E   00F9               M                 movwf       MSBL
053F   3008               M                 movlw       DIVH0
0540   00E5               M                 movwf       DIVH
0541   303C               M                 movlw       DIVL0
0542   00EF               M                 movwf       DIVL
0543   158A 2124          M                 lcall       ConfigureAD9833
0545   306D               M                 movlw       UNIT0
0546   00A5               M                 movwf       UNIT
0547   0827               M                 movfw       WRITEF      ; Check if to write frequency
0548   1903               M                 skpnz
0549   2D58               M                 goto        exit
                          M                 WRITELN     freq0
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
054A   01A1               M                 clrf        CNT
054B                      M loop_ch
054B   3000               M                 movlw       HIGH freq0
054C   008A               M                 movwf       PCLATH
054D   3053               M                 movlw       LOW freq0
054E   0721               M                 addwf       CNT,w
054F   3000               M                 movlw       HIGH freq0
0550   224E               M                 call        checkc
0551   2053               M                 call        freq0
0552   3A00               M                 xorlw       0x00
0553   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0554   2D58               M                 goto        end_mes
0555   273F               M                 call        senddata
0556   0AA1               M                 incf        CNT, f
0557   2D4B               M                 goto        loop_ch
0558                      M end_mes
0558                      M exit
0558   0008           01090                 return
                      01091 
0559                  01092 sfreq1
                      01093                 PROGFREQ    LSB1,MSB1,freq1,DIVH1,DIVL1,UNIT1
  0000                    M                 local       exit
0559   3043               M                 movlw       (LSB1 & 0xFF00)>>8
055A   00FA               M                 movwf       LSBH
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

055B   3025               M                 movlw       (LSB1 & 0x00FF)
055C   00FB               M                 movwf       LSBL
055D   3040               M                 movlw       (MSB1 & 0xFF00)>>8
055E   00F8               M                 movwf       MSBH
055F   3000               M                 movlw       (MSB1 & 0x00FF)
0560   00F9               M                 movwf       MSBL
0561   301E               M                 movlw       DIVH1
0562   00E5               M                 movwf       DIVH
0563   30E2               M                 movlw       DIVL1
0564   00EF               M                 movwf       DIVL
0565   158A 2124          M                 lcall       ConfigureAD9833
0567   306D               M                 movlw       UNIT1
0568   00A5               M                 movwf       UNIT
0569   0827               M                 movfw       WRITEF      ; Check if to write frequency
056A   1903               M                 skpnz
056B   2D7A               M                 goto        exit
                          M                 WRITELN     freq1
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
056C   01A1               M                 clrf        CNT
056D                      M loop_ch
056D   3000               M                 movlw       HIGH freq1
056E   008A               M                 movwf       PCLATH
056F   305E               M                 movlw       LOW freq1
0570   0721               M                 addwf       CNT,w
0571   3000               M                 movlw       HIGH freq1
0572   224E               M                 call        checkc
0573   205E               M                 call        freq1
0574   3A00               M                 xorlw       0x00
0575   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0576   2D7A               M                 goto        end_mes
0577   273F               M                 call        senddata
0578   0AA1               M                 incf        CNT, f
0579   2D6D               M                 goto        loop_ch
057A                      M end_mes
057A                      M exit
057A   0008           01094                 return
                      01095 
057B                  01096 sfreq2
                      01097                 PROGFREQ    LSB2,MSB2,freq2,DIVH2,DIVL2,UNIT2
  0000                    M                 local       exit
057B   3048               M                 movlw       (LSB2 & 0xFF00)>>8
057C   00FA               M                 movwf       LSBH
057D   3063               M                 movlw       (LSB2 & 0x00FF)
057E   00FB               M                 movwf       LSBL
057F   3040               M                 movlw       (MSB2 & 0xFF00)>>8
0580   00F8               M                 movwf       MSBH
0581   3000               M                 movlw       (MSB2 & 0x00FF)
0582   00F9               M                 movwf       MSBL
0583   3052               M                 movlw       DIVH2
0584   00E5               M                 movwf       DIVH
0585   305B               M                 movlw       DIVL2
0586   00EF               M                 movwf       DIVL
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0587   158A 2124          M                 lcall       ConfigureAD9833
0589   30E4               M                 movlw       UNIT2
058A   00A5               M                 movwf       UNIT
058B   0827               M                 movfw       WRITEF      ; Check if to write frequency
058C   1903               M                 skpnz
058D   2D9C               M                 goto        exit
                          M                 WRITELN     freq2
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
058E   01A1               M                 clrf        CNT
058F                      M loop_ch
058F   3000               M                 movlw       HIGH freq2
0590   008A               M                 movwf       PCLATH
0591   3069               M                 movlw       LOW freq2
0592   0721               M                 addwf       CNT,w
0593   3000               M                 movlw       HIGH freq2
0594   224E               M                 call        checkc
0595   2069               M                 call        freq2
0596   3A00               M                 xorlw       0x00
0597   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0598   2D9C               M                 goto        end_mes
0599   273F               M                 call        senddata
059A   0AA1               M                 incf        CNT, f
059B   2D8F               M                 goto        loop_ch
059C                      M end_mes
059C                      M exit
059C   0008           01098                 return
                      01099 
059D                  01100 sfreq3
                      01101                 PROGFREQ    LSB3,MSB3,freq3,DIVH3,DIVL3,UNIT3
  0000                    M                 local       exit
059D   3054               M                 movlw       (LSB3 & 0xFF00)>>8
059E   00FA               M                 movwf       LSBH
059F   30F8               M                 movlw       (LSB3 & 0x00FF)
05A0   00FB               M                 movwf       LSBL
05A1   3040               M                 movlw       (MSB3 & 0xFF00)>>8
05A2   00F8               M                 movwf       MSBH
05A3   3000               M                 movlw       (MSB3 & 0x00FF)
05A4   00F9               M                 movwf       MSBL
05A5   3000               M                 movlw       DIVH3
05A6   00E5               M                 movwf       DIVH
05A7   3035               M                 movlw       DIVL3
05A8   00EF               M                 movwf       DIVL
05A9   158A 2124          M                 lcall       ConfigureAD9833
05AB   30E4               M                 movlw       UNIT3
05AC   00A5               M                 movwf       UNIT
05AD   0827               M                 movfw       WRITEF      ; Check if to write frequency
05AE   1903               M                 skpnz
05AF   2DBE               M                 goto        exit
                          M                 WRITELN     freq3
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
05B0   01A1               M                 clrf        CNT
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05B1                      M loop_ch
05B1   3000               M                 movlw       HIGH freq3
05B2   008A               M                 movwf       PCLATH
05B3   3075               M                 movlw       LOW freq3
05B4   0721               M                 addwf       CNT,w
05B5   3000               M                 movlw       HIGH freq3
05B6   224E               M                 call        checkc
05B7   2075               M                 call        freq3
05B8   3A00               M                 xorlw       0x00
05B9   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
05BA   2DBE               M                 goto        end_mes
05BB   273F               M                 call        senddata
05BC   0AA1               M                 incf        CNT, f
05BD   2DB1               M                 goto        loop_ch
05BE                      M end_mes
05BE                      M exit
05BE   0008           01102                 return
                      01103 
05BF                  01104 sfreq4
                      01105                 PROGFREQ    LSB4,MSB4,freq4,DIVH4,DIVL4,UNIT4
  0000                    M                 local       exit
05BF   3069               M                 movlw       (LSB4 & 0xFF00)>>8
05C0   00FA               M                 movwf       LSBH
05C1   30F0               M                 movlw       (LSB4 & 0x00FF)
05C2   00FB               M                 movwf       LSBL
05C3   3040               M                 movlw       (MSB4 & 0xFF00)>>8
05C4   00F8               M                 movwf       MSBH
05C5   3000               M                 movlw       (MSB4 & 0x00FF)
05C6   00F9               M                 movwf       MSBL
05C7   3000               M                 movlw       DIVH4
05C8   00E5               M                 movwf       DIVH
05C9   3069               M                 movlw       DIVL4
05CA   00EF               M                 movwf       DIVL
05CB   158A 2124          M                 lcall       ConfigureAD9833
05CD   30E4               M                 movlw       UNIT4
05CE   00A5               M                 movwf       UNIT
05CF   0827               M                 movfw       WRITEF      ; Check if to write frequency
05D0   1903               M                 skpnz
05D1   2DE0               M                 goto        exit
                          M                 WRITELN     freq4
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
05D2   01A1               M                 clrf        CNT
05D3                      M loop_ch
05D3   3000               M                 movlw       HIGH freq4
05D4   008A               M                 movwf       PCLATH
05D5   3081               M                 movlw       LOW freq4
05D6   0721               M                 addwf       CNT,w
05D7   3000               M                 movlw       HIGH freq4
05D8   224E               M                 call        checkc
05D9   2081               M                 call        freq4
05DA   3A00               M                 xorlw       0x00
05DB   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05DC   2DE0               M                 goto        end_mes
05DD   273F               M                 call        senddata
05DE   0AA1               M                 incf        CNT, f
05DF   2DD3               M                 goto        loop_ch
05E0                      M end_mes
05E0                      M exit
05E0   0008           01106                 return
                      01107 
05E1                  01108 sfreq5
                      01109                 PROGFREQ    LSB5,MSB5,freq5,DIVH5,DIVL5,UNIT5
  0000                    M                 local       exit
05E1   3053               M                 movlw       (LSB5 & 0xFF00)>>8
05E2   00FA               M                 movwf       LSBH
05E3   30E0               M                 movlw       (LSB5 & 0x00FF)
05E4   00FB               M                 movwf       LSBL
05E5   3040               M                 movlw       (MSB5 & 0xFF00)>>8
05E6   00F8               M                 movwf       MSBH
05E7   3001               M                 movlw       (MSB5 & 0x00FF)
05E8   00F9               M                 movwf       MSBL
05E9   3000               M                 movlw       DIVH5
05EA   00E5               M                 movwf       DIVH
05EB   30D3               M                 movlw       DIVL5
05EC   00EF               M                 movwf       DIVL
05ED   158A 2124          M                 lcall       ConfigureAD9833
05EF   30E4               M                 movlw       UNIT5
05F0   00A5               M                 movwf       UNIT
05F1   0827               M                 movfw       WRITEF      ; Check if to write frequency
05F2   1903               M                 skpnz
05F3   2E02               M                 goto        exit
                          M                 WRITELN     freq5
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
05F4   01A1               M                 clrf        CNT
05F5                      M loop_ch
05F5   3000               M                 movlw       HIGH freq5
05F6   008A               M                 movwf       PCLATH
05F7   308C               M                 movlw       LOW freq5
05F8   0721               M                 addwf       CNT,w
05F9   3000               M                 movlw       HIGH freq5
05FA   224E               M                 call        checkc
05FB   208C               M                 call        freq5
05FC   3A00               M                 xorlw       0x00
05FD   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
05FE   2E02               M                 goto        end_mes
05FF   273F               M                 call        senddata
0600   0AA1               M                 incf        CNT, f
0601   2DF5               M                 goto        loop_ch
0602                      M end_mes
0602                      M exit
0602   0008           01110                 return
                      01111 
0603                  01112 sfreq6
                      01113                 PROGFREQ    LSB6,MSB6,freq6,DIVH6,DIVL6,UNIT6
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local       exit
0603   3051               M                 movlw       (LSB6 & 0xFF00)>>8
0604   00FA               M                 movwf       LSBH
0605   30B0               M                 movlw       (LSB6 & 0x00FF)
0606   00FB               M                 movwf       LSBL
0607   3040               M                 movlw       (MSB6 & 0xFF00)>>8
0608   00F8               M                 movwf       MSBH
0609   3003               M                 movlw       (MSB6 & 0x00FF)
060A   00F9               M                 movwf       MSBL
060B   3002               M                 movlw       DIVH6
060C   00E5               M                 movwf       DIVH
060D   300F               M                 movlw       DIVL6
060E   00EF               M                 movwf       DIVL
060F   158A 2124          M                 lcall       ConfigureAD9833
0611   30E4               M                 movlw       UNIT6
0612   00A5               M                 movwf       UNIT
0613   0827               M                 movfw       WRITEF      ; Check if to write frequency
0614   1903               M                 skpnz
0615   2E24               M                 goto        exit
                          M                 WRITELN     freq6
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0616   01A1               M                 clrf        CNT
0617                      M loop_ch
0617   3000               M                 movlw       HIGH freq6
0618   008A               M                 movwf       PCLATH
0619   3097               M                 movlw       LOW freq6
061A   0721               M                 addwf       CNT,w
061B   3000               M                 movlw       HIGH freq6
061C   224E               M                 call        checkc
061D   2097               M                 call        freq6
061E   3A00               M                 xorlw       0x00
061F   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0620   2E24               M                 goto        end_mes
0621   273F               M                 call        senddata
0622   0AA1               M                 incf        CNT, f
0623   2E17               M                 goto        loop_ch
0624                      M end_mes
0624                      M exit
0624   0008           01114                 return
                      01115 
0625                  01116 sfreq7
                      01117                 PROGFREQ    LSB7,MSB7,freq7,DIVH7,DIVL7,UNIT7
  0000                    M                 local       exit
0625   3063               M                 movlw       (LSB7 & 0xFF00)>>8
0626   00FA               M                 movwf       LSBH
0627   3060               M                 movlw       (LSB7 & 0x00FF)
0628   00FB               M                 movwf       LSBL
0629   3040               M                 movlw       (MSB7 & 0xFF00)>>8
062A   00F8               M                 movwf       MSBH
062B   3006               M                 movlw       (MSB7 & 0x00FF)
062C   00F9               M                 movwf       MSBL
062D   3004               M                 movlw       DIVH7
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

062E   00E5               M                 movwf       DIVH
062F   301E               M                 movlw       DIVL7
0630   00EF               M                 movwf       DIVL
0631   158A 2124          M                 lcall       ConfigureAD9833
0633   30E4               M                 movlw       UNIT7
0634   00A5               M                 movwf       UNIT
0635   0827               M                 movfw       WRITEF      ; Check if to write frequency
0636   1903               M                 skpnz
0637   2E46               M                 goto        exit
                          M                 WRITELN     freq7
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
0638   01A1               M                 clrf        CNT
0639                      M loop_ch
0639   3000               M                 movlw       HIGH freq7
063A   008A               M                 movwf       PCLATH
063B   30A2               M                 movlw       LOW freq7
063C   0721               M                 addwf       CNT,w
063D   3000               M                 movlw       HIGH freq7
063E   224E               M                 call        checkc
063F   20A2               M                 call        freq7
0640   3A00               M                 xorlw       0x00
0641   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0642   2E46               M                 goto        end_mes
0643   273F               M                 call        senddata
0644   0AA1               M                 incf        CNT, f
0645   2E39               M                 goto        loop_ch
0646                      M end_mes
0646                      M exit
0646   0008           01118                 return
                      01119 
0647                  01120 sfreq8
                      01121                 PROGFREQ    LSB8,MSB8,freq8,DIVH8,DIVL8,UNIT8
  0000                    M                 local       exit
0647   3046               M                 movlw       (LSB8 & 0xFF00)>>8
0648   00FA               M                 movwf       LSBH
0649   30C0               M                 movlw       (LSB8 & 0x00FF)
064A   00FB               M                 movwf       LSBL
064B   3040               M                 movlw       (MSB8 & 0xFF00)>>8
064C   00F8               M                 movwf       MSBH
064D   300D               M                 movlw       (MSB8 & 0x00FF)
064E   00F9               M                 movwf       MSBL
064F   3008               M                 movlw       DIVH8
0650   00E5               M                 movwf       DIVH
0651   303C               M                 movlw       DIVL8
0652   00EF               M                 movwf       DIVL
0653   158A 2124          M                 lcall       ConfigureAD9833
0655   30E4               M                 movlw       UNIT8
0656   00A5               M                 movwf       UNIT
0657   0827               M                 movfw       WRITEF      ; Check if to write frequency
0658   1903               M                 skpnz
0659   2E68               M                 goto        exit
                          M                 WRITELN     freq8
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
065A   01A1               M                 clrf        CNT
065B                      M loop_ch
065B   3000               M                 movlw       HIGH freq8
065C   008A               M                 movwf       PCLATH
065D   30AE               M                 movlw       LOW freq8
065E   0721               M                 addwf       CNT,w
065F   3000               M                 movlw       HIGH freq8
0660   224E               M                 call        checkc
0661   20AE               M                 call        freq8
0662   3A00               M                 xorlw       0x00
0663   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0664   2E68               M                 goto        end_mes
0665   273F               M                 call        senddata
0666   0AA1               M                 incf        CNT, f
0667   2E5B               M                 goto        loop_ch
0668                      M end_mes
0668                      M exit
0668   0008           01122                 return
                      01123 
0669                  01124 sfreq9
                      01125                 PROGFREQ    LSB9,MSB9,freq9,DIVH9,DIVL9,UNIT9
  0000                    M                 local       exit
0669   3070               M                 movlw       (LSB9 & 0xFF00)>>8
066A   00FA               M                 movwf       LSBH
066B   30E0               M                 movlw       (LSB9 & 0x00FF)
066C   00FB               M                 movwf       LSBL
066D   3040               M                 movlw       (MSB9 & 0xFF00)>>8
066E   00F8               M                 movwf       MSBH
066F   3020               M                 movlw       (MSB9 & 0x00FF)
0670   00F9               M                 movwf       MSBL
0671   3016               M                 movlw       DIVH9
0672   00E5               M                 movwf       DIVH
0673   30A6               M                 movlw       DIVL9
0674   00EF               M                 movwf       DIVL
0675   158A 2124          M                 lcall       ConfigureAD9833
0677   30E4               M                 movlw       UNIT9
0678   00A5               M                 movwf       UNIT
0679   0827               M                 movfw       WRITEF      ; Check if to write frequency
067A   1903               M                 skpnz
067B   2E8A               M                 goto        exit
                          M                 WRITELN     freq9
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
067C   01A1               M                 clrf        CNT
067D                      M loop_ch
067D   3000               M                 movlw       HIGH freq9
067E   008A               M                 movwf       PCLATH
067F   30BA               M                 movlw       LOW freq9
0680   0721               M                 addwf       CNT,w
0681   3000               M                 movlw       HIGH freq9
0682   224E               M                 call        checkc
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0683   20BA               M                 call        freq9
0684   3A00               M                 xorlw       0x00
0685   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
0686   2E8A               M                 goto        end_mes
0687   273F               M                 call        senddata
0688   0AA1               M                 incf        CNT, f
0689   2E7D               M                 goto        loop_ch
068A                      M end_mes
068A                      M exit
068A   0008           01126                 return
                      01127 
068B                  01128 sfreq10
                      01129                 PROGFREQ    LSB10,MSB10,freq10,DIVH10,DIVL10,UNIT10
  0000                    M                 local       exit
068B   3061               M                 movlw       (LSB10 & 0xFF00)>>8
068C   00FA               M                 movwf       LSBH
068D   30C0               M                 movlw       (LSB10 & 0x00FF)
068E   00FB               M                 movwf       LSBL
068F   3040               M                 movlw       (MSB10 & 0xFF00)>>8
0690   00F8               M                 movwf       MSBH
0691   3041               M                 movlw       (MSB10 & 0x00FF)
0692   00F9               M                 movwf       MSBL
0693   3039               M                 movlw       DIVH10
0694   00E5               M                 movwf       DIVH
0695   30A5               M                 movlw       DIVL10
0696   00EF               M                 movwf       DIVL
0697   158A 2124          M                 lcall       ConfigureAD9833
0699   30E4               M                 movlw       UNIT10
069A   00A5               M                 movwf       UNIT
069B   0827               M                 movfw       WRITEF      ; Check if to write frequency
069C   1903               M                 skpnz
069D   2EAC               M                 goto        exit
                          M                 WRITELN     freq10
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
069E   01A1               M                 clrf        CNT
069F                      M loop_ch
069F   3000               M                 movlw       HIGH freq10
06A0   008A               M                 movwf       PCLATH
06A1   30C6               M                 movlw       LOW freq10
06A2   0721               M                 addwf       CNT,w
06A3   3000               M                 movlw       HIGH freq10
06A4   224E               M                 call        checkc
06A5   20C6               M                 call        freq10
06A6   3A00               M                 xorlw       0x00
06A7   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
06A8   2EAC               M                 goto        end_mes
06A9   273F               M                 call        senddata
06AA   0AA1               M                 incf        CNT, f
06AB   2E9F               M                 goto        loop_ch
06AC                      M end_mes
06AC                      M exit
06AC   0008           01130                 return
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01131 
06AD                  01132 sfreq11
06AD   300B           01133                 movlw       .11
06AE   00FC           01134                 movwf       FREQ
                      01135                 PROGFREQ    LSB11,MSB11,freq11,DIVH11,DIVL11,UNIT11
  0000                    M                 local       exit
06AF   3043               M                 movlw       (LSB11 & 0xFF00)>>8
06B0   00FA               M                 movwf       LSBH
06B1   3080               M                 movlw       (LSB11 & 0x00FF)
06B2   00FB               M                 movwf       LSBL
06B3   3040               M                 movlw       (MSB11 & 0xFF00)>>8
06B4   00F8               M                 movwf       MSBH
06B5   3083               M                 movlw       (MSB11 & 0x00FF)
06B6   00F9               M                 movwf       MSBL
06B7   3094               M                 movlw       DIVH11
06B8   00E5               M                 movwf       DIVH
06B9   303D               M                 movlw       DIVL11
06BA   00EF               M                 movwf       DIVL
06BB   158A 2124          M                 lcall       ConfigureAD9833
06BD   30E4               M                 movlw       UNIT11
06BE   00A5               M                 movwf       UNIT
06BF   0827               M                 movfw       WRITEF      ; Check if to write frequency
06C0   1903               M                 skpnz
06C1   2ED0               M                 goto        exit
                          M                 WRITELN     freq11
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
06C2   01A1               M                 clrf        CNT
06C3                      M loop_ch
06C3   3000               M                 movlw       HIGH freq11
06C4   008A               M                 movwf       PCLATH
06C5   30D3               M                 movlw       LOW freq11
06C6   0721               M                 addwf       CNT,w
06C7   3000               M                 movlw       HIGH freq11
06C8   224E               M                 call        checkc
06C9   20D3               M                 call        freq11
06CA   3A00               M                 xorlw       0x00
06CB   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
06CC   2ED0               M                 goto        end_mes
06CD   273F               M                 call        senddata
06CE   0AA1               M                 incf        CNT, f
06CF   2EC3               M                 goto        loop_ch
06D0                      M end_mes
06D0                      M exit
06D0   0008           01136                 return
                      01137 
                      01138 
06D1   1283 1303      01139 StartReg        BANKSEL     PORTFSYNC
06D3   1207           01140                 bcf         PORTFSYNC,FSYNC
06D4   0008           01141                 return
                      01142 
06D5   1283 1303      01143 StopReg         BANKSEL     PORTFSYNC
06D7   1607           01144                 bsf         PORTFSYNC,FSYNC
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06D8   0008           01145                 return
                      01146 
06D9                  01147 showmeas
                      01148                 WRITELN     measuring
  0000                    M                 local       loop_ch
  0000                    M                 local       end_mes
06D9   01A1               M                 clrf        CNT
06DA                      M loop_ch
06DA   3001               M                 movlw       HIGH measuring
06DB   008A               M                 movwf       PCLATH
06DC   30C9               M                 movlw       LOW measuring
06DD   0721               M                 addwf       CNT,w
06DE   3001               M                 movlw       HIGH measuring
06DF   224E               M                 call        checkc
06E0   21C9               M                 call        measuring
06E1   3A00               M                 xorlw       0x00
06E2   1903               M                 btfsc       STATUS,Z        ; Test if the character is a zero
06E3   2EE7               M                 goto        end_mes
06E4   273F               M                 call        senddata
06E5   0AA1               M                 incf        CNT, f
06E6   2EDA               M                 goto        loop_ch
06E7                      M end_mes
06E7   0008           01149                 return
                      01150 
                      01151 ; *****************************************************************************
                      01152 ; Write a 24-bit number contained in bin to bin+2 (big endian) on the LCD
                      01153 ; Use a fixed decimal point format, do not write the last 4 digits:
                      01154 ; XXX.XXX____
                      01155 ; (where ____ represent the figures that are ignored).
                      01156 ; For instance 0x12345678 yields 305419896 that is truncated as 30.541 (TOCHECK)
                      01157 ; *****************************************************************************
                      01158 
06E8   390F           01159 Write4          andlw       0x0F
06E9   1903           01160                 btfsc       STATUS,Z
06EA   1860           01161                 btfsc       NOZ,0
06EB   2703           01162                 call        WriteNumber8
06EC   0008           01163                 return
                      01164 
06ED                  01165 WriteNumber24
06ED   01E0           01166                 clrf        NOZ
06EE   158A 2000      01167                 lcall       b2bcd
06F0   118A 2EF2      01168                 lgoto       $+1
                      01169                 WRITE2DIGITS bcd
06F2   0E50               M                 swapf       bcd,w
06F3   26E8               M                 call        Write4
06F4   0850               M                 movfw       bcd
06F5   26E8               M                 call        Write4
06F6   0E51           01170                 swapf       bcd+1,w
06F7   390F           01171                 andlw       0x0F
06F8   2703           01172                 call        WriteNumber8
06F9   302E           01173                 movlw       '.'
06FA   273F           01174                 call        sendchar    ; Send the channel number
06FB   0851           01175                 movfw       bcd+1
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06FC   390F           01176                 andlw       0x0F
06FD   2703           01177                 call        WriteNumber8
                      01178                 WRITE2DIGITS bcd+2
06FE   0E52               M                 swapf       bcd+2,w
06FF   26E8               M                 call        Write4
0700   0852               M                 movfw       bcd+2
0701   26E8               M                 call        Write4
                      01179                 ;WRITE2DIGITS bcd+3
                      01180                 ;WRITE2DIGITS bcd+4     ; Those figures are not significative
0702   0008           01181                 return
                      01182 
                      01183 ; *****************************************************************************
                      01184 ;               LCD Subroutines
                      01185 ; *****************************************************************************
                      01186 
                      01187                 ; Print the 8-bit number in w
0703   1460           01188 WriteNumber8    bsf         NOZ,0
0704   1283 1303      01189                 BANKSEL     TMP_1
0706   00AA           01190                 movwf       TMP_1           ; Save the w register in memory
0707   30FF           01191                 movlw       -1
0708   00AB           01192                 movwf       HND
0709   082A           01193                 movfw       TMP_1
070A   3E9C           01194 sub_hnd         addlw       -0x64           ; Subtract 100(10)
070B   0AAB           01195                 incf        HND, f          ; Hundreds
070C   1803           01196                 btfsc       STATUS, C       ; Verify if the result is negative
070D   2F0A           01197                 goto        sub_hnd
070E   3E64           01198                 addlw       0x64            ; Add 100(b10) (to compensate the
                      01199                                             ; last subtraction)
070F   00AA           01200                 movwf       TMP_1           ; Save the w register in memory
0710   30FF           01201                 movlw       -1
0711   00AC           01202                 movwf       DEC
0712   082A           01203                 movfw       TMP_1
0713   3EF6           01204 sub_dec         addlw       -0xA            ; Subtract 10(base10)
0714   0AAC           01205                 incf        DEC, f
0715   1803           01206                 btfsc       STATUS, C       ; Verify if the result is negative
0716   2F13           01207                 goto        sub_dec
0717   3E0A           01208                 addlw       0x0A            ; Add 10(base10) (to compensate the
                      01209                                             ; last subtraction)
0718   00AD           01210                 movwf       UNT             ; Save the units
0719   102A           01211                 bcf         TMP_1,0         ; Flag: avoid unnecessary zeros
071A   082B           01212                 movfw       HND             ; Send the hundreds
071B   182A           01213                 btfsc       TMP_1, 0        ; Force to write all numbers
071C   2F1F           01214                 goto        force_HND
071D   1903           01215                 btfsc       STATUS, Z       ; Skip if necessary
071E   2F22           01216                 goto        skip_HND
071F   3E30           01217 force_HND       addlw       '0'             ; Transform it in ASCII
0720   273F           01218                 call        senddata
0721   142A           01219                 bsf         TMP_1, 0        ; Force to write successive zeros
0722   082C           01220 skip_HND        movfw       DEC             ; Send the tenths
0723   182A           01221                 btfsc       TMP_1, 0        ; Force to write all numbers
0724   2F27           01222                 goto        force_DEC
0725   1903           01223                 btfsc       STATUS, Z       ; Skip if necessary
0726   2F2A           01224                 goto        skip_DEC
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0727   3E30           01225 force_DEC       addlw       '0'             ; Transform it in ASCII
0728   273F           01226                 call        senddata
0729   142A           01227                 bsf         TMP_1, 0
072A   082D           01228 skip_DEC        movfw       UNT             ; Send the units (always written)
072B   3E30           01229                 addlw       '0'             ; Transform it in ASCII
072C   2F3F           01230                 goto        senddata
                      01231 
                      01232 ; Init the display (8 bit mode)
072D   3030           01233 init            movlw       0x30
072E   118A 2F44      01234                 lgoto       sendcommand
                      01235 
0730   3002           01236 functionset     movlw       0x02        ; Will be interpreted as nibble mode
                      01237                                         ; the first nibble will be ignored
                      01238                                         ; the second one will be interpreted
                      01239                                         ; as 0x20 if the LCD has just been
                      01240                                         ; switched on.
0731   118A 2744      01241                 lcall       sendcommand
0733   3028           01242 functionset2    movlw       0x28            ; Two lines display setup
0734   2F44           01243                 goto        sendcommand
                      01244 
                      01245                 ; Send the command in w to the display LCD configured in the
                      01246                 ; nibble mode
0735   1283 1303      01247 sendbyte        BANKSEL     DATALCD
0737   00A0           01248                 movwf       TMP             ; Store command temporarily in TMP
0738   27BE           01249                 call        portnibble
0739   27B8           01250                 call        pulse_e         ; Send the first half of the command
073A   0E20           01251                 swapf       TMP,w           ; swap nibbles of TMP, result in w
073B   27BE           01252                 call        portnibble
073C   27B8           01253                 call        pulse_e         ; Send the second half of the command
073D   2F97           01254                 goto        busywait
                      01255 
                      01256                 ; Send a space to the display.
073E                  01257 sendspace
073E   3020           01258                 movlw       ' '
073F                  01259 sendchar        ; Send character/data to the display (RS=1)
073F   1283 1303      01260 senddata        BANKSEL     DATALCD
0741   1406           01261                 bsf         DATALCD,RS
0742   118A 2F47      01262                 lgoto       simplesend
                      01263 
                      01264                 ; Send a generic command to the display (RS=0)
0744                  01265 sendcommand
0744   1283 1303      01266                 BANKSEL     DATALCD
0746   1006           01267                 bcf         DATALCD,RS
0747   1086           01268 simplesend      bcf         DATALCD,RW
0748   118A 2F35      01269                 lgoto       sendbyte
                      01270 
                      01271                 ; Activate the display, cursor underline blinking
074A                  01272 displayon
074A   300C           01273                 movlw       0x0C             ; Display on,
074B   118A 2F44      01274                 lgoto       sendcommand
                      01275                 ;return
                      01276 
                      01277                 ; Clear the display
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

074D                  01278 displayclear
074D   3001           01279                 movlw       0x01
074E   118A 2F44      01280                 lgoto       sendcommand
                      01281 
                      01282                 ; Put the cursor at home
0750                  01283 displaychome
0750   3002           01284                 movlw       0x02
0751   118A 2F44      01285                 lgoto       sendcommand
                      01286 
0753   3010           01287 sendlinespaces  movlw       0x10
0754   00AA           01288                 movwf       TMP_1
0755   3020           01289 loopf           movlw       ' '
0756   273F           01290                 call        sendchar
0757   0BAA           01291                 decfsz      TMP_1,f
0758   2F55           01292                 goto        loopf
0759   0008           01293                 return
                      01294 
075A   118A 2750      01295 clear1stline    lcall       displaychome
075C   2753           01296                 call        sendlinespaces
075D   2F50           01297                 goto        displaychome
                      01298 
075E   118A 2762      01299 clear2ndline    lcall       display2line
0760   2753           01300                 call        sendlinespaces
0761   2F62           01301                 goto        display2line
                      01302 
0762                  01303 display2line
0762   3040           01304                 movlw       0x40
                      01305                 ; Set cursor address (passed in w)
0763                  01306 displayaddrset
0763   3880           01307                 iorlw       0x80
0764   118A 2F44      01308                 lgoto        sendcommand
                      01309 
                      01310 ; *****************************************************************************
                      01311 ;               Delay routines
                      01312 ; *****************************************************************************
                      01313 
                      01314 ; Most of the time, the PIC will be executing this routine. It checks for
                      01315 ; button presses and knob action here.
                      01316 
0766                  01317 activedelay
0766   1683 1303      01318                 BANKSEL     TRISA
0768   1605           01319                 bsf         TRISA,RA4
0769   1685           01320                 bsf         TRISA,RA5
076A   1283 1303      01321                 BANKSEL     LDR
076C   01A3           01322                 clrf        LDR
076D   087F           01323 @loop           movfw       CHVAL          ; Skip if a button is depressed.
076E   1D03           01324                 btfss       STATUS,Z
076F   0008           01325                 return
0770   0805           01326                 movfw       PORTA
0771   3910           01327                 andlw       b'00010000'
0772   00FE           01328                 movwf       BSENSE
0773   2792           01329                 call        shortdelay
0774   0805           01330                 movfw       PORTA
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0775   3910           01331                 andlw       b'00010000'
0776   067E           01332                 xorwf       BSENSE,w
0777   1903           01333                 btfsc       STATUS,Z
0778   2F85           01334                 goto        @cont
0779   1A05           01335 @change         btfsc       PORTA,RC4
077A   2F80           01336                 goto        @invpol
077B   1E85           01337                 btfss       PORTA,RC5
077C   0AFF           01338                 incf        CHVAL,f
077D   1A85           01339                 btfsc       PORTA,RC5
077E   03FF           01340                 decf        CHVAL,f
077F   0008           01341                 return                      ; Exit immediately
0780                  01342 @invpol
0780   1E85           01343                 btfss       PORTA,RC5
0781   03FF           01344                 decf        CHVAL,f
0782   1A85           01345                 btfsc       PORTA,RC5
0783   0AFF           01346                 incf        CHVAL,f
0784   0008           01347                 return
0785                  01348 @cont
0785   1283 1303      01349                 BANKSEL     LDR
0787   0BA3           01350                 decfsz      LDR,f
0788   2F6D           01351                 goto        @loop
0789   0008           01352                 return
                      01353 
078A                  01354 longdelay
078A   1283 1303      01355                 BANKSEL     LDR
078C   01A3           01356                 clrf        LDR
078D   2792           01357                 call        shortdelay
078E   2792           01358                 call        shortdelay
078F   0BA3           01359                 decfsz      LDR,f
0790   2F8D           01360                 goto        $-3
0791   0008           01361                 return
                      01362 
0792                  01363 shortdelay
0792   1283 1303      01364                 BANKSEL     SDR
0794   0BA2           01365                 decfsz      SDR,f
0795   2F94           01366                 goto        $-1
0796   0008           01367                 return
                      01368 
0797                  01369 busywait
0797   1683 1303      01370                 BANKSEL     TRISLCD
0799   01A0           01371                 clrf        TMP
079A   1786           01372                 bsf         TRISLCD, DATA4
079B   1706           01373                 bsf         TRISLCD, DATA5
079C   1686           01374                 bsf         TRISLCD, DATA6
079D   1606           01375                 bsf         TRISLCD, DATA7
079E   1283 1303      01376                 BANKSEL     DATALCD
07A0   1006           01377                 bcf         DATALCD, RS     ; RS to 0
07A1   1486           01378                 bsf         DATALCD, RW     ; RW to 1: Read
07A2   0000           01379                 nop
07A3   1506           01380                 bsf         DATALCD, E      ; Raise E line
07A4   1003           01381                 bcf         STATUS,C
07A5   1A06           01382                 btfsc       DATALCD, DATA7
07A6   1403           01383                 bsf         STATUS,C
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

07A7   1106           01384                 bcf         DATALCD, E
07A8   0000           01385                 nop
07A9   1506           01386                 bsf         DATALCD, E      ; Raise E line
07AA   0000           01387                 nop
07AB   1106           01388                 bcf         DATALCD, E
07AC   1803           01389                 btfsc       STATUS, C       ; Test the carry
07AD   2F97           01390                 goto        busywait        ; If busy, continue waiting
07AE   1683 1303      01391                 BANKSEL     TRISLCD
07B0   1386           01392                 bcf         TRISLCD, DATA4
07B1   1306           01393                 bcf         TRISLCD, DATA5
07B2   1286           01394                 bcf         TRISLCD, DATA6
07B3   1206           01395                 bcf         TRISLCD, DATA7
07B4   1283 1303      01396                 BANKSEL     DATALCD
07B6   1086           01397                 bcf         DATALCD, RW     ; RW to 1: Read
07B7   0008           01398                 return
                      01399 
07B8                  01400 pulse_e
07B8   1283 1303      01401                 BANKSEL     DATALCD
07BA   1506           01402                 bsf         DATALCD,E
07BB   0000           01403                 nop
07BC   1106           01404                 bcf         DATALCD,E
07BD   0008           01405                 return
                      01406 
                      01407                 ; Send the upper nibble in W into the data lines
07BE                  01408 portnibble
07BE   00A4           01409                 movwf       TMP1
07BF   1283 1303      01410                 BANKSEL     DATALCD
07C1   1386           01411                 bcf         DATALCD, DATA4
07C2   1306           01412                 bcf         DATALCD, DATA5
07C3   1286           01413                 bcf         DATALCD, DATA6
07C4   1206           01414                 bcf         DATALCD, DATA7
07C5   1A24           01415                 btfsc       TMP1, 4
07C6   1786           01416                 bsf         DATALCD, DATA4
07C7   1AA4           01417                 btfsc       TMP1, 5
07C8   1706           01418                 bsf         DATALCD, DATA5
07C9   1B24           01419                 btfsc       TMP1, 6
07CA   1686           01420                 bsf         DATALCD, DATA6
07CB   1BA4           01421                 btfsc       TMP1, 7
07CC   1606           01422                 bsf         DATALCD, DATA7
07CD   0008           01423                 return
                      01424 
                      01425 ; *****************************************************************************
                      01426 ; User-defined chars for the LCD display
                      01427 ; *****************************************************************************
                      01428 ; -----------------------------------------------------------------------------
                      01429 ; Second 2 k word page
                      01430 ; -----------------------------------------------------------------------------
                      01431 ; NOTE: Macros such as WRITELN can NOT be used directly from this code.
                      01432 ; -----------------------------------------------------------------------------
                      01433 
0800                  01434                 org         0x800
                      01435 
                      01436 ; *****************************************************************************
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01437 ; Convert 32-bit binary number at <bin> into a bcd number
                      01438 ; at <bcd>. Uses Mike Keitz's procedure for handling bcd
                      01439 ; adjust; Modified Microchip AN526 for 32-bits.
                      01440 ; http://www.piclist.com/tecHREF/microchip/math/radix/b2bp-32b10d.htm
                      01441 ; bin is the MSB, bin+3 is the LSB
                      01442 ; *****************************************************************************
                      01443 
0800                  01444 b2bcd
0800   3020           01445                 movlw       .32              ; 32-bits
0801   00D6           01446                 movwf       ii              ; make cycle counter
0802   01D0           01447                 clrf        bcd             ; clear result area
0803   01D1           01448                 clrf        bcd+1
0804   01D2           01449                 clrf        bcd+2
0805   01D3           01450                 clrf        bcd+3
0806   01D4           01451                 clrf        bcd+4
                      01452 
0807   3050           01453 b2bcd2          movlw       bcd             ; make pointer
0808   0084           01454                 movwf       fsr
0809   3005           01455                 movlw       5
080A   00D5           01456                 movwf       cnt
                      01457 
                      01458 ; Mike's routine:
                      01459 
080B   158A 280D      01460 b2bcd3          lgoto       $+1
080D   3033           01461                 movlw       0x33
080E   0780           01462                 addwf       indf,f          ; add to both nybbles
080F   1980           01463                 btfsc       indf,3          ; test if low result > 7
0810   39F0           01464                 andlw       0xf0            ; low result >7 so take the 3 out
0811   1B80           01465                 btfsc       indf,7          ; test if high result > 7
0812   390F           01466                 andlw       0x0f            ; high result > 7 so ok
0813   0280           01467                 subwf       indf,f          ; any results <= 7, subtract back
0814   0A84           01468                 incf        fsr,f           ; point to next
0815   0BD5           01469                 decfsz      cnt,f
0816   280B           01470                 goto        b2bcd3
0817   0DDA           01471                 rlf         bin+3,f         ; get another bit
0818   0DD9           01472                 rlf         bin+2,f
0819   0DD8           01473                 rlf         bin+1,f
081A   0DD7           01474                 rlf         bin+0,f
081B   0DD4           01475                 rlf         bcd+4,f         ; put it into bcd
081C   0DD3           01476                 rlf         bcd+3,f
081D   0DD2           01477                 rlf         bcd+2,f
081E   0DD1           01478                 rlf         bcd+1,f
081F   0DD0           01479                 rlf         bcd+0,f
0820   0BD6           01480                 decfsz      ii,f            ; all done?
0821   2807           01481                 goto        b2bcd2          ; no, loop
0822   0008           01482                 return                      ; yes
                      01483 
                      01484 
0823   118A 26D1      01485 ResetAD9833     lcall       StartReg
0825   3001           01486                 movlw       0x01            ; Control word write, reset
0826   158A 2202      01487                 lcall       WriteSPI
0828   3000           01488                 movlw       0x00
0829   158A 2202      01489                 lcall       WriteSPI        ; FREQ0 register write, 14 LSB
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

082B   118A 26D5      01490                 lcall       StopReg
082D   0008           01491                 return
                      01492 
                      01493 
                      01494 ; *****************************************************************************
                      01495 ;               Divide 32-bit over 16-bit operands
                      01496 ; http://www.piclist.com/techref/microchip/math/div/24by16.htm?key=
                      01497 ; divid3        is the LSB, divid0 is the MSB
                      01498 ; *****************************************************************************
                      01499 
082E   3020           01500 div_32_16       movlw       .32         ; 32-bit div_32_16 by 16-bit
082F   00D5           01501                 movwf       cnt
0830   01B6           01502                 clrf        remdrH      ; Clear remainder
0831   01B7           01503                 clrf        remdrL
                      01504 
0832   1003           01505 dvloop          clrc                    ; Set quotient bit to 0
                      01506                                         ; Shift left div_32_16nd and quotient
0833   0DB3           01507                 rlf         divid3,f    ; lsb
0834   0DB2           01508                 rlf         divid2,f
0835   0DB1           01509                 rlf         divid1,f
0836   0DB0           01510                 rlf         divid0,f    ; lsb into carry
0837   0DB7           01511                 rlf         remdrL,f    ; and then into partial remainder
0838   0DB6           01512                 rlf         remdrH,f
                      01513 
0839   1803           01514                 skpnc               ; Check for overflow
083A   2843           01515                 goto        subd
083B   0834           01516                 movfw       divisH  ; Compare partial remainder and divisor
083C   0236           01517                 subwf       remdrH,w
083D   1D03           01518                 skpz
083E   2841           01519                 goto        testgt  ; Not equal: test if remdrH is greater
083F   0835           01520                 movfw       divisL  ; High bytes equal: compare low bytes
0840   0237           01521                 subwf       remdrL,w
0841   1C03           01522 testgt          skpc                ; Carry set if remdr >= divis
0842   284A           01523                 goto        remrlt
                      01524 
0843   0835           01525 subd            movfw       divisL  ; Subtract divisor from part. remainder
0844   02B7           01526                 subwf       remdrL,f
0845   1C03           01527                 skpc                ; Test for borrow
                      01528 
0846   03B6           01529                 decf        remdrH,f    ; Subtract borrow
0847   0834           01530                 movfw       divisH
0848   02B6           01531                 subwf       remdrH,f
0849   1433           01532                 bsf         divid3,0    ; Set quotient bit to 1
                      01533                      ; Quotient replaces div_32_16nd which is lost
084A   0BD5           01534 remrlt          decfsz      cnt,f
084B   2832           01535                 goto        dvloop
084C   0008           01536                 return
                      01537 
                      01538 ; *****************************************************************************
                      01539 ;               Multiply 32-bit x 16-bit
                      01540 ; http://www.piclist.com/techref/microchip/math/mul/32x16-a.htm
                      01541 ; divid3        is the LSB, divid0 is the MSB
                      01542 ; *****************************************************************************
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01543 
                      01544 ;As a thank you for all the code, here is a 32x16 bit Mult.
                      01545 ;Unsigned 32 bit by 16 bit multiplication
                      01546 ;This routine will take aHH:aHL:aLH:aLL*bH:bL -> a6:a5:aHH:aHL:aLH:aLL
                      01547 
084D                  01548 mult_32_16:
                      01549 ; Begin rearrange code
084D   0000           01550                 nop
084E   0843           01551                 movfw       aHH
084F   00C5           01552                 movwf       a6
0850   0842           01553                 movfw       aHL
0851   00C4           01554                 movwf       a5
0852   0841           01555                 movfw       aLH
0853   00C3           01556                 movwf       aHH
0854   0840           01557                 movfw       aLL
0855   00C2           01558                 movwf       aHL
                      01559 ; End rearrange code
0856   01C1           01560                 clrf        aLH          ; clear partial product
0857   01C0           01561                 clrf        aLL
0858   0845           01562                 movfw       a6
0859   00CB           01563                 movwf       c4
085A   0844           01564                 movf        a5,W
085B   00CA           01565                 movwf       c3
085C   0843           01566                 movf        aHH,W
085D   00C9           01567                 movwf       c2
085E   0842           01568                 movf        aHL,W
085F   00C8           01569                 movwf       c1
                      01570 
0860   3008           01571                 movlw       0x08
0861   00CC           01572                 movwf       bitcnt
                      01573 
0862                  01574 LOOPUM3216A:
0862   0CC6           01575                 rrf         bL, F
0863   1803           01576                 btfsc       STATUS, C
0864   2874           01577                 goto        ALUM3216NAP
0865   0BCC           01578                 decfsz      bitcnt, F
0866   2862           01579                 goto        LOOPUM3216A
0867   00CC           01580                 movwf       bitcnt
                      01581 
0868                  01582 LOOPUM3216B:
0868   0CC7           01583                 rrf         bH, F
0869   1803           01584                 btfsc       STATUS, C
086A   2872           01585                 goto        BLUM3216NAP
086B   0BCC           01586                 decfsz      bitcnt, F
086C   2868           01587                 goto        LOOPUM3216B
                      01588 
086D   01C5           01589                 clrf        a6
086E   01C4           01590                 clrf        a5
086F   01C3           01591                 clrf        aHH
0870   01C2           01592                 clrf        aHL
0871   3400           01593                 retlw       0x00
                      01594 
0872                  01595 BLUM3216NAP:
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0872   1003           01596                 BCF         STATUS, C
0873   28A1           01597                 goto        BLUM3216NA
                      01598 
0874                  01599 ALUM3216NAP:
0874   1003           01600                 BCF         STATUS, C
0875   2887           01601                 goto        ALUM3216NA
                      01602 
0876                  01603 ALOOPUM3216:
0876   0CC6           01604                 rrf         bL, F
0877   1C03           01605                 btfss       STATUS, C
0878   2887           01606                 goto        ALUM3216NA
0879   0848           01607                 movf        c1,W
087A   07C2           01608                 addwf       aHL, F
087B   0849           01609                 movf        c2,W
087C   1803           01610                 btfsc       STATUS, C
087D   0F49           01611                 incfsz      c2,W
087E   07C3           01612                 addwf       aHH, F
087F   084A           01613                 movf        c3,W
0880   1803           01614                 btfsc       STATUS, C
0881   0F4A           01615                 incfsz      c3,W
0882   07C4           01616                 addwf       a5, F
0883   084B           01617                 movf        c4,W
0884   1803           01618                 btfsc       STATUS, C
0885   0F4B           01619                 incfsz      c4,W
0886   07C5           01620                 addwf       a6, F
                      01621 
0887                  01622 ALUM3216NA:
0887   0CC5           01623                 rrf         a6, F
0888   0CC4           01624                 rrf         a5, F
0889   0CC3           01625                 rrf         aHH, F
088A   0CC2           01626                 rrf         aHL, F
088B   0CC1           01627                 rrf         aLH, F
088C   0BCC           01628                 decfsz      bitcnt, f
088D   2876           01629                 goto        ALOOPUM3216
                      01630 
088E   3008           01631                 movlw       0x08
088F   00CC           01632                 movwf       bitcnt
                      01633 
0890                  01634 BLOOPUM3216:
0890   0CC7           01635                 rrf         bH, F
0891   1C03           01636                 btfss       STATUS, C
0892   28A1           01637                 goto        BLUM3216NA
0893   0848           01638                 movf        c1,W
0894   07C2           01639                 addwf       aHL, F
0895   0849           01640                 movf        c2,W
0896   1803           01641                 btfsc       STATUS, C
0897   0F49           01642                 incfsz      c2,W
0898   07C3           01643                 addwf       aHH, F
0899   084A           01644                 movf        c3,W
089A   1803           01645                 btfsc       STATUS, C
089B   0F4A           01646                 incfsz      c3,W
089C   07C4           01647                 addwf       a5, F
089D   084B           01648                 movf        c4,W
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

089E   1803           01649                 btfsc       STATUS, C
089F   0F4B           01650                 incfsz      c4,W
08A0   07C5           01651                 addwf       a6, F
                      01652 
08A1                  01653 BLUM3216NA
08A1   0CC5           01654                 rrf         a6, F
08A2   0CC4           01655                 rrf         a5, F
08A3   0CC3           01656                 rrf         aHH, F
08A4   0CC2           01657                 rrf         aHL, F
08A5   0CC1           01658                 rrf         aLH, F
08A6   0CC0           01659                 rrf         aLL, F
08A7   0BCC           01660                 decfsz      bitcnt, F
08A8   2890           01661                 goto        BLOOPUM3216
08A9   0000           01662                 nop
08AA   0008           01663                 return
                      01664 
                      01665 ; *****************************************************************************
                      01666 
                      01667 ; Define a special character for the DC symbol.
08AB                  01668 DefineChars
08AB   3040           01669                 movlw       0x40            ; Symbol for the DC voltage
08AC   118A 2744      01670                 lcall       sendcommand
08AE   3018           01671                 movlw       B'00011000'
08AF   118A 273F      01672                 lcall       senddata
08B1   3014           01673                 movlw       B'00010100'
08B2   118A 273F      01674                 lcall       senddata
08B4   3014           01675                 movlw       B'00010100'
08B5   118A 273F      01676                 lcall       senddata
08B7   301B           01677                 movlw       B'00011011'
08B8   118A 273F      01678                 lcall       senddata
08BA   3004           01679                 movlw       B'00000100'
08BB   118A 273F      01680                 lcall       senddata
08BD   3004           01681                 movlw       B'00000100'
08BE   118A 273F      01682                 lcall       senddata
08C0   3003           01683                 movlw       B'00000011'
08C1   118A 273F      01684                 lcall       senddata
08C3   3000           01685                 movlw       B'00000000'
08C4   118A 273F      01686                 lcall       senddata
08C6   0008           01687                 return
                      01688 
                      01689 ; Perform all the initialization functions when the system is switched on.
08C7   1683 1703      01690 InitAll         BANKSEL     ANSEL
08C9   0188           01691                 clrf        ANSEL
08CA   1683 1703      01692                 BANKSEL     ANSELH
08CC   0189           01693                 clrf        ANSELH
08CD   1283 1303      01694                 BANKSEL     PORTB
08CF   0186           01695                 clrf        PORTB
08D0   1683 1303      01696                 BANKSEL     TRISB
08D2   0186           01697                 clrf        TRISB
08D3   1283 1703      01698                 BANKSEL     WDTCON
08D5   1005           01699                 bcf         WDTCON,SWDTEN
08D6   1683 1303      01700                 BANKSEL     TRISCTRL
08D8   0186           01701                 clrf        TRISLCD         ; Display ports as outputs
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

08D9   1307           01702                 bcf         TRISCTRL,CTRLA
08DA   1007           01703                 bcf         TRISCTRL,CTRLB
08DB   1087           01704                 bcf         TRISCTRL,CTRLC
08DC   1787           01705                 bsf         TRISCTRL,VSYNC  ; Sync freq. as input
08DD   1785           01706                 bsf         TRISA,RA7       ; Button as input
08DE   1283 1303      01707                 BANKSEL     PORTA
08E0   158A 20FD      01708                 lcall       InitDisplay
08E2   118A 2253      01709                 lcall       Greetings
08E4   01FC           01710                 clrf        FREQ            ; Standard values for frequency
08E5   01BE           01711                 clrf        SOUNDOFF        ; Activate sound
08E6   3004           01712                 movlw       0x4
08E7   00FF           01713                 movwf       CHVAL           ; Force setting of AD9833
08E8   3006           01714                 movlw       DCVALUE_NO_DC   ; Standard value for DC (no DC)
08E9   00FD           01715                 movwf       DCVAL
08EA   118A 278A      01716                 lcall       longdelay
08EC   118A 278A      01717                 lcall       longdelay
08EE   118A 278A      01718                 lcall       longdelay
08F0   158A 21E9      01719                 lcall       ConfigureADC
08F2   158A 216B      01720                 lcall       MeasBattery
08F4   158A 220B      01721                 lcall       ConfigureSPI
08F6   158A 2023      01722                 lcall       ResetAD9833
08F8   118A 278A      01723                 lcall       longdelay
08FA   118A 278A      01724                 lcall       longdelay
08FC   0008           01725                 return
                      01726 
                      01727 ; Initialize the display when the circuit is switched on.
08FD                  01728 InitDisplay
08FD   118A 272D      01729                 lcall       init            ; Call three times the init
08FF   118A 278A      01730                 lcall       longdelay
0901   118A 272D      01731                 lcall       init
0903   118A 278A      01732                 lcall       longdelay
0905   118A 272D      01733                 lcall       init
0907   118A 278A      01734                 lcall       longdelay
0909   118A 2730      01735                 lcall       functionset
090B   118A 274A      01736                 lcall       displayon
090D   118A 278A      01737                 lcall       longdelay
090F   118A 2730      01738                 lcall       functionset
0911   118A 274A      01739                 lcall       displayon
0913   118A 278A      01740                 lcall       longdelay
0915   118A 2730      01741                 lcall       functionset
0917   118A 274A      01742                 lcall       displayon
0919   118A 274A      01743                 lcall       displayon
091B   118A 274A      01744                 lcall       displayon
091D   158A 20AB      01745                 lcall       DefineChars
091F   118A 274D      01746                 lcall       displayclear
0921   118A 2750      01747                 lcall       displaychome
0923   0008           01748                 return
                      01749 
                      01750 ; Configure the AD9833 to provide a given frequency and a sinusoidal signal.
0924                  01751 ConfigureAD9833
0924   118A 26D1      01752                 lcall       StartReg
0926   3021           01753                 movlw       0x21            ; Control word write, reset
0927   158A 2202      01754                 lcall       WriteSPI
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0929   3000           01755                 movlw       0x00
092A   158A 2202      01756                 lcall       WriteSPI        ; FREQ0 register write, 14 LSB
092C   087A           01757                 movfw       LSBH
092D   158A 2202      01758                 lcall       WriteSPI
092F   087B           01759                 movfw       LSBL
0930   158A 2202      01760                 lcall       WriteSPI        ; FREQ0 register write, 14 MSB
0932   0878           01761                 movfw       MSBH
0933   158A 2202      01762                 lcall       WriteSPI
0935   0879           01763                 movfw       MSBL
0936   158A 2202      01764                 lcall       WriteSPI
0938   30C0           01765                 movlw       0xC0            ; PHASE0 register write
0939   158A 2202      01766                 lcall       WriteSPI
093B   3000           01767                 movlw       0x00
093C   158A 2202      01768                 lcall       WriteSPI
093E   3020           01769                 movlw       0x20            ; 0x2000 sine, 0x2028 square
093F   158A 2202      01770                 lcall       WriteSPI        ; 0x2002 triangle
0941   3000           01771                 movlw       0x00            ; We want a sine wave.
0942   158A 2202      01772                 lcall       WriteSPI
0944   118A 26D5      01773                 lcall       StopReg
0946   0008           01774                 return
                      01775 
                      01776 ; Main state machine dispatcher
0947   158A 2949      01777 SelectState     lgoto       $+1
0949   3000           01778                 movlw       .0
094A   064E           01779                 xorwf       MENUSTATE,w
094B   1903           01780                 btfsc       STATUS,Z
094C   2961           01781                 goto        state1
094D   3001           01782                 movlw       .1
094E   064E           01783                 xorwf       MENUSTATE,w
094F   1903           01784                 btfsc       STATUS,Z
0950   2961           01785                 goto        state1
0951   3002           01786                 movlw       .2
0952   064E           01787                 xorwf       MENUSTATE,w
0953   1903           01788                 btfsc       STATUS,Z
0954   2963           01789                 goto        state2
0955   3003           01790                 movlw       .3
0956   064E           01791                 xorwf       MENUSTATE,w
0957   1903           01792                 btfsc       STATUS,Z
0958   2965           01793                 goto        state3
0959   3004           01794                 movlw       .4
095A   064E           01795                 xorwf       MENUSTATE,w
095B   1903           01796                 btfsc       STATUS,Z
095C   2967           01797                 goto        state4
095D   3005           01798                 movlw       .5
095E   064E           01799                 xorwf       MENUSTATE,w
095F   1903           01800                 btfsc       STATUS,Z
0960   2969           01801                 goto        state5
                      01802 
0961   158A 2AFD      01803 state1          lgoto       AutomaticCapM
0963   158A 2AAB      01804 state2          lgoto       ManualMeasESR
0965   118A 2C73      01805 state3          lgoto       ChooseDc
0967   118A 2C34      01806 state4          lgoto       ChooseSound
0969   158A 299F      01807 state5          lgoto       Diagnostic
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01808 
                      01809 ; Measure and show the battery voltage. Consider a voltage divider made by
                      01810 ; 47kohm + 22kohm resistances.
096B   1283 1303      01811 MeasBattery     BANKSEL     ADCON0
096D   151F           01812                 bsf         ADCON0,2    ; Input in channel 1
096E   118A 278A      01813                 lcall       longdelay
0970   118A 2393      01814                 lcall       readadc     ; Read the value
0972   118A 274D      01815                 lcall       displayclear
0974   111F           01816                 bcf         ADCON0,2    ; Input in channel 0
                      01817                 MOV16FF     aLH, aLL, STOREH, STOREL
0975   0876               M                 movfw       STOREH
0976   00C1               M                 movwf       aLH
0977   0877               M                 movfw       STOREL
0978   00C0               M                 movwf       aLL
0979   01C3           01818                 clrf        aHH
097A   01C2           01819                 clrf        aHL
097B   3009           01820                 movlw       high .2421  ; Magic number calculated for a voltage
097C   00C7           01821                 movwf       bH          ; divider composed by 47kohm + 22kohm
097D   3075           01822                 movlw       low .2421
097E   00C6           01823                 movwf       bL
097F   158A 204D      01824                 lcall       mult_32_16
                      01825                 MOV16FF     bin+0, bin+1, aHH, aHL
0981   0843               M                 movfw       aHH
0982   00D7               M                 movwf       bin+0
0983   0842               M                 movfw       aHL
0984   00D8               M                 movwf       bin+1
                      01826                 MOV16FF     bin+2, bin+3, aLH, aLL
0985   0841               M                 movfw       aLH
0986   00D9               M                 movwf       bin+2
0987   0840               M                 movfw       aLL
0988   00DA               M                 movwf       bin+3
0989   118A 2423      01827                 lcall       WriteBattery
098B   118A 2762      01828                 lcall       display2line
098D   118A 26ED      01829                 lcall       WriteNumber24
098F   118A 273E      01830                 lcall       sendspace
0991   3056           01831                 movlw       'V'
0992   118A 273F      01832                 lcall       sendchar
0994   3004           01833                 movlw       0x04            ; Check if the battery voltage
0995   02C3           01834                 subwf       aHH,f           ; is above 6.7 V (0x04 magic numb.
0996   1FC3           01835                 btfss       aHH,7           ; for the highest byte.
0997   299A           01836                 goto        batteryok
0998   118A 2A82      01837                 lgoto       LowBattery
                      01838 
099A                  01839 batteryok
099A   118A 278A      01840                 lcall       longdelay
099C   118A 278A      01841                 lcall       longdelay
099E   0008           01842                 return
                      01843 
                      01844 ; This is a diagnostic mode end of loop. Shows the values of A, B and C
                      01845 ; (writing separately the high byte and the low byte for each).
099F   3001           01846 Diagnostic      movlw       ACTIVE
09A0   00A7           01847                 movwf       WRITEF
09A1   01FF           01848 testloop        clrf        CHVAL
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09A2   118A 22C7      01849                 lcall       ReadA
09A4   118A 22D2      01850                 lcall       ReadB
09A6   118A 22DD      01851                 lcall       ReadC
09A8   158A 29AA      01852                 lgoto       $+1
09AA   087F           01853                 movfw       CHVAL           ; Update the DC value if needed
09AB   07FC           01854                 addwf       FREQ,f
09AC   087F           01855                 movfw       CHVAL
09AD   1D03           01856                 skpz
09AE   29B5           01857                 goto        changeFreq
09AF   158A 21BC      01858                 lcall       writeABC
09B1   1F85           01859                 btfss       PORTA,RA7   ; Check if the button is depressed.
09B2   2BC6           01860                 goto        Menu        ; If yes, go to the menu.
09B3   158A 29A1      01861                 lgoto       testloop
                      01862 
09B5   01FF           01863 changeFreq      clrf        CHVAL       ; Change the test frequency.
09B6   118A 274D      01864                 lcall       displayclear
09B8   118A 2220      01865                 lcall       SetFreq
09BA   158A 29A1      01866                 lgoto       testloop
                      01867 
09BC   118A 274D      01868 writeABC        lcall       displayclear
09BE   3041           01869                 movlw       'A'
09BF   118A 273F      01870                 lcall       senddata
09C1   0870           01871                 movfw       A_VH
09C2   118A 2703      01872                 lcall       WriteNumber8
09C4   302C           01873                 movlw       ','
09C5   118A 273F      01874                 lcall       senddata
09C7   0871           01875                 movfw       A_VL
09C8   118A 2703      01876                 lcall       WriteNumber8
09CA   118A 2762      01877                 lcall       display2line
09CC   3042           01878                 movlw       'B'
09CD   118A 273F      01879                 lcall       senddata
09CF   0872           01880                 movfw       B_VH
09D0   118A 2703      01881                 lcall       WriteNumber8
09D2   302C           01882                 movlw       ','
09D3   118A 273F      01883                 lcall       senddata
09D5   0873           01884                 movfw       B_VL
09D6   118A 2703      01885                 lcall       WriteNumber8
09D8   118A 273E      01886                 lcall       sendspace
09DA   3043           01887                 movlw       'C'
09DB   118A 273F      01888                 lcall       senddata
09DD   0874           01889                 movfw       C_VH
09DE   118A 2703      01890                 lcall       WriteNumber8
09E0   302C           01891                 movlw       ','
09E1   118A 273F      01892                 lcall       senddata
09E3   0875           01893                 movfw       C_VL
09E4   118A 2703      01894                 lcall       WriteNumber8
09E6   118A 273E      01895                 lcall       sendspace
09E8   0008           01896                 return
                      01897 
                      01898 ; Configure the ADC, read on A0.
09E9                  01899 ConfigureADC
09E9   1683 1303      01900                 BANKSEL     TRISA
09EB   1405           01901                 bsf         TRISA,0
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09EC   1505           01902                 bsf         TRISA,2
09ED   1585           01903                 bsf         TRISA,3
09EE   1683 1703      01904                 BANKSEL     ANSEL
09F0   1408           01905                 bsf         ANSEL,0     ; Use as A0 as an analog input.
09F1   1488           01906                 bsf         ANSEL,1     ; Use as A1 as an battery input.
09F2   1508           01907                 bsf         ANSEL,2
09F3   1588           01908                 bsf         ANSEL,3
09F4   1683 1303      01909                 BANKSEL     ADCON1
09F6   169F           01910                 bsf         ADCON1,VCFG1    ; Negative Vref on AN2
09F7   161F           01911                 bsf         ADCON1,VCFG0    ; Positive Vref on AN3
09F8   179F           01912                 bsf         ADCON1,ADFM ; Right justified ADC result.
09F9   1283 1303      01913                 BANKSEL     ADCON0
09FB   139F           01914                 bcf         ADCON0,7    ; Set Fosc/8 (ok for Fosc=4MHz)
09FC   171F           01915                 bsf         ADCON0,6
09FD   129F           01916                 bcf         ADCON0,5    ; Set input in channel 0.
09FE   121F           01917                 bcf         ADCON0,4
09FF   119F           01918                 bcf         ADCON0,3
0A00   111F           01919                 bcf         ADCON0,2
0A01   0008           01920                 return
                      01921 
                      01922 ; Write on the SPI bus
0A02   1283 1303      01923 WriteSPI        BANKSEL     SSPBUF
0A04   0093           01924                 movwf       SSPBUF
0A05   1683 1303      01925                 BANKSEL     SSPSTAT
0A07   1C14           01926                 btfss       SSPSTAT, BF
0A08   2A07           01927                 goto        $-1
0A09   0813           01928                 movfw       SSPBUF
0A0A   0008           01929                 return
                      01930 
                      01931 ; Configure SPI communication with AD9833
0A0B                  01932 ConfigureSPI
0A0B   1683 1303      01933                 BANKSEL     TRISC
0A0D   1187           01934                 bcf         TRISC,RC3
0A0E   1287           01935                 bcf         TRISC,RC5
0A0F   1207           01936                 bcf         TRISFSYNC,FSYNC
0A10   1683 1303      01937                 BANKSEL     SSPSTAT
0A12   0194           01938                 clrf        SSPSTAT
0A13   1714           01939                 bsf         SSPSTAT, CKE
0A14   1283 1303      01940                 BANKSEL     SSPCON
0A16   1014           01941                 bcf         SSPCON, SSPM0   ; Master SPI, clock Fosc/4
0A17   1094           01942                 bcf         SSPCON, SSPM1
0A18   1114           01943                 bcf         SSPCON, SSPM2
0A19   1194           01944                 bcf         SSPCON, SSPM3
0A1A   1614           01945                 bsf         SSPCON, CKP     ; Clock polarity, idle high
0A1B   1694           01946                 bsf         SSPCON, SSPEN   ; Serial port enable
0A1C   1314           01947                 bcf         SSPCON, SSPOV
0A1D   1394           01948                 bcf         SSPCON, WCOL
0A1E   0008           01949                 return
                      01950 
                      01951 ; Calculate the ESR in the current conditions.
                      01952 ; Result in milliohm contained in aHH, aHL, aLH and aLL
0A1F   087D           01953 CalcESR         movfw       DCVAL
0A20   3A06           01954                 xorlw       DCVALUE_NO_DC   ; Check if a DC is present
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A21   1903           01955                 btfsc       STATUS,Z
0A22   2A28           01956                 goto        directcalc  ; If no DC is present, continue
0A23   300E           01957                 movlw       0x0E        ; Put cursor in the top right corner
0A24   118A 2763      01958                 lcall        displayaddrset
0A26   118A 2310      01959                 lcall        WriteDC     ; Write the symbol +/-DC
0A28                  01960 directcalc      ; ESR=(B-C)/(A-B)*10
                      01961                 ; Transfer B in the high 16 bits of divid
                      01962                 MOV16FF     divid0, divid1, B_VH, B_VL
0A28   0872               M                 movfw       B_VH
0A29   00B0               M                 movwf       divid0
0A2A   0873               M                 movfw       B_VL
0A2B   00B1               M                 movwf       divid1
0A2C   01B2           01963                 clrf        divid2      ; Put 0 to divid2, divid3
0A2D   01B3           01964                 clrf        divid3
                      01965                 SUB16BIT    divid0, divid1, C_VH, C_VL  ; divid -= C
0A2E   0875               M                 movfw       C_VL
0A2F   02B1               M                 subwf       divid1,f
0A30   0874               M                 movfw       C_VH
0A31   1C03               M                 btfss       STATUS,C
0A32   0F74               M                 incfsz      C_VH,w      ; Adjust borrow if C=1
0A33   02B0               M                 subwf       divid0,f
                      01966                 MOV16FF     divisH, divisL, A_VH, A_VL  ; Transfer A in divis
0A34   0870               M                 movfw       A_VH
0A35   00B4               M                 movwf       divisH
0A36   0871               M                 movfw       A_VL
0A37   00B5               M                 movwf       divisL
                      01967                 SUB16BIT    divisH, divisL, B_VH, B_VL  ; divis -= B
0A38   0873               M                 movfw       B_VL
0A39   02B5               M                 subwf       divisL,f
0A3A   0872               M                 movfw       B_VH
0A3B   1C03               M                 btfss       STATUS,C
0A3C   0F72               M                 incfsz      B_VH,w      ; Adjust borrow if C=1
0A3D   02B4               M                 subwf       divisH,f
0A3E   158A 202E      01968                 lcall       div_32_16       ; Divide! Result in divid0,1,2,3.
                      01969                 MOV16FF     aHH,aHL,divid0,divid1 ; Multiply times 1525
0A40   0830               M                 movfw       divid0
0A41   00C3               M                 movwf       aHH
0A42   0831               M                 movfw       divid1
0A43   00C2               M                 movwf       aHL
                      01970                 MOV16FF     aLH,aLL,divid2,divid3
0A44   0832               M                 movfw       divid2
0A45   00C1               M                 movwf       aLH
0A46   0833               M                 movfw       divid3
0A47   00C0               M                 movwf       aLL
0A48   3005           01971                 movlw       0x5         ; Hi-byte of 1525
0A49   00C7           01972                 movwf       bH
0A4A   30F5           01973                 movlw       0xF5        ; Lo-byte of 1525
0A4B   00C6           01974                 movwf       bL
0A4C   158A 204D      01975                 lcall       mult_32_16
0A4E   0008           01976                 return   
                      01977 
                      01978 ; Calculate the capacitance from the data contained in A, B and C and the
                      01979 ; frequency (constants contained in DIVH and DIVL).
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01980 ; This is the formula to be calculated.
                      01981 ; Cap = sqrt((A-C)/(B-C)-1)/(2*pi*f*R)
                      01982 ; the constant (2*pi*f*R) is pre-calculated for each frequency and stored at
                      01983 ; DIVH:DIVL
                      01984 ; w at return contains an error code:
                      01985 ; 0x0 - all OK, the capacitance value is stored in CAP0, CAP1, CAP2, CAP3.
0A4F                  01986 CalcCap         MOV16FF     divid0, divid1, A_VH, A_VL  ; A-> 16 MSB divid
0A4F   0870               M                 movfw       A_VH
0A50   00B0               M                 movwf       divid0
0A51   0871               M                 movfw       A_VL
0A52   00B1               M                 movwf       divid1
0A53   01B2           01987                 clrf        divid2          ; Put 0 to divid2, divid3
0A54   01B3           01988                 clrf        divid3
                      01989                 SUB16BIT    divid0, divid1, C_VH, C_VL  ; divid -= C
0A55   0875               M                 movfw       C_VL
0A56   02B1               M                 subwf       divid1,f
0A57   0874               M                 movfw       C_VH
0A58   1C03               M                 btfss       STATUS,C
0A59   0F74               M                 incfsz      C_VH,w      ; Adjust borrow if C=1
0A5A   02B0               M                 subwf       divid0,f
                      01990                 ; Now the 16 MSB's of divid contain (A-C), with 16 LSB's at 0.
                      01991                 MOV16FF     divisH, divisL, B_VH, B_VL  ; Transfer B in divis
0A5B   0872               M                 movfw       B_VH
0A5C   00B4               M                 movwf       divisH
0A5D   0873               M                 movfw       B_VL
0A5E   00B5               M                 movwf       divisL
                      01992                 SUB16BIT    divisH, divisL, C_VH, C_VL  ; divis -= C
0A5F   0875               M                 movfw       C_VL
0A60   02B5               M                 subwf       divisL,f
0A61   0874               M                 movfw       C_VH
0A62   1C03               M                 btfss       STATUS,C
0A63   0F74               M                 incfsz      C_VH,w      ; Adjust borrow if C=1
0A64   02B4               M                 subwf       divisH,f
                      01993                 ; Now divis contains (B-C)
0A65   158A 202E      01994                 lcall       div_32_16      ; Divide! Result in divid0,1,2,3
                      01995                 ; Here divid0 and divid1 contain the integer part and
                      01996                 ; divid2 and divid3 contain the fraction part. In other
                      01997                 ; words, 65536 on divid0:3 represents 1.0, 32768 represents
                      01998                 ; 0.5 and so on.
                      01999                 MOV16FF     aHH,aHL,divid0,divid1
0A67   0830               M                 movfw       divid0
0A68   00C3               M                 movwf       aHH
0A69   0831               M                 movfw       divid1
0A6A   00C2               M                 movwf       aHL
                      02000                 MOV16FF     aLH,aLL,divid2,divid3
0A6B   0832               M                 movfw       divid2
0A6C   00C1               M                 movwf       aLH
0A6D   0833               M                 movfw       divid3
0A6E   00C0               M                 movwf       aLL
0A6F   3001           02001                 movlw       0x1             ; Put 1 in b
0A70   00C6           02002                 movwf       bL
0A71   01C7           02003                 clrf        bH
                      02004                 SUB16BIT    aHH, aHL, bH, bL; a -= 1
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A72   0846               M                 movfw       bL
0A73   02C2               M                 subwf       aHL,f
0A74   0847               M                 movfw       bH
0A75   1C03               M                 btfss       STATUS,C
0A76   0F47               M                 incfsz      bH,w      ; Adjust borrow if C=1
0A77   02C3               M                 subwf       aHH,f
                      02005                 ; Now aHH, aHL, aLH and aLL contain (A-C)/(B-C)-1
0A78   3001           02006                 movlw       high .256        ; Hi-byte of 256
0A79   00C7           02007                 movwf       bH
0A7A   3000           02008                 movlw       low .256         ; Lo-byte of 256
0A7B   00C6           02009                 movwf       bL
0A7C   158A 204D      02010                 lcall       mult_32_16      ; We multiply times 256, to scale.
0A7E   158A 23B8      02011                 lcall       sqrt            ; Calculate the square root
                      02012                 ; Result is in aHH, aHL, aLH, aLL
0A80   3010           02013                 movlw       high .4096      ; Hi-byte of 4096
0A81   00C7           02014                 movwf       bH
0A82   3000           02015                 movlw       low  .4096      ; Lo-byte of 4096
0A83   00C6           02016                 movwf       bL
0A84   158A 204D      02017                 lcall       mult_32_16
                      02018                 MOV16FF     divid0,divid1,aHH,aHL
0A86   0843               M                 movfw       aHH
0A87   00B0               M                 movwf       divid0
0A88   0842               M                 movfw       aHL
0A89   00B1               M                 movwf       divid1
                      02019                 MOV16FF     divid2,divid3,aLH,aLL
0A8A   0841               M                 movfw       aLH
0A8B   00B2               M                 movwf       divid2
0A8C   0840               M                 movfw       aLL
0A8D   00B3               M                 movwf       divid3
0A8E   0865           02020                 movfw       DIVH
0A8F   00B4           02021                 movwf       divisH
0A90   086F           02022                 movfw       DIVL
0A91   00B5           02023                 movwf       divisL
0A92   158A 202E      02024                 lcall       div_32_16
                      02025                 ; Multiply times 1000 to show the result in uF
                      02026                 MOV16FF     aHH, aHL, divid0, divid1
0A94   0830               M                 movfw       divid0
0A95   00C3               M                 movwf       aHH
0A96   0831               M                 movfw       divid1
0A97   00C2               M                 movwf       aHL
                      02027                 MOV16FF     aLH, aLL, divid2, divid3
0A98   0832               M                 movfw       divid2
0A99   00C1               M                 movwf       aLH
0A9A   0833               M                 movfw       divid3
0A9B   00C0               M                 movwf       aLL
0A9C   3003           02028                 movlw       high .1000  ; 1000 in decimal!
0A9D   00C7           02029                 movwf       bH
0A9E   30E8           02030                 movlw       low  .1000
0A9F   00C6           02031                 movwf       bL
0AA0   158A 204D      02032                 lcall       mult_32_16
                      02033                 MOV16FF     CAPHH, CAPHL, aHH, aHL
0AA2   0843               M                 movfw       aHH
0AA3   00DB               M                 movwf       CAPHH
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AA4   0842               M                 movfw       aHL
0AA5   00DC               M                 movwf       CAPHL
                      02034                 MOV16FF     CAPLH, CAPLL, aLH, aLL
0AA6   0841               M                 movfw       aLH
0AA7   00DD               M                 movwf       CAPLH
0AA8   0840               M                 movfw       aLL
0AA9   00DE               M                 movwf       CAPLL
0AAA   3400           02035                 retlw       0x0         ; Everything is OK.
                      02036 
                      02037 ; Manual measurement of ESR at a chosen frequency.
                      02038 ; Let the user choose the frequency with the knob, measure ESR and show it.
                      02039 ; Repeat :-)
0AAB   01FF           02040 ManualMeasESR   clrf        CHVAL       ; This contains the user action
0AAC   3001           02041                 movlw       ACTIVE      ; Ensure that the frequency is written
0AAD   00A7           02042                 movwf       WRITEF      ; when it is changed.
0AAE   118A 22E8      02043                 lcall       ReadAllADC  ; Read all the ADC data
0AB0   00B8           02044                 movwf       ESRW
                      02045                 ; One has to check CHVAL here as the user may have changed the
                      02046                 ; frequency.
0AB1   087F           02047                 movfw       CHVAL       ; Update the frequency value if needed
0AB2   07FC           02048                 addwf       FREQ,f
0AB3   274D           02049                 call        displayclear
0AB4   2220           02050                 call        SetFreq  ; Write the frequency value
0AB5   1F85           02051                 btfss       PORTA,RA7   ; Check if the button is depressed.
0AB6   2BC6           02052                 goto        Menu        ; If yes, go to the menu (exit).
0AB7   158A 2AB9      02053                 lgoto       $+1         ; This is needed as we are in page 2.
0AB9   087F           02054                 movfw       CHVAL       ; Check if something has changed.
0ABA   1D03           02055                 btfss       STATUS,Z
0ABB   2AAB           02056                 goto        ManualMeasESR  ; If the frequency has changed, do not
                      02057                                         ; show the incomplete measurement.
0ABC   0838           02058                 movfw       ESRW
0ABD   1D03           02059                 skpz
0ABE   2AC5           02060                 goto        HandleErrorsESR
0ABF   158A 221F      02061                 lcall       CalcESR     ; Calculate the ESR and show it.
0AC1   118A 2293      02062                 lcall       WriteESR
0AC3   158A 2AAB      02063                 lgoto       ManualMeasESR   ; loop !
                      02064 
0AC5   22C7           02065 HandleErrorsESR call        HandleErrors
0AC6   2AAB           02066                 goto        ManualMeasESR
                      02067 
                      02068 ; Handle all the errors that can be contained in ESRW.
0AC7   0838           02069 HandleErrors    movfw       ESRW
0AC8   3A01           02070                 xorlw       ERR_OSCLO
0AC9   1D03           02071                 skpz
0ACA   2AD0           02072                 goto        next1
0ACB   118A 233C      02073                 lcall       err_lowosc
0ACD   158A 2ACF      02074                 lgoto       $+1
0ACF   0008           02075                 return
0AD0   0838           02076 next1           movfw       ESRW
0AD1   3A02           02077                 xorlw       ERR_OSCHI
0AD2   1D03           02078                 skpz
0AD3   2AD9           02079                 goto        next2
0AD4   118A 2362      02080                 lcall       err_hiosc
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AD6   158A 2AD8      02081                 lgoto       $+1
0AD8   0008           02082                 return
0AD9   0838           02083 next2           movfw       ESRW
0ADA   3A03           02084                 xorlw       ERR_LOWCURR
0ADB   1D03           02085                 skpz
0ADC   2AE1           02086                 goto        next3
0ADD   118A 2373      02087                 lcall       err_reshi
0ADF   158A 2AE1      02088                 lgoto       $+1
0AE1   0008           02089 next3           return
                      02090 
                      02091 ; Frequency <0. Correct it and invalidate the current read.
0AE2   01FC           02092 FrequencyLo     clrf        FREQ
0AE3   3002           02093                 movlw       FREQHI
0AE4   2B27           02094                 goto        cont_meas
                      02095 
                      02096 ; Frequency >FMAX. Correct it and invalidate the current read.
0AE5   300B           02097 FrequencyHi     movlw       FMAX
0AE6   00FC           02098                 movwf       FREQ
0AE7   3001           02099                 movlw       FREQLO
0AE8   2B27           02100                 goto        cont_meas
                      02101 
                      02102 ; Emit a beep! The w register must contain the duration of the beep.
0AE9   00A1           02103 Beep            movwf       CNT
0AEA   083E           02104                 movfw       SOUNDOFF    ; Check if the sound is active.
0AEB   1D03           02105                 btfss       STATUS,Z
0AEC   0008           02106                 return
0AED   1683 1303      02107                 BANKSEL     TRISA       ; Sound port as output.
0AEF   1305           02108                 bcf         TRISA,6
0AF0   1283 1303      02109                 BANKSEL     PORTA
0AF2                  02110 loop_b
0AF2   1705           02111                 bsf         PORTA,6
0AF3   118A 2792      02112                 lcall       shortdelay
0AF5   1305           02113                 bcf         PORTA,6
0AF6   118A 2792      02114                 lcall       shortdelay
0AF8   158A 2AFA      02115                 lgoto       $+1
0AFA   0BA1           02116                 decfsz      CNT,f
0AFB   2AF2           02117                 goto       loop_b
0AFC   0008           02118                 return
                      02119                 
                      02120 
                      02121 ; Try to measure automatically the capacitance and the ESR. Change the frequency
                      02122 ; until a capacitance can be read.
0AFD   118A 274D      02123 AutomaticCapM   lcall       displayclear
0AFF   118A 26D9      02124                 lcall       showmeas
0B01   118A 2762      02125                 lcall       display2line
0B03   1283 1303      02126                 BANKSEL     WRITEF
0B05   01A7           02127                 clrf        WRITEF
0B06   01AF           02128                 clrf        SHOWNC
0B07   3001           02129                 movlw       FREQLO
0B08   00A9           02130                 movwf       OLDW
0B09   01FC           02131                 clrf        FREQ
0B0A   01DF           02132                 clrf        FLAG
0B0B   158A 2B0D      02133 AutomaticCapL   lgoto       $+1
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B0D   01FF           02134                 clrf        CHVAL
0B0E   1BFC           02135                 btfsc       FREQ,7      ; Check if FREQ is negative.
0B0F   2AE2           02136                 goto        FrequencyLo
0B10   087C           02137                 movfw       FREQ
0B11   3C0C           02138                 sublw       FMAX+1      ; Check if FREQ < FMAX
0B12   1C03           02139                 btfss       STATUS,C
0B13   2AE5           02140                 goto        FrequencyHi
                      02141                 ; Here we are sure that the frequency is correct.
0B14   118A 2220      02142                 lcall       SetFreq     ; Try to measure the capacitance.
0B16   118A 22E8      02143                 lcall       ReadAllADC
                      02144                 ; NOTE: the goto Menu will work as ReadAllADC is in page 0!
0B18   1F85           02145                 btfss       PORTA,RA7   ; Check if the button is depressed.
0B19   2BC6           02146                 goto        Menu        ; If yes, go to the menu.
0B1A   158A 2B1C      02147                 lgoto       $+1
0B1C   00A8           02148                 movwf       CURW
0B1D   3A00           02149                 xorlw       MEAS_OK
0B1E   1D03           02150                 skpz
0B1F   2B2B           02151                 goto        invalid_m
0B20   302E           02152                 movlw       '.'
0B21   118A 273F      02153                 lcall       sendchar
0B23   158A 224F      02154                 lcall       CalcCap
0B25   158A 2B27      02155                 lgoto       $+1
0B27   00A8           02156 cont_meas       movwf       CURW        ; Save the current result
0B28   3A00           02157                 xorlw       CAP_OK      ; Check if the calculation was OK.
0B29   1903           02158                 skpnz
0B2A   2B3E           02159                 goto        valid_read  ; If yes, jump there.
0B2B   0829           02160 invalid_m       movfw       OLDW
0B2C   3A00           02161                 xorlw       CAP_OK
0B2D   1903           02162                 skpnz
0B2E   2B49           02163                 goto        WriteResults
                      02164                 ;  If two successive reads fail, then erase the screen.
                      02165                 ;  only if SHOWNC!=0
0B2F   00AF           02166                 movwf       SHOWNC
0B30   1903           02167                 skpnz
0B31   2B3C           02168                 goto        increasefreq
0B32   118A 274D      02169                 lcall       displayclear
0B34   118A 26D9      02170                 lcall       showmeas
0B36   118A 2762      02171                 lcall       display2line
0B38   158A 2B3A      02172                 lgoto       $+1
0B3A   01AF           02173                 clrf        SHOWNC
0B3B   01DF           02174                 clrf        FLAG
0B3C   0AFC           02175 increasefreq    incf        FREQ,f
0B3D   2B46           02176                 goto        cont_cycle
                      02177 
0B3E   0829           02178 valid_read      movfw       OLDW        ; This speeds up the search for the
0B3F   3A00           02179                 xorlw       CAP_OK      ; reasonable frequency.
0B40   1D03           02180                 skpz
0B41   2B45           02181                 goto        skpq
0B42   085F           02182                 movfw       FLAG
0B43   1903           02183                 skpnz
0B44   03FC           02184                 decf        FREQ,f      ; Decrease the frequency
0B45   03FC           02185 skpq            decf        FREQ,f      ; Decrease the frequency
0B46   0828           02186 cont_cycle      movfw       CURW        ; Save the value of CURW.
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B47   00A9           02187                 movwf       OLDW
0B48   2B0B           02188                 goto        AutomaticCapL   ; Loop!
                      02189 
                      02190 ; We obtained a correct read of the capacitance. Write it and try to get the
                      02191 ; ESR working at a higher frequency.
0B49   3001           02192 WriteResults    movlw       0x1
0B4A   00AF           02193                 movwf       SHOWNC
0B4B   00DF           02194                 movwf       FLAG
0B4C   118A 2750      02195                 lcall       displaychome
0B4E   118A 23A8      02196                 lcall       WriteCap
                      02197                 ; The ESR is probably not correct at this frequency. We use it
                      02198                 ; as a test to see if it changes or not (i.e. for a resistance)
0B50   158A 221F      02199                 lcall       CalcESR
                      02200                 MOV16FF     ALTESRHH, ALTESRHL, aHH, aHL
0B52   0843               M                 movfw       aHH
0B53   00BD               M                 movwf       ALTESRHH
0B54   0842               M                 movfw       aHL
0B55   00BC               M                 movwf       ALTESRHL
                      02201                 MOV16FF     ALTESRLH, ALTESRLL, aLH, aLL
0B56   0841               M                 movfw       aLH
0B57   00BB               M                 movwf       ALTESRLH
0B58   0840               M                 movfw       aLL
0B59   00BA               M                 movwf       ALTESRLL
0B5A   118A 2762      02202                 lcall       display2line
0B5C   158A 2360      02203                 lcall       ObtainESR
0B5E   158A 2B3C      02204                 lgoto       increasefreq
                      02205 
                      02206 ; Now we measure the ESR, depending on the capacity. If capacitance is measured
                      02207 ; at a frequency step, we add 4 to that frequency step. If it exceeds 11, we do
                      02208 ; not measure the ESR as the capacitance is too small.
0B60   087C           02209 ObtainESR       movfw       FREQ
0B61   00CD           02210                 movwf       USR
0B62   3007           02211                 movlw       .11-.4
0B63   027C           02212                 subwf       FREQ,w
0B64   1803           02213                 btfsc       STATUS,C
0B65   2B76           02214                 goto        noESR
0B66   3004           02215                 movlw       .4
0B67   1003           02216                 bcf         STATUS,C
0B68   07FC           02217                 addwf       FREQ,f
0B69   118A 2220      02218                 lcall       SetFreq
0B6B   118A 22E8      02219                 lcall       ReadAllADC
0B6D   158A 221F      02220                 lcall       CalcESR
0B6F   118A 2293      02221                 lcall       WriteESR
0B71   158A 237B      02222                 lcall       CheckResistive
0B73   084D           02223                 movfw       USR
0B74   00FC           02224                 movwf       FREQ
0B75   0008           02225                 return
                      02226 
0B76   118A 275E      02227 noESR           lcall       clear2ndline
0B78   084D           02228                 movfw       USR
0B79   00FC           02229                 movwf       FREQ
0B7A   0008           02230                 return
                      02231 
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02232 ; Here we check if the result is resistive. aHH-aLL contains the high freq. ESR
                      02233 ; whereas ALTESRHH-ALTESRLL contain the low freq. ESR.
                      02234 ; We take abs(ESR_HI-ESR_LO) and check if it is less than ESR_HI/4
0B7B                  02235 CheckResistive  SUB32BIT    ALTESRHH, ALTESRHL, ALTESRLH, ALTESRLL, aHH, aHL, aLH, aLL
0B7B   0840               M                 movfw       aLL
0B7C   02BA               M                 subwf       ALTESRLL,f
0B7D   0841               M                 movfw       aLH
0B7E   1C03               M                 btfss       STATUS,C
0B7F   0F41               M                 incfsz      aLH,w      ; Adjust borrow if C=1
0B80   02BB               M                 subwf       ALTESRLH,f
0B81   0842               M                 movfw       aHL
0B82   1C03               M                 btfss       STATUS,C
0B83   0F42               M                 incfsz      aHL,w      ; Adjust borrow if C=1
0B84   02BC               M                 subwf       ALTESRHL,f
0B85   0843               M                 movfw       aHH
0B86   1C03               M                 btfss       STATUS,C
0B87   0F43               M                 incfsz      aHH,w      ; Adjust borrow if C=1
0B88   02BD               M                 subwf       ALTESRHH,f
0B89   1FBD           02236                 btfss       ALTESRHH,7           ; Check if result is positive
0B8A   2B96           02237                 goto        positivediff    ; Take absolute value of diff.
                      02238                 INV32BIT    ALTESRHH, ALTESRHL, ALTESRLH, ALTESRLL
0B8B   09BA               M                 comf    ALTESRLL,f           ;Complement all bytes
0B8C   09BB               M                 comf    ALTESRLH,f
0B8D   09BC               M                 comf    ALTESRHL,f
0B8E   09BD               M                 comf    ALTESRHH,f
0B8F   0ABA               M                 incf    ALTESRLL,f           ;Inc. low byte always
0B90   1903               M                 skpnz                   ;Skip if no carry to higher bytes
0B91   0ABB               M                 incf    ALTESRLH,f           ;Carry to next byte
0B92   1903               M                 skpnz
0B93   0ABC               M                 incf    ALTESRHL,f
0B94   1903               M                 skpnz
0B95   0ABD               M                 incf    ALTESRHH,f
0B96                  02239 positivediff    
                      02240                 DIV2O32BIT  aHH, aHL, aLH, aLL
0B96   1003               M                 bcf         STATUS,C
0B97   0CC3               M                 rrf         aHH,f
0B98   0CC2               M                 rrf         aHL,f
0B99   0CC1               M                 rrf         aLH,f
0B9A   0CC0               M                 rrf         aLL,f
                      02241                 DIV2O32BIT  aHH, aHL, aLH, aLL
0B9B   1003               M                 bcf         STATUS,C
0B9C   0CC3               M                 rrf         aHH,f
0B9D   0CC2               M                 rrf         aHL,f
0B9E   0CC1               M                 rrf         aLH,f
0B9F   0CC0               M                 rrf         aLL,f
                      02242                 SUB32BIT    ALTESRHH, ALTESRHL, ALTESRLH, ALTESRLL, aHH, aHL, aLH, aLL
0BA0   0840               M                 movfw       aLL
0BA1   02BA               M                 subwf       ALTESRLL,f
0BA2   0841               M                 movfw       aLH
0BA3   1C03               M                 btfss       STATUS,C
0BA4   0F41               M                 incfsz      aLH,w      ; Adjust borrow if C=1
0BA5   02BB               M                 subwf       ALTESRLH,f
0BA6   0842               M                 movfw       aHL
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BA7   1C03               M                 btfss       STATUS,C
0BA8   0F42               M                 incfsz      aHL,w      ; Adjust borrow if C=1
0BA9   02BC               M                 subwf       ALTESRHL,f
0BAA   0843               M                 movfw       aHH
0BAB   1C03               M                 btfss       STATUS,C
0BAC   0F43               M                 incfsz      aHH,w      ; Adjust borrow if C=1
0BAD   02BD               M                 subwf       ALTESRHH,f
0BAE   1BBD           02243                 btfsc       ALTESRHH,7           ; Check if result is positive
0BAF   2BB1           02244                 goto        Resistive
0BB0   0008           02245                 return
                      02246                 
0BB1   118A 275A      02247 Resistive       lcall       clear1stline
0BB3   118A 2273      02248                 lcall       WriteResistive
0BB5   158A 2BB7      02249                 lgoto       $+1
0BB7   0008           02250                 return
                      02251                 
                      02252 
                      02253 ;*** 32 BIT SQUARE ROOT ***
                      02254 ;sqrt(a) -> a
                      02255 ;Return carry set if negative
                      02256 ; SOURCE: http://www.massmind.org/techref/microchip/math/32bmath-ph.htm
                      02257 
0BB8   0D43           02258 sqrt            rlf             aHH,w        ;Trap negative values
0BB9   1803           02259                 skpnc
0BBA   0008           02260                 return
0BBB   23F0           02261                 call            movac           ;Move REGA to REGC
0BBC   23F9           02262                 call            clrba           ;Clear remainder (REGB) and root (REGA)
0BBD   3010           02263                 movlw           D'16'           ;Loop counter
0BBE   00EE           02264                 movwf           MCOUNT
                      02265 
0BBF   0DEA           02266 sqloop          rlf             REGCLL,f        ;Shift two msb's
0BC0   0DEB           02267                 rlf             REGCLH,f        ;into remainder
0BC1   0DEC           02268                 rlf             REGCHL,f
0BC2   0DED           02269                 rlf             REGCHH,f
0BC3   0DE6           02270                 rlf             REGBLL,f
0BC4   0DE7           02271                 rlf             REGBLH,f
0BC5   0DE8           02272                 rlf             REGBHL,f
0BC6   0DEA           02273                 rlf             REGCLL,f
0BC7   0DEB           02274                 rlf             REGCLH,f
0BC8   0DEC           02275                 rlf             REGCHL,f
0BC9   0DED           02276                 rlf             REGCHH,f
0BCA   0DE6           02277                 rlf             REGBLL,f
0BCB   0DE7           02278                 rlf             REGBLH,f
0BCC   0DE8           02279                 rlf             REGBHL,f
                      02280 
0BCD   1403           02281                 setc                            ;Add 1 to root
0BCE   0DC0           02282                 rlf             aLL,f        ;Align root
0BCF   0DC1           02283                 rlf             aLH,f
0BD0   0DC2           02284                 rlf             aHL,f
                      02285 
0BD1   0842           02286                 movf            aHL,w        ;Test if remdr (REGB) >= root (REGA)
0BD2   0268           02287                 subwf           REGBHL,w
0BD3   1D03           02288                 skpz
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BD4   2BDB           02289                 goto            ststgt
0BD5   0841           02290                 movf            aLH,w
0BD6   0267           02291                 subwf           REGBLH,w
0BD7   1D03           02292                 skpz
0BD8   2BDB           02293                 goto            ststgt
0BD9   0840           02294                 movf            aLL,w
0BDA   0266           02295                 subwf           REGBLL,w
0BDB   1C03           02296 ststgt          skpc                            ;Carry set if remdr >= root
0BDC   2BE8           02297                 goto            sremlt
                      02298 
0BDD   0840           02299                 movf            aLL,w        ;Subtract root (REGA) from remdr (REGB)
0BDE   02E6           02300                 subwf           REGBLL,f
0BDF   0841           02301                 movf            aLH,w
0BE0   1C03           02302                 skpc
0BE1   0F41           02303                 incfsz          aLH,w
0BE2   02E7           02304                 subwf           REGBLH,f
0BE3   0842           02305                 movf            aHL,w
0BE4   1C03           02306                 skpc
0BE5   0F42           02307                 incfsz          aHL,w
0BE6   02E8           02308                 subwf           REGBHL,f
0BE7   14C0           02309                 bsf             aLL,1        ;Set current root bit
                      02310 
0BE8   1040           02311 sremlt          bcf             aLL,0        ;Clear test bit
0BE9   0BEE           02312                 decfsz          MCOUNT,f        ;Next
0BEA   2BBF           02313                 goto            sqloop
                      02314 
0BEB   1003           02315                 clrc
0BEC   0CC2           02316                 rrf             aHL,f        ;Adjust root alignment
0BED   0CC1           02317                 rrf             aLH,f
0BEE   0CC0           02318                 rrf             aLL,f
0BEF   0008           02319                 return
                      02320 
                      02321 ;Move REGA to REGC
                      02322 ;Used by multiply, sqrt
                      02323 
0BF0   0840           02324 movac           movf            aLL,w
0BF1   00EA           02325                 movwf           REGCLL
0BF2   0841           02326                 movf            aLH,w
0BF3   00EB           02327                 movwf           REGCLH
0BF4   0842           02328                 movf            aHL,w
0BF5   00EC           02329                 movwf           REGCHL
0BF6   0843           02330                 movf            aHH,w
0BF7   00ED           02331                 movwf           REGCHH
0BF8   0008           02332                 return
                      02333 
                      02334 ;Clear REGB and REGA
                      02335 ;Used by sqrt
0BF9   01E6           02336 clrba           clrf            REGBLL
0BFA   01E7           02337                 clrf            REGBLH
0BFB   01E8           02338                 clrf            REGBHL
0BFC   01E9           02339                 clrf            REGBHH
                      02340 
                      02341 ;Clear REGA
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02342 ;Used by multiply, sqrt
0BFD   01C0           02343 clra            clrf            aLL
0BFE   01C1           02344                 clrf            aLH
0BFF   01C2           02345                 clrf            aHL
0C00   01C3           02346                 clrf            aHH
0C01   0008           02347                 return
                      02348                 end
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 88


SYMBOL TABLE
  LABEL                             VALUE

@change                           00000779
@cont                             00000785
@invpol                           00000780
@llo                              00000398
@loop                             0000076D
ABDEN                             00000000
ABDOVF                            00000007
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACTIVE                            00000001
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADD16BIT                          
ADD32BIT                          
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALOOPUM3216                       00000876
ALTESRHH                          0000003D
ALTESRHL                          0000003C
ALTESRLH                          0000003B
ALTESRLL                          0000003A
ALUM3216NA                        00000887
ALUM3216NAP                       00000874
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS12                             00000004
ANS13                             00000005
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000188
ANSELH                            00000189
A_VH                              00000070
A_VL                              00000071
AutomaticCapL                     00000B0B
AutomaticCapM                     00000AFD
BAUDCTL                           00000187
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BLOOPUM3216                       00000890
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 89


SYMBOL TABLE
  LABEL                             VALUE 

BLUM3216NA                        000008A1
BLUM3216NAP                       00000872
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
BSENSE                            0000007E
B_VH                              00000072
B_VL                              00000073
Beep                              00000AE9
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SEN                             00000005
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2RSEL                            00000004
C2SYNC                            00000000
CAPHH                             0000005B
CAPHL                             0000005C
CAPLH                             0000005D
CAPLL                             0000005E
CAP_OK                            00000000
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 90


SYMBOL TABLE
  LABEL                             VALUE 

CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CHVAL                             0000007F
CKE                               00000006
CKP                               00000004
CM1CON0                           00000107
CM2CON0                           00000108
CM2CON1                           00000109
CNT                               00000021
CREN                              00000004
CSRC                              00000007
CTRLA                             00000006
CTRLB                             00000000
CTRLC                             00000001
CTRLP                             00000007
CURR_THRESHOLD                    00000002
CURW                              00000028
C_VH                              00000074
C_VL                              00000075
CalcCap                           00000A4F
CalcESR                           00000A1F
CheckResistive                    00000B7B
ChooseDc                          00000473
ChooseDcLoop                      00000483
ChooseMenu                        000003C8
ChooseSound                       00000434
ChooseSoundLoop                   00000444
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 91


SYMBOL TABLE
  LABEL                             VALUE 

ConfigureAD9833                   00000924
ConfigureADC                      000009E9
ConfigureSPI                      00000A0B
D                                 00000005
DATA4                             00000007
DATA5                             00000006
DATA6                             00000005
DATA7                             00000004
DATALCD                           00000006
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DCTable                           00000213
DCVAL                             0000007D
DCVALUE_NO_DC                     00000006
DEC                               0000002C
DIV2O32BIT                        
DIVC0                             0000083C
DIVC1                             00001EE2
DIVC10                            000039A5
DIVC11                            0000943D
DIVC2                             0000525B
DIVC3                             00000035
DIVC4                             00000069
DIVC5                             000000D3
DIVC6                             0000020F
DIVC7                             0000041E
DIVC8                             0000083C
DIVC9                             000016A6
DIVH                              00000065
DIVH0                             00000008
DIVH1                             0000001E
DIVH10                            00000039
DIVH11                            00000094
DIVH2                             00000052
DIVH3                             00000000
DIVH4                             00000000
DIVH5                             00000000
DIVH6                             00000002
DIVH7                             00000004
DIVH8                             00000008
DIVH9                             00000016
DIVL                              0000006F
DIVL0                             0000003C
DIVL1                             000000E2
DIVL10                            000000A5
DIVL11                            0000003D
DIVL2                             0000005B
DIVL3                             00000035
DIVL4                             00000069
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 92


SYMBOL TABLE
  LABEL                             VALUE 

DIVL5                             000000D3
DIVL6                             0000000F
DIVL7                             0000001E
DIVL8                             0000003C
DIVL9                             000000A6
D_A                               00000005
D_NOT_A                           00000005
DefineChars                       000008AB
Diagnostic                        0000099F
E                                 00000002
ECCPAS                            0000009C
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
ERR_LOWCURR                       00000003
ERR_OSCHI                         00000002
ERR_OSCLO                         00000001
ESRM                              00000026
ESRW                              00000038
ExitMenu                          000003D2
F                                 00000001
FERR                              00000002
FLAG                              0000005F
FMAX                              0000000B
FREQ                              0000007C
FREQHI                            00000002
FREQLO                            00000001
FREQUENCY                         00030D40
FSR                               00000004
FSYNC                             00000004
FTable                            00000229
FVREN                             00000000
FrequencyHi                       00000AE5
FrequencyLo                       00000AE2
GCEN                              00000007
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
Greetings                         00000253
HND                               0000002B
HTS                               00000002
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 93


SYMBOL TABLE
  LABEL                             VALUE 

HandleErrors                      00000AC7
HandleErrorsESR                   00000AC5
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
INV32BIT                          
IOCB                              00000096
IOCB0                             00000000
IOCB1                             00000001
IOCB2                             00000002
IOCB3                             00000003
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
InitAll                           000008C7
InitDisplay                       000008FD
LDR                               00000023
LOOPCOUNT                         00000039
LOOPUM3216A                       00000862
LOOPUM3216B                       00000868
LSB0                              000040D6
LSB1                              00004325
LSB10                             000061C0
LSB11                             00004380
LSB2                              00004863
LSB3                              000054F8
LSB4                              000069F0
LSB5                              000053E0
LSB6                              000051B0
LSB7                              00006360
LSB8                              000046C0
LSB9                              000070E0
LSBH                              0000007A
LSBL                              0000007B
LTS                               00000001
LowBattery                        00000282
MC1OUT                            00000007
MC2OUT                            00000006
MCOUNT                            0000006E
MEASUREESR                        00000000
MEAS_OK                           00000000
MENUSTATE                         0000004E
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 94


SYMBOL TABLE
  LABEL                             VALUE 

MENUTable                         0000023F
MOV16FF                           
MSB0                              00004000
MSB1                              00004000
MSB10                             00004041
MSB11                             00004083
MSB2                              00004000
MSB3                              00004000
MSB4                              00004000
MSB5                              00004001
MSB6                              00004003
MSB7                              00004006
MSB8                              0000400D
MSB9                              00004020
MSBH                              00000078
MSBL                              00000079
MSK                               00000093
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
ManualMeasESR                     00000AAB
MeasBattery                       0000096B
Menu                              000003C6
NOACTIVE                          00000000
NOESR                             00000001
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NOZ                               00000060
OERR                              00000001
OLDW                              00000029
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSC_HITHRESHOLD                   000000F0
OSC_LOTHRESHOLD                   00000023
OSFIE                             00000007
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 95


SYMBOL TABLE
  LABEL                             VALUE 

OSFIF                             00000007
OSTS                              00000003
ObtainESR                         00000B60
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTE                             00000009
PORTFSYNC                         00000007
PR2                               00000092
PROGFREQ                          
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000009D
PULSR                             00000002
PULSS                             00000003
PWM1CON                           0000009B
PWMPIN                            00000002
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0                               00000000
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 96


SYMBOL TABLE
  LABEL                             VALUE 

RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RE3                               00000003
READV                             
READ_WRITE                        00000002
REGBHH                            00000069
REGBHL                            00000068
REGBLH                            00000067
REGBLL                            00000066
REGCHH                            0000006D
REGCHL                            0000006C
REGCLH                            0000006B
REGCLL                            0000006A
RP0                               00000005
RP1                               00000006
RS                                00000000
RSEN                              00000001
RW                                00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
ReadA                             000002C7
ReadAllADC                        000002E8
ReadB                             000002D2
ReadC                             000002DD
ResetAD9833                       00000823
Resistive                         00000BB1
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 97


SYMBOL TABLE
  LABEL                             VALUE 

S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SDR                               00000022
SEN                               00000000
SENDB                             00000003
SENDL                             0000002E
SHOWNC                            0000002F
SMP                               00000007
SOUNDOFF                          0000003E
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SR0                               00000006
SR1                               00000007
SRCON                             00000185
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STOREH                            00000076
STOREL                            00000077
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUB16BIT                          
SUB32BIT                          
SWDTEN                            00000000
SYNC                              00000004
SelectDC                          0000020A
SelectMenu                        00000236
SelectState                       00000947
SetFreq                           00000220
SetNoDC                           00000338
SetPWM                            0000031E
StartReg                          000006D1
StopReg                           000006D5
T0CS                              00000005
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 98


SYMBOL TABLE
  LABEL                             VALUE 

T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GIV                             00000007
T1GSS                             00000001
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMP                               00000020
TMP1                              00000024
TMP_1                             0000002A
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 99


SYMBOL TABLE
  LABEL                             VALUE 

TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISCTRL                          00000087
TRISE                             00000089
TRISE3                            00000003
TRISFSYNC                         00000087
TRISLCD                           00000086
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
ULPWUIE                           00000002
ULPWUIF                           00000002
UNIT                              00000025
UNIT0                             0000006D
UNIT1                             0000006D
UNIT10                            000000E4
UNIT11                            000000E4
UNIT2                             000000E4
UNIT3                             000000E4
UNIT4                             000000E4
UNIT5                             000000E4
UNIT6                             000000E4
UNIT7                             000000E4
UNIT8                             000000E4
UNIT9                             000000E4
UNT                               0000002D
USR                               0000004D
VALUE                             0020C380
VCFG0                             00000004
VCFG1                             00000005
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 100


SYMBOL TABLE
  LABEL                             VALUE 

VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000097
VREN                              00000007
VROE                              00000006
VRR                               00000005
VRSS                              00000004
VSYNC                             00000007
W                                 00000000
WCOL                              00000007
WDTCON                            00000105
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPUB                              00000095
WPUB0                             00000000
WPUB1                             00000001
WPUB2                             00000002
WPUB3                             00000003
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WRITE2DIGITS                      
WRITEF                            00000027
WRITELN                           
WUE                               00000001
Write4                            000006E8
WriteBattery                      00000423
WriteCap                          000003A8
WriteDC                           00000310
WriteESR                          00000293
WriteNumber24                     000006ED
WriteNumber8                      00000703
WriteResistive                    00000273
WriteResults                      00000B49
WriteSPI                          00000A02
Z                                 00000002
_BOR21V                           00003EFF
_BOR40V                           00003FFF
_BOR4V_BOR21V                     00003EFF
_BOR4V_BOR40V                     00003FFF
_BOREN_NSLEEP                     00003EFF
_BOREN_OFF                        00003CFF
_BOREN_ON                         00003FFF
_BOREN_SBODEN                     00003DFF
_BOR_NSLEEP                       00003EFF
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 101


SYMBOL TABLE
  LABEL                             VALUE 

_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CONFIG1                          00002007
_CONFIG2                          00002008
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         00001FFF
_DEVID1                           00002006
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_FOSC_EC                          00003FFB
_FOSC_EXTRC_CLKOUT                00003FFF
_FOSC_EXTRC_NOCLKOUT              00003FFE
_FOSC_HS                          00003FFA
_FOSC_INTRC_CLKOUT                00003FFD
_FOSC_INTRC_NOCLKOUT              00003FFC
_FOSC_LP                          00003FF8
_FOSC_XT                          00003FF9
_HS_OSC                           00003FFA
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_LVP_OFF                          00002FFF
_LVP_ON                           00003FFF
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDTE_OFF                         00003FF7
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 102


SYMBOL TABLE
  LABEL                             VALUE 

_XT_OSC                           00003FF9
__16F883                          00000001
a5                                00000044
a6                                00000045
aHH                               00000043
aHL                               00000042
aLH                               00000041
aLL                               00000040
activedelay                       00000766
automatic                         000000E0
b2bcd                             00000800
b2bcd2                            00000807
b2bcd3                            0000080B
bH                                00000047
bL                                00000046
batteryok                         0000099A
bcd                               00000050
bin                               00000057
bitcnt                            0000004C
busywait                          00000797
c1                                00000048
c2                                00000049
c3                                0000004A
c4                                0000004B
changeFreq                        000009B5
changebatt                        000001E1
checkamplitudes                   000002E9
checkc                            0000024E
checkcurrent                      0000030A
clear1stline                      0000075A
clear2ndline                      0000075E
clra                              00000BFD
clrba                             00000BF9
cnt                               00000055
contSoundLoop                     00000460
cont_cycle                        00000B46
cont_meas                         00000B27
dclist                            00000123
dcmenu                            00000130
dcneg                             00000319
dcval1                            00000140
dcval10                           000001AF
dcval11                           000001BB
dcval2                            0000014B
dcval3                            00000158
dcval4                            00000163
dcval5                            00000170
dcval6                            0000017D
dcval7                            0000018D
dcval8                            00000199
dcval9                            000001A5
directcalc                        00000A28
display2line                      00000762
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 103


SYMBOL TABLE
  LABEL                             VALUE 

displayaddrset                    00000763
displaychome                      00000750
displayclear                      0000074D
displayon                         0000074A
div_32_16                         0000082E
divid0                            00000030
divid1                            00000031
divid2                            00000032
divid3                            00000033
divisH                            00000034
divisL                            00000035
dvloop                            00000832
err_hiosc                         00000362
err_lowcurr                       00000351
err_lowosc                        0000033C
err_reshi                         00000373
force_DEC                         00000727
force_HND                         0000071F
freq0                             00000053
freq1                             0000005E
freq10                            000000C6
freq11                            000000D3
freq2                             00000069
freq3                             00000075
freq4                             00000081
freq5                             0000008C
freq6                             00000097
freq7                             000000A2
freq8                             000000AE
freq9                             000000BA
fsr                               00000004
functionset                       00000730
functionset2                      00000733
ii                                00000056
increasefreq                      00000B3C
indf                              00000000
init                              0000072D
invalid_m                         00000B2B
longdelay                         0000078A
loop_b                            00000AF2
loopf                             00000755
manual                            000000F2
measuring                         000001C9
movac                             00000BF0
mult                              000002B6
mult_32_16                        0000084D
next1                             00000AD0
next2                             00000AD9
next3                             00000AE1
no                                00000205
noESR                             00000B76
nosig                             00000351
nosignal                          000001C5
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 104


SYMBOL TABLE
  LABEL                             VALUE 

over                              000002C3
portnibble                        000007BE
positivediff                      00000B96
prg                               00000246
pulse_e                           000007B8
readadc                           00000393
remdrH                            00000036
remdrL                            00000037
remrlt                            0000084A
resist                            000001D5
sdc1                              0000048E
sdc10                             00000517
sdc11                             00000526
sdc2                              0000049F
sdc3                              000004AE
sdc4                              000004BD
sdc5                              000004CC
sdc6                              000004DB
sdc7                              000004EA
sdc8                              000004F9
sdc9                              00000508
sendbyte                          00000735
sendchar                          0000073F
sendcommand                       00000744
senddata                          0000073F
sendlinespaces                    00000753
sendspace                         0000073E
sfreq0                            00000537
sfreq1                            00000559
sfreq10                           0000068B
sfreq11                           000006AD
sfreq2                            0000057B
sfreq3                            0000059D
sfreq4                            000005BF
sfreq5                            000005E1
sfreq6                            00000603
sfreq7                            00000625
sfreq8                            00000647
sfreq9                            00000669
shortdelay                        00000792
showmeas                          000006D9
simplesend                        00000747
skip_DEC                          0000072A
skip_HND                          00000722
skpq                              00000B45
smenu1                            000003D4
smenu2                            000003E5
smenu3                            000003F4
smenu4                            00000403
smenu5                            00000412
soundactive                       000001F1
sqloop                            00000BBF
sqrt                              00000BB8
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 105


SYMBOL TABLE
  LABEL                             VALUE 

sremlt                            00000BE8
state1                            00000961
state2                            00000963
state3                            00000965
state4                            00000967
state5                            00000969
ststgt                            00000BDB
sub_dec                           00000713
sub_hnd                           0000070A
subd                              00000843
sync                              00000384
syncread                          00000391
testgt                            00000841
testloop                          000009A1
testmode                          00000117
text_battery                      0000010E
text_cap                          00000108
text_davide                       00000017
text_esr                          0000004B
text_hiosc                        00000033
text_reshi                        0000003F
text_short                        00000026
text_welcome                      00000005
tsetdc                            00000100
valid_read                        00000B3E
writeABC                          000009BC
writeno                           00000464
yes                               00000200


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXX-
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-1.2.0 #980 (Aug  5 2013)        esr.asm   8-31-2022  18:26:31         PAGE 106


SYMBOL TABLE
  LABEL                             VALUE 

0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXX-- ---------------- ---------------- ----------------
0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C00 : XX-------------- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  3023
Program Memory Words Free:  1073


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,    41 suppressed

